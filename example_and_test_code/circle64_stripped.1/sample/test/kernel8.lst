
kernel8.elf:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000080000 <_start>:
   80000:	d5384240 	mrs	x0, currentel
   80004:	f100101f 	cmp	x0, #0x4
   80008:	54000340 	b.eq	80070 <_start+0x70>
   8000c:	580003e0 	ldr	x0, 80088 <_start+0x88>
   80010:	d51c4100 	msr	sp_el1, x0
   80014:	d53ce100 	mrs	x0, cnthctl_el2
   80018:	b2400400 	orr	x0, x0, #0x3
   8001c:	d51ce100 	msr	cnthctl_el2, x0
   80020:	d51ce07f 	msr	cntvoff_el2, xzr
   80024:	d5380000 	mrs	x0, midr_el1
   80028:	d53800a1 	mrs	x1, mpidr_el1
   8002c:	d51c0000 	msr	vpidr_el2, x0
   80030:	d51c00a1 	msr	vmpidr_el2, x1
   80034:	d2867fe0 	mov	x0, #0x33ff                	// #13311
   80038:	d51c1140 	msr	cptr_el2, x0
   8003c:	d51c117f 	msr	hstr_el2, xzr
   80040:	d2a00600 	mov	x0, #0x300000              	// #3145728
   80044:	d5181040 	msr	cpacr_el1, x0
   80048:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
   8004c:	d51c1100 	msr	hcr_el2, x0
   80050:	d2810000 	mov	x0, #0x800                 	// #2048
   80054:	f2a61a00 	movk	x0, #0x30d0, lsl #16
   80058:	d5181000 	msr	sctlr_el1, x0
   8005c:	d2807880 	mov	x0, #0x3c4                 	// #964
   80060:	d51c4000 	msr	spsr_el2, x0
   80064:	10000060 	adr	x0, 80070 <_start+0x70>
   80068:	d51c4020 	msr	elr_el2, x0
   8006c:	d69f03e0 	eret
   80070:	58000100 	ldr	x0, 80090 <_start+0x90>
   80074:	9100001f 	mov	sp, x0
   80078:	58000100 	ldr	x0, 80098 <_start+0x98>
   8007c:	d518c000 	msr	vbar_el1, x0
   80080:	14000c31 	b	83144 <sysinit>
   80084:	00000000 	.word	0x00000000
   80088:	002a8000 	.word	0x002a8000
   8008c:	00000000 	.word	0x00000000
   80090:	002a0000 	.word	0x002a0000
   80094:	00000000 	.word	0x00000000
   80098:	00080800 	.word	0x00080800
   8009c:	00000000 	.word	0x00000000

00000000000800a0 <enable_mmu()>:
   800a0:	d2809980 	mov	x0, #0x4cc                 	// #1228
   800a4:	d518a200 	msr	mair_el1, x0
   800a8:	b0000020 	adrp	x0, 85000 <FromTimer+0xe8>
   800ac:	f9426000 	ldr	x0, [x0,#1216]
   800b0:	d5182000 	msr	ttbr0_el1, x0
   800b4:	d5382042 	mrs	x2, tcr_el1
   800b8:	929ff7e0 	mov	x0, #0xffffffffffff0040    	// #-65472
   800bc:	f2bff7e0 	movk	x0, #0xffbf, lsl #16
   800c0:	f2dfff00 	movk	x0, #0xfff8, lsl #32
   800c4:	d28fe401 	mov	x1, #0x7f20                	// #32544
   800c8:	f2a01001 	movk	x1, #0x80, lsl #16
   800cc:	8a000040 	and	x0, x2, x0
   800d0:	aa010000 	orr	x0, x0, x1
   800d4:	d5182040 	msr	tcr_el1, x0
   800d8:	d5381002 	mrs	x2, sctlr_el1
   800dc:	529fffa0 	mov	w0, #0xfffd                	// #65533
   800e0:	72bffee0 	movk	w0, #0xfff7, lsl #16
   800e4:	528200a1 	mov	w1, #0x1005                	// #4101
   800e8:	0a000040 	and	w0, w2, w0
   800ec:	2a010000 	orr	w0, w0, w1
   800f0:	d5181000 	msr	sctlr_el1, x0
   800f4:	d65f03c0 	ret

00000000000800f8 <memset(void*, int, unsigned long)>:
   800f8:	b40000e2 	cbz	x2, 80114 <memset(void*, int, unsigned long)+0x1c>
   800fc:	53001c21 	uxtb	w1, w1
   80100:	8b020002 	add	x2, x0, x2
   80104:	aa0003e3 	mov	x3, x0
   80108:	38001461 	strb	w1, [x3],#1
   8010c:	eb02007f 	cmp	x3, x2
   80110:	54ffffc1 	b.ne	80108 <memset(void*, int, unsigned long)+0x10>
   80114:	d65f03c0 	ret

0000000000080118 <palloc()>:
   80118:	b0000021 	adrp	x1, 85000 <FromTimer+0xe8>
   8011c:	f941e820 	ldr	x0, [x1,#976]
   80120:	91404002 	add	x2, x0, #0x10, lsl #12
   80124:	f901e822 	str	x2, [x1,#976]
   80128:	d65f03c0 	ret

000000000008012c <CreateLevel3Table(unsigned long)>:
   8012c:	f81c0ffe 	str	x30, [sp,#-64]!
   80130:	f9000fe0 	str	x0, [sp,#24]
   80134:	97fffff9 	bl	80118 <palloc()>
   80138:	f9001be0 	str	x0, [sp,#48]
   8013c:	b9003fff 	str	wzr, [sp,#60]
   80140:	14000078 	b	80320 <CreateLevel3Table(unsigned long)+0x1f4>
   80144:	b9403fe0 	ldr	w0, [sp,#60]
   80148:	d37df000 	lsl	x0, x0, #3
   8014c:	f9401be1 	ldr	x1, [sp,#48]
   80150:	8b000020 	add	x0, x1, x0
   80154:	f90017e0 	str	x0, [sp,#40]
   80158:	f94017e0 	ldr	x0, [sp,#40]
   8015c:	39400001 	ldrb	w1, [x0]
   80160:	32000421 	orr	w1, w1, #0x3
   80164:	39000001 	strb	w1, [x0]
   80168:	f94017e0 	ldr	x0, [sp,#40]
   8016c:	39400001 	ldrb	w1, [x0]
   80170:	121b7021 	and	w1, w1, #0xffffffe3
   80174:	39000001 	strb	w1, [x0]
   80178:	f94017e0 	ldr	x0, [sp,#40]
   8017c:	39400001 	ldrb	w1, [x0]
   80180:	121a7821 	and	w1, w1, #0xffffffdf
   80184:	39000001 	strb	w1, [x0]
   80188:	f94017e0 	ldr	x0, [sp,#40]
   8018c:	39400001 	ldrb	w1, [x0]
   80190:	12001421 	and	w1, w1, #0x3f
   80194:	39000001 	strb	w1, [x0]
   80198:	f94017e0 	ldr	x0, [sp,#40]
   8019c:	39400401 	ldrb	w1, [x0,#1]
   801a0:	32000421 	orr	w1, w1, #0x3
   801a4:	39000401 	strb	w1, [x0,#1]
   801a8:	f94017e0 	ldr	x0, [sp,#40]
   801ac:	39400401 	ldrb	w1, [x0,#1]
   801b0:	321e0021 	orr	w1, w1, #0x4
   801b4:	39000401 	strb	w1, [x0,#1]
   801b8:	f94017e0 	ldr	x0, [sp,#40]
   801bc:	39400401 	ldrb	w1, [x0,#1]
   801c0:	121c7821 	and	w1, w1, #0xfffffff7
   801c4:	39000401 	strb	w1, [x0,#1]
   801c8:	f94017e0 	ldr	x0, [sp,#40]
   801cc:	39400401 	ldrb	w1, [x0,#1]
   801d0:	12000c21 	and	w1, w1, #0xf
   801d4:	39000401 	strb	w1, [x0,#1]
   801d8:	f9400fe0 	ldr	x0, [sp,#24]
   801dc:	d350fc00 	lsr	x0, x0, #16
   801e0:	2a0003e2 	mov	w2, w0
   801e4:	f94017e1 	ldr	x1, [sp,#40]
   801e8:	f9400020 	ldr	x0, [x1]
   801ec:	b3707c40 	bfi	x0, x2, #16, #32
   801f0:	f9000020 	str	x0, [x1]
   801f4:	f94017e0 	ldr	x0, [sp,#40]
   801f8:	39401801 	ldrb	w1, [x0,#6]
   801fc:	121c6c21 	and	w1, w1, #0xfffffff0
   80200:	39001801 	strb	w1, [x0,#6]
   80204:	f94017e0 	ldr	x0, [sp,#40]
   80208:	39401801 	ldrb	w1, [x0,#6]
   8020c:	121b7821 	and	w1, w1, #0xffffffef
   80210:	39001801 	strb	w1, [x0,#6]
   80214:	f94017e0 	ldr	x0, [sp,#40]
   80218:	39401801 	ldrb	w1, [x0,#6]
   8021c:	121a7821 	and	w1, w1, #0xffffffdf
   80220:	39001801 	strb	w1, [x0,#6]
   80224:	f94017e0 	ldr	x0, [sp,#40]
   80228:	39401801 	ldrb	w1, [x0,#6]
   8022c:	321a0021 	orr	w1, w1, #0x40
   80230:	39001801 	strb	w1, [x0,#6]
   80234:	f94017e0 	ldr	x0, [sp,#40]
   80238:	39401801 	ldrb	w1, [x0,#6]
   8023c:	12001821 	and	w1, w1, #0x7f
   80240:	39001801 	strb	w1, [x0,#6]
   80244:	39401c01 	ldrb	w1, [x0,#7]
   80248:	52800002 	mov	w2, #0x0                   	// #0
   8024c:	0a020021 	and	w1, w1, w2
   80250:	39001c01 	strb	w1, [x0,#7]
   80254:	90000020 	adrp	x0, 84000 <strtok_r+0x5c>
   80258:	9132b000 	add	x0, x0, #0xcac
   8025c:	f9400fe1 	ldr	x1, [sp,#24]
   80260:	eb00003f 	cmp	x1, x0
   80264:	54000523 	b.cc	80308 <CreateLevel3Table(unsigned long)+0x1dc>
   80268:	f94017e0 	ldr	x0, [sp,#40]
   8026c:	39401801 	ldrb	w1, [x0,#6]
   80270:	321b0021 	orr	w1, w1, #0x20
   80274:	39001801 	strb	w1, [x0,#6]
   80278:	b0000020 	adrp	x0, 85000 <FromTimer+0xe8>
   8027c:	91132000 	add	x0, x0, #0x4c8
   80280:	f9400000 	ldr	x0, [x0]
   80284:	f9400fe1 	ldr	x1, [sp,#24]
   80288:	eb00003f 	cmp	x1, x0
   8028c:	54000183 	b.cc	802bc <CreateLevel3Table(unsigned long)+0x190>
   80290:	f94017e1 	ldr	x1, [sp,#40]
   80294:	39400020 	ldrb	w0, [x1]
   80298:	52800022 	mov	w2, #0x1                   	// #1
   8029c:	331e0840 	bfi	w0, w2, #2, #3
   802a0:	39000020 	strb	w0, [x1]
   802a4:	f94017e1 	ldr	x1, [sp,#40]
   802a8:	39400420 	ldrb	w0, [x1,#1]
   802ac:	52800042 	mov	w2, #0x2                   	// #2
   802b0:	33000440 	bfxil	w0, w2, #0, #2
   802b4:	39000420 	strb	w0, [x1,#1]
   802b8:	14000014 	b	80308 <CreateLevel3Table(unsigned long)+0x1dc>
   802bc:	f9400fe1 	ldr	x1, [sp,#24]
   802c0:	b24057e0 	mov	x0, #0x3fffff              	// #4194303
   802c4:	eb00003f 	cmp	x1, x0
   802c8:	54000209 	b.ls	80308 <CreateLevel3Table(unsigned long)+0x1dc>
   802cc:	f9400fe1 	ldr	x1, [sp,#24]
   802d0:	d29fffe0 	mov	x0, #0xffff                	// #65535
   802d4:	f2a009e0 	movk	x0, #0x4f, lsl #16
   802d8:	eb00003f 	cmp	x1, x0
   802dc:	54000168 	b.hi	80308 <CreateLevel3Table(unsigned long)+0x1dc>
   802e0:	f94017e1 	ldr	x1, [sp,#40]
   802e4:	39400020 	ldrb	w0, [x1]
   802e8:	52800042 	mov	w2, #0x2                   	// #2
   802ec:	331e0840 	bfi	w0, w2, #2, #3
   802f0:	39000020 	strb	w0, [x1]
   802f4:	f94017e1 	ldr	x1, [sp,#40]
   802f8:	39400420 	ldrb	w0, [x1,#1]
   802fc:	52800042 	mov	w2, #0x2                   	// #2
   80300:	33000440 	bfxil	w0, w2, #0, #2
   80304:	39000420 	strb	w0, [x1,#1]
   80308:	f9400fe0 	ldr	x0, [sp,#24]
   8030c:	91404000 	add	x0, x0, #0x10, lsl #12
   80310:	f9000fe0 	str	x0, [sp,#24]
   80314:	b9403fe0 	ldr	w0, [sp,#60]
   80318:	11000400 	add	w0, w0, #0x1
   8031c:	b9003fe0 	str	w0, [sp,#60]
   80320:	b9403fe1 	ldr	w1, [sp,#60]
   80324:	5283ffe0 	mov	w0, #0x1fff                	// #8191
   80328:	6b00003f 	cmp	w1, w0
   8032c:	54fff0c9 	b.ls	80144 <CreateLevel3Table(unsigned long)+0x18>
   80330:	f9401be0 	ldr	x0, [sp,#48]
   80334:	f84407fe 	ldr	x30, [sp],#64
   80338:	d65f03c0 	ret

000000000008033c <createLevel2Table()>:
   8033c:	f81c0ffe 	str	x30, [sp,#-64]!
   80340:	97ffff76 	bl	80118 <palloc()>
   80344:	f9001be0 	str	x0, [sp,#48]
   80348:	d2a00022 	mov	x2, #0x10000               	// #65536
   8034c:	52800001 	mov	w1, #0x0                   	// #0
   80350:	f9401be0 	ldr	x0, [sp,#48]
   80354:	97ffff69 	bl	800f8 <memset(void*, int, unsigned long)>
   80358:	b9003fff 	str	wzr, [sp,#60]
   8035c:	1400003d 	b	80450 <createLevel2Table()+0x114>
   80360:	b9403fe0 	ldr	w0, [sp,#60]
   80364:	d3638800 	lsl	x0, x0, #29
   80368:	f90017e0 	str	x0, [sp,#40]
   8036c:	f94017e0 	ldr	x0, [sp,#40]
   80370:	97ffff6f 	bl	8012c <CreateLevel3Table(unsigned long)>
   80374:	f90013e0 	str	x0, [sp,#32]
   80378:	b9403fe0 	ldr	w0, [sp,#60]
   8037c:	d37df000 	lsl	x0, x0, #3
   80380:	f9401be1 	ldr	x1, [sp,#48]
   80384:	8b000020 	add	x0, x1, x0
   80388:	f9000fe0 	str	x0, [sp,#24]
   8038c:	f9400fe0 	ldr	x0, [sp,#24]
   80390:	39400001 	ldrb	w1, [x0]
   80394:	32000421 	orr	w1, w1, #0x3
   80398:	39000001 	strb	w1, [x0]
   8039c:	f9400fe0 	ldr	x0, [sp,#24]
   803a0:	39400001 	ldrb	w1, [x0]
   803a4:	12000421 	and	w1, w1, #0x3
   803a8:	39000001 	strb	w1, [x0]
   803ac:	39400401 	ldrb	w1, [x0,#1]
   803b0:	52800002 	mov	w2, #0x0                   	// #0
   803b4:	0a020021 	and	w1, w1, w2
   803b8:	39000401 	strb	w1, [x0,#1]
   803bc:	f94013e0 	ldr	x0, [sp,#32]
   803c0:	d350fc00 	lsr	x0, x0, #16
   803c4:	2a0003e2 	mov	w2, w0
   803c8:	f9400fe1 	ldr	x1, [sp,#24]
   803cc:	f9400020 	ldr	x0, [x1]
   803d0:	b3707c40 	bfi	x0, x2, #16, #32
   803d4:	f9000020 	str	x0, [x1]
   803d8:	f9400fe0 	ldr	x0, [sp,#24]
   803dc:	39401801 	ldrb	w1, [x0,#6]
   803e0:	121c6c21 	and	w1, w1, #0xfffffff0
   803e4:	39001801 	strb	w1, [x0,#6]
   803e8:	f9400fe0 	ldr	x0, [sp,#24]
   803ec:	39401801 	ldrb	w1, [x0,#6]
   803f0:	12000c21 	and	w1, w1, #0xf
   803f4:	39001801 	strb	w1, [x0,#6]
   803f8:	39401c01 	ldrb	w1, [x0,#7]
   803fc:	121d7021 	and	w1, w1, #0xfffffff8
   80400:	39001c01 	strb	w1, [x0,#7]
   80404:	f9400fe0 	ldr	x0, [sp,#24]
   80408:	39401c01 	ldrb	w1, [x0,#7]
   8040c:	121c7821 	and	w1, w1, #0xfffffff7
   80410:	39001c01 	strb	w1, [x0,#7]
   80414:	f9400fe0 	ldr	x0, [sp,#24]
   80418:	39401c01 	ldrb	w1, [x0,#7]
   8041c:	121b7821 	and	w1, w1, #0xffffffef
   80420:	39001c01 	strb	w1, [x0,#7]
   80424:	f9400fe0 	ldr	x0, [sp,#24]
   80428:	39401c01 	ldrb	w1, [x0,#7]
   8042c:	12197421 	and	w1, w1, #0xffffff9f
   80430:	39001c01 	strb	w1, [x0,#7]
   80434:	f9400fe0 	ldr	x0, [sp,#24]
   80438:	39401c01 	ldrb	w1, [x0,#7]
   8043c:	12001821 	and	w1, w1, #0x7f
   80440:	39001c01 	strb	w1, [x0,#7]
   80444:	b9403fe0 	ldr	w0, [sp,#60]
   80448:	11000400 	add	w0, w0, #0x1
   8044c:	b9003fe0 	str	w0, [sp,#60]
   80450:	b9403fe0 	ldr	w0, [sp,#60]
   80454:	7100081f 	cmp	w0, #0x2
   80458:	54fff849 	b.ls	80360 <createLevel2Table()+0x24>
   8045c:	d5033f9f 	dsb	sy
   80460:	f9401be0 	ldr	x0, [sp,#48]
   80464:	f84407fe 	ldr	x30, [sp],#64
   80468:	d65f03c0 	ret

000000000008046c <initialize_memory()>:
   8046c:	f81f0ffe 	str	x30, [sp,#-16]!
   80470:	97ffffb3 	bl	8033c <createLevel2Table()>
   80474:	b0000022 	adrp	x2, 85000 <FromTimer+0xe8>
   80478:	d2809981 	mov	x1, #0x4cc                 	// #1228
   8047c:	f9026040 	str	x0, [x2,#1216]
   80480:	d518a201 	msr	mair_el1, x1
   80484:	d5182000 	msr	ttbr0_el1, x0
   80488:	d5382042 	mrs	x2, tcr_el1
   8048c:	929ff7e0 	mov	x0, #0xffffffffffff0040    	// #-65472
   80490:	f2bff7e0 	movk	x0, #0xffbf, lsl #16
   80494:	f2dfff00 	movk	x0, #0xfff8, lsl #32
   80498:	d28fe401 	mov	x1, #0x7f20                	// #32544
   8049c:	f2a01001 	movk	x1, #0x80, lsl #16
   804a0:	8a000040 	and	x0, x2, x0
   804a4:	aa010000 	orr	x0, x0, x1
   804a8:	d5182040 	msr	tcr_el1, x0
   804ac:	d5381002 	mrs	x2, sctlr_el1
   804b0:	529fffa0 	mov	w0, #0xfffd                	// #65533
   804b4:	72bffee0 	movk	w0, #0xfff7, lsl #16
   804b8:	528200a1 	mov	w1, #0x1005                	// #4101
   804bc:	0a000040 	and	w0, w2, w0
   804c0:	2a010000 	orr	w0, w0, w1
   804c4:	d5181000 	msr	sctlr_el1, x0
   804c8:	f84107fe 	ldr	x30, [sp],#16
   804cc:	d65f03c0 	ret

00000000000804d0 <main>:
   804d0:	f81f0ffe 	str	x30, [sp,#-16]!
   804d4:	97ffffe6 	bl	8046c <initialize_memory()>
   804d8:	d2800c00 	mov	x0, #0x60                  	// #96
   804dc:	f2a00a00 	movk	x0, #0x50, lsl #16
   804e0:	52806403 	mov	w3, #0x320                 	// #800
   804e4:	52803c02 	mov	w2, #0x1e0                 	// #480
   804e8:	52800404 	mov	w4, #0x20                  	// #32
   804ec:	52800001 	mov	w1, #0x0                   	// #0
   804f0:	b9000003 	str	w3, [x0]
   804f4:	b9000402 	str	w2, [x0,#4]
   804f8:	b9000803 	str	w3, [x0,#8]
   804fc:	b9000c02 	str	w2, [x0,#12]
   80500:	b900101f 	str	wzr, [x0,#16]
   80504:	b9001404 	str	w4, [x0,#20]
   80508:	b900181f 	str	wzr, [x0,#24]
   8050c:	b9001c1f 	str	wzr, [x0,#28]
   80510:	b900201f 	str	wzr, [x0,#32]
   80514:	b900241f 	str	wzr, [x0,#36]
   80518:	531a6420 	lsl	w0, w1, #6
   8051c:	2a0003e2 	mov	w2, w0
   80520:	d5087a42 	dc	csw, x2
   80524:	32020002 	orr	w2, w0, #0x40000000
   80528:	2a0203e2 	mov	w2, w2
   8052c:	d5087a42 	dc	csw, x2
   80530:	32010002 	orr	w2, w0, #0x80000000
   80534:	2a0203e2 	mov	w2, w2
   80538:	d5087a42 	dc	csw, x2
   8053c:	32020400 	orr	w0, w0, #0xc0000000
   80540:	2a0003e0 	mov	w0, w0
   80544:	d5087a40 	dc	csw, x0
   80548:	11000421 	add	w1, w1, #0x1
   8054c:	7102003f 	cmp	w1, #0x80
   80550:	54fffe41 	b.ne	80518 <main+0x48>
   80554:	52800001 	mov	w1, #0x0                   	// #0
   80558:	531a6420 	lsl	w0, w1, #6
   8055c:	52800002 	mov	w2, #0x0                   	// #0
   80560:	321f0000 	orr	w0, w0, #0x2
   80564:	2a027003 	orr	w3, w0, w2, lsl #28
   80568:	2a0303e3 	mov	w3, w3
   8056c:	d5087a43 	dc	csw, x3
   80570:	11000442 	add	w2, w2, #0x1
   80574:	7100405f 	cmp	w2, #0x10
   80578:	54ffff61 	b.ne	80564 <main+0x94>
   8057c:	11000421 	add	w1, w1, #0x1
   80580:	7108003f 	cmp	w1, #0x200
   80584:	54fffea1 	b.ne	80558 <main+0x88>
   80588:	d5033f9f 	dsb	sy
   8058c:	d2971304 	mov	x4, #0xb898                	// #47256
   80590:	f2a7e004 	movk	x4, #0x3f00, lsl #16
   80594:	d2971003 	mov	x3, #0xb880                	// #47232
   80598:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   8059c:	d2860081 	mov	x1, #0x3004                	// #12292
   805a0:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   805a4:	5289c3e2 	mov	w2, #0x4e1f                	// #19999
   805a8:	b9400080 	ldr	w0, [x4]
   805ac:	37f00100 	tbnz	w0, #30, 805cc <main+0xfc>
   805b0:	b9400060 	ldr	w0, [x3]
   805b4:	b9400025 	ldr	w5, [x1]
   805b8:	b9400020 	ldr	w0, [x1]
   805bc:	4b050000 	sub	w0, w0, w5
   805c0:	6b02001f 	cmp	w0, w2
   805c4:	54ffffa9 	b.ls	805b8 <main+0xe8>
   805c8:	17fffff8 	b	805a8 <main+0xd8>
   805cc:	d2971700 	mov	x0, #0xb8b8                	// #47288
   805d0:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   805d4:	b9400001 	ldr	w1, [x0]
   805d8:	37ffffe1 	tbnz	w1, #31, 805d4 <main+0x104>
   805dc:	d2971400 	mov	x0, #0xb8a0                	// #47264
   805e0:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   805e4:	52800c21 	mov	w1, #0x61                  	// #97
   805e8:	72b80a01 	movk	w1, #0xc050, lsl #16
   805ec:	d2971303 	mov	x3, #0xb898                	// #47256
   805f0:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   805f4:	d2971002 	mov	x2, #0xb880                	// #47232
   805f8:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   805fc:	b9000001 	str	w1, [x0]
   80600:	b9400060 	ldr	w0, [x3]
   80604:	37f7ffe0 	tbnz	w0, #30, 80600 <main+0x130>
   80608:	b9400040 	ldr	w0, [x2]
   8060c:	12000c00 	and	w0, w0, #0xf
   80610:	7100041f 	cmp	w0, #0x1
   80614:	54ffff61 	b.ne	80600 <main+0x130>
   80618:	52800001 	mov	w1, #0x0                   	// #0
   8061c:	531a6420 	lsl	w0, w1, #6
   80620:	2a0003e2 	mov	w2, w0
   80624:	d5087642 	dc	isw, x2
   80628:	32020002 	orr	w2, w0, #0x40000000
   8062c:	2a0203e2 	mov	w2, w2
   80630:	d5087642 	dc	isw, x2
   80634:	32010002 	orr	w2, w0, #0x80000000
   80638:	2a0203e2 	mov	w2, w2
   8063c:	d5087642 	dc	isw, x2
   80640:	32020400 	orr	w0, w0, #0xc0000000
   80644:	2a0003e0 	mov	w0, w0
   80648:	d5087640 	dc	isw, x0
   8064c:	11000421 	add	w1, w1, #0x1
   80650:	7102003f 	cmp	w1, #0x80
   80654:	54fffe41 	b.ne	8061c <main+0x14c>
   80658:	52800001 	mov	w1, #0x0                   	// #0
   8065c:	531a6420 	lsl	w0, w1, #6
   80660:	52800002 	mov	w2, #0x0                   	// #0
   80664:	321f0000 	orr	w0, w0, #0x2
   80668:	2a027003 	orr	w3, w0, w2, lsl #28
   8066c:	2a0303e3 	mov	w3, w3
   80670:	d5087643 	dc	isw, x3
   80674:	11000442 	add	w2, w2, #0x1
   80678:	7100405f 	cmp	w2, #0x10
   8067c:	54ffff61 	b.ne	80668 <main+0x198>
   80680:	11000421 	add	w1, w1, #0x1
   80684:	7108003f 	cmp	w1, #0x200
   80688:	54fffea1 	b.ne	8065c <main+0x18c>
   8068c:	d5033fbf 	dmb	sy
   80690:	d2800c00 	mov	x0, #0x60                  	// #96
   80694:	f2a00a00 	movk	x0, #0x50, lsl #16
   80698:	52a01fe3 	mov	w3, #0xff0000              	// #16711680
   8069c:	b9402002 	ldr	w2, [x0,#32]
   806a0:	92407442 	and	x2, x2, #0x3fffffff
   806a4:	52800004 	mov	w4, #0x0                   	// #0
   806a8:	11417481 	add	w1, w4, #0x5d, lsl #12
   806ac:	2a0403e0 	mov	w0, w4
   806b0:	11300021 	add	w1, w1, #0xc00
   806b4:	b8205843 	str	w3, [x2,w0,uxtw #2]
   806b8:	110c8000 	add	w0, w0, #0x320
   806bc:	6b00003f 	cmp	w1, w0
   806c0:	54ffffa1 	b.ne	806b4 <main+0x1e4>
   806c4:	11000484 	add	w4, w4, #0x1
   806c8:	710c809f 	cmp	w4, #0x320
   806cc:	54fffee1 	b.ne	806a8 <main+0x1d8>
   806d0:	11000463 	add	w3, w3, #0x1
   806d4:	17fffff4 	b	806a4 <main+0x1d4>
	...

0000000000080800 <VectorTable>:
   80800:	140001ef 	b	80fbc <SynchronousStub>
   80804:	d503201f 	nop
   80808:	d503201f 	nop
   8080c:	d503201f 	nop
   80810:	d503201f 	nop
   80814:	d503201f 	nop
   80818:	d503201f 	nop
   8081c:	d503201f 	nop
	...
   80880:	140001eb 	b	8102c <IRQStub>
   80884:	d503201f 	nop
   80888:	d503201f 	nop
   8088c:	d503201f 	nop
   80890:	d503201f 	nop
   80894:	d503201f 	nop
   80898:	d503201f 	nop
   8089c:	d503201f 	nop
	...
   80900:	140001a1 	b	80f84 <UnexpectedStub>
   80904:	d503201f 	nop
   80908:	d503201f 	nop
   8090c:	d503201f 	nop
   80910:	d503201f 	nop
   80914:	d503201f 	nop
   80918:	d503201f 	nop
   8091c:	d503201f 	nop
	...
   80980:	1400019d 	b	80ff4 <SErrorStub>
   80984:	d503201f 	nop
   80988:	d503201f 	nop
   8098c:	d503201f 	nop
   80990:	d503201f 	nop
   80994:	d503201f 	nop
   80998:	d503201f 	nop
   8099c:	d503201f 	nop
	...
   80a00:	1400016f 	b	80fbc <SynchronousStub>
   80a04:	d503201f 	nop
   80a08:	d503201f 	nop
   80a0c:	d503201f 	nop
   80a10:	d503201f 	nop
   80a14:	d503201f 	nop
   80a18:	d503201f 	nop
   80a1c:	d503201f 	nop
	...
   80a80:	14000141 	b	80f84 <UnexpectedStub>
   80a84:	d503201f 	nop
   80a88:	d503201f 	nop
   80a8c:	d503201f 	nop
   80a90:	d503201f 	nop
   80a94:	d503201f 	nop
   80a98:	d503201f 	nop
   80a9c:	d503201f 	nop
	...
   80b00:	14000121 	b	80f84 <UnexpectedStub>
   80b04:	d503201f 	nop
   80b08:	d503201f 	nop
   80b0c:	d503201f 	nop
   80b10:	d503201f 	nop
   80b14:	d503201f 	nop
   80b18:	d503201f 	nop
   80b1c:	d503201f 	nop
	...
   80b80:	1400011d 	b	80ff4 <SErrorStub>
   80b84:	d503201f 	nop
   80b88:	d503201f 	nop
   80b8c:	d503201f 	nop
   80b90:	d503201f 	nop
   80b94:	d503201f 	nop
   80b98:	d503201f 	nop
   80b9c:	d503201f 	nop
	...
   80c00:	140000e1 	b	80f84 <UnexpectedStub>
   80c04:	d503201f 	nop
   80c08:	d503201f 	nop
   80c0c:	d503201f 	nop
   80c10:	d503201f 	nop
   80c14:	d503201f 	nop
   80c18:	d503201f 	nop
   80c1c:	d503201f 	nop
	...
   80c80:	140000c1 	b	80f84 <UnexpectedStub>
   80c84:	d503201f 	nop
   80c88:	d503201f 	nop
   80c8c:	d503201f 	nop
   80c90:	d503201f 	nop
   80c94:	d503201f 	nop
   80c98:	d503201f 	nop
   80c9c:	d503201f 	nop
	...
   80d00:	140000a1 	b	80f84 <UnexpectedStub>
   80d04:	d503201f 	nop
   80d08:	d503201f 	nop
   80d0c:	d503201f 	nop
   80d10:	d503201f 	nop
   80d14:	d503201f 	nop
   80d18:	d503201f 	nop
   80d1c:	d503201f 	nop
	...
   80d80:	14000081 	b	80f84 <UnexpectedStub>
   80d84:	d503201f 	nop
   80d88:	d503201f 	nop
   80d8c:	d503201f 	nop
   80d90:	d503201f 	nop
   80d94:	d503201f 	nop
   80d98:	d503201f 	nop
   80d9c:	d503201f 	nop
	...
   80e00:	14000061 	b	80f84 <UnexpectedStub>
   80e04:	d503201f 	nop
   80e08:	d503201f 	nop
   80e0c:	d503201f 	nop
   80e10:	d503201f 	nop
   80e14:	d503201f 	nop
   80e18:	d503201f 	nop
   80e1c:	d503201f 	nop
	...
   80e80:	14000041 	b	80f84 <UnexpectedStub>
   80e84:	d503201f 	nop
   80e88:	d503201f 	nop
   80e8c:	d503201f 	nop
   80e90:	d503201f 	nop
   80e94:	d503201f 	nop
   80e98:	d503201f 	nop
   80e9c:	d503201f 	nop
	...
   80f00:	14000021 	b	80f84 <UnexpectedStub>
   80f04:	d503201f 	nop
   80f08:	d503201f 	nop
   80f0c:	d503201f 	nop
   80f10:	d503201f 	nop
   80f14:	d503201f 	nop
   80f18:	d503201f 	nop
   80f1c:	d503201f 	nop
	...
   80f80:	14000001 	b	80f84 <UnexpectedStub>

0000000000080f84 <UnexpectedStub>:
   80f84:	d5385200 	mrs	x0, esr_el1
   80f88:	d5384001 	mrs	x1, spsr_el1
   80f8c:	aa1e03e2 	mov	x2, x30
   80f90:	d5384023 	mrs	x3, elr_el1
   80f94:	d5384104 	mrs	x4, sp_el0
   80f98:	910003e5 	mov	x5, sp
   80f9c:	d5386006 	mrs	x6, far_el1
   80fa0:	f81f0fe6 	str	x6, [sp,#-16]!
   80fa4:	a9bf17e4 	stp	x4, x5, [sp,#-16]!
   80fa8:	a9bf0fe2 	stp	x2, x3, [sp,#-16]!
   80fac:	a9bf07e0 	stp	x0, x1, [sp,#-16]!
   80fb0:	d2800000 	mov	x0, #0x0                   	// #0
   80fb4:	910003e1 	mov	x1, sp
   80fb8:	14000273 	b	81984 <ExceptionHandler>

0000000000080fbc <SynchronousStub>:
   80fbc:	d5385200 	mrs	x0, esr_el1
   80fc0:	d5384001 	mrs	x1, spsr_el1
   80fc4:	aa1e03e2 	mov	x2, x30
   80fc8:	d5384023 	mrs	x3, elr_el1
   80fcc:	d5384104 	mrs	x4, sp_el0
   80fd0:	910003e5 	mov	x5, sp
   80fd4:	d5386006 	mrs	x6, far_el1
   80fd8:	f81f0fe6 	str	x6, [sp,#-16]!
   80fdc:	a9bf17e4 	stp	x4, x5, [sp,#-16]!
   80fe0:	a9bf0fe2 	stp	x2, x3, [sp,#-16]!
   80fe4:	a9bf07e0 	stp	x0, x1, [sp,#-16]!
   80fe8:	d2800020 	mov	x0, #0x1                   	// #1
   80fec:	910003e1 	mov	x1, sp
   80ff0:	14000265 	b	81984 <ExceptionHandler>

0000000000080ff4 <SErrorStub>:
   80ff4:	d5385200 	mrs	x0, esr_el1
   80ff8:	d5384001 	mrs	x1, spsr_el1
   80ffc:	aa1e03e2 	mov	x2, x30
   81000:	d5384023 	mrs	x3, elr_el1
   81004:	d5384104 	mrs	x4, sp_el0
   81008:	910003e5 	mov	x5, sp
   8100c:	d5386006 	mrs	x6, far_el1
   81010:	f81f0fe6 	str	x6, [sp,#-16]!
   81014:	a9bf17e4 	stp	x4, x5, [sp,#-16]!
   81018:	a9bf0fe2 	stp	x2, x3, [sp,#-16]!
   8101c:	a9bf07e0 	stp	x0, x1, [sp,#-16]!
   81020:	d2800040 	mov	x0, #0x2                   	// #2
   81024:	910003e1 	mov	x1, sp
   81028:	14000257 	b	81984 <ExceptionHandler>

000000000008102c <IRQStub>:
   8102c:	a9bf7bfd 	stp	x29, x30, [sp,#-16]!
   81030:	a9bf73fb 	stp	x27, x28, [sp,#-16]!
   81034:	a9bf6bf9 	stp	x25, x26, [sp,#-16]!
   81038:	a9bf63f7 	stp	x23, x24, [sp,#-16]!
   8103c:	a9bf5bf5 	stp	x21, x22, [sp,#-16]!
   81040:	a9bf53f3 	stp	x19, x20, [sp,#-16]!
   81044:	a9bf4bf1 	stp	x17, x18, [sp,#-16]!
   81048:	a9bf43ef 	stp	x15, x16, [sp,#-16]!
   8104c:	a9bf3bed 	stp	x13, x14, [sp,#-16]!
   81050:	a9bf33eb 	stp	x11, x12, [sp,#-16]!
   81054:	a9bf2be9 	stp	x9, x10, [sp,#-16]!
   81058:	a9bf23e7 	stp	x7, x8, [sp,#-16]!
   8105c:	a9bf1be5 	stp	x5, x6, [sp,#-16]!
   81060:	a9bf13e3 	stp	x3, x4, [sp,#-16]!
   81064:	a9bf0be1 	stp	x1, x2, [sp,#-16]!
   81068:	f81f0fe0 	str	x0, [sp,#-16]!
   8106c:	94000367 	bl	81e08 <InterruptHandler>
   81070:	f84107e0 	ldr	x0, [sp],#16
   81074:	a8c10be1 	ldp	x1, x2, [sp],#16
   81078:	a8c113e3 	ldp	x3, x4, [sp],#16
   8107c:	a8c11be5 	ldp	x5, x6, [sp],#16
   81080:	a8c123e7 	ldp	x7, x8, [sp],#16
   81084:	a8c12be9 	ldp	x9, x10, [sp],#16
   81088:	a8c133eb 	ldp	x11, x12, [sp],#16
   8108c:	a8c13bed 	ldp	x13, x14, [sp],#16
   81090:	a8c143ef 	ldp	x15, x16, [sp],#16
   81094:	a8c14bf1 	ldp	x17, x18, [sp],#16
   81098:	a8c153f3 	ldp	x19, x20, [sp],#16
   8109c:	a8c15bf5 	ldp	x21, x22, [sp],#16
   810a0:	a8c163f7 	ldp	x23, x24, [sp],#16
   810a4:	a8c16bf9 	ldp	x25, x26, [sp],#16
   810a8:	a8c173fb 	ldp	x27, x28, [sp],#16
   810ac:	a8c17bfd 	ldp	x29, x30, [sp],#16
   810b0:	d69f03e0 	eret
   810b4:	d503201f 	nop
   810b8:	d503201f 	nop
   810bc:	d503201f 	nop
	...

0000000000081800 <CExceptionHandler::CExceptionHandler()>:
   81800:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   81804:	90000033 	adrp	x19, 85000 <FromTimer+0xe8>
   81808:	f9426a61 	ldr	x1, [x19,#1232]
   8180c:	f9000bfe 	str	x30, [sp,#16]
   81810:	aa0003f4 	mov	x20, x0
   81814:	b40000e1 	cbz	x1, 81830 <CExceptionHandler::CExceptionHandler()+0x30>
   81818:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   8181c:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81820:	52800522 	mov	w2, #0x29                  	// #41
   81824:	9132e021 	add	x1, x1, #0xcb8
   81828:	91334000 	add	x0, x0, #0xcd0
   8182c:	94000b1b 	bl	84498 <assertion_failed>
   81830:	f9026a74 	str	x20, [x19,#1232]
   81834:	f9400bfe 	ldr	x30, [sp,#16]
   81838:	a8c253f3 	ldp	x19, x20, [sp],#32
   8183c:	d65f03c0 	ret

0000000000081840 <CExceptionHandler::~CExceptionHandler()>:
   81840:	90000020 	adrp	x0, 85000 <FromTimer+0xe8>
   81844:	f902681f 	str	xzr, [x0,#1232]
   81848:	d65f03c0 	ret

000000000008184c <CExceptionHandler::Throw(unsigned long, TAbortFrame*)>:
   8184c:	d10183ff 	sub	sp, sp, #0x60
   81850:	a90253f3 	stp	x19, x20, [sp,#32]
   81854:	a9035bf5 	stp	x21, x22, [sp,#48]
   81858:	a90463f7 	stp	x23, x24, [sp,#64]
   8185c:	a9057bf9 	stp	x25, x30, [sp,#80]
   81860:	aa0203f3 	mov	x19, x2
   81864:	aa0103f6 	mov	x22, x1
   81868:	b4000622 	cbz	x2, 8192c <CExceptionHandler::Throw(unsigned long, TAbortFrame*)+0xe0>
   8186c:	f9400660 	ldr	x0, [x19,#8]
   81870:	f9401278 	ldr	x24, [x19,#32]
   81874:	92400c00 	and	x0, x0, #0xf
   81878:	f100141f 	cmp	x0, #0x5
   8187c:	54000540 	b.eq	81924 <CExceptionHandler::Throw(unsigned long, TAbortFrame*)+0xd8>
   81880:	f9400267 	ldr	x7, [x19]
   81884:	d35a7cf7 	ubfx	x23, x7, #26, #6
   81888:	924070f5 	and	x21, x7, #0x1fffffff
   8188c:	d100d2e0 	sub	x0, x23, #0x34
   81890:	f100041f 	cmp	x0, #0x1
   81894:	54000449 	b.ls	8191c <CExceptionHandler::Throw(unsigned long, TAbortFrame*)+0xd0>
   81898:	d10082e0 	sub	x0, x23, #0x20
   8189c:	d2800019 	mov	x25, #0x0                   	// #0
   818a0:	f100141f 	cmp	x0, #0x5
   818a4:	540003c9 	b.ls	8191c <CExceptionHandler::Throw(unsigned long, TAbortFrame*)+0xd0>
   818a8:	f0000014 	adrp	x20, 84000 <strtok_r+0x5c>
   818ac:	9132c294 	add	x20, x20, #0xcb0
   818b0:	aa1403e1 	mov	x1, x20
   818b4:	aa1803e0 	mov	x0, x24
   818b8:	94000b61 	bl	8463c <debug_stacktrace>
   818bc:	9400016b 	bl	81e68 <CLogger::Get()>
   818c0:	f90007f8 	str	x24, [sp,#8]
   818c4:	90000021 	adrp	x1, 85000 <FromTimer+0xe8>
   818c8:	910f6021 	add	x1, x1, #0x3d8
   818cc:	f9400e65 	ldr	x5, [x19,#24]
   818d0:	f0000003 	adrp	x3, 84000 <strtok_r+0x5c>
   818d4:	f90003f9 	str	x25, [sp]
   818d8:	aa1503e7 	mov	x7, x21
   818dc:	aa1703e6 	mov	x6, x23
   818e0:	9133c063 	add	x3, x3, #0xcf0
   818e4:	f8767824 	ldr	x4, [x1,x22,lsl #3]
   818e8:	aa1403e1 	mov	x1, x20
   818ec:	f9400668 	ldr	x8, [x19,#8]
   818f0:	f9400a62 	ldr	x2, [x19,#16]
   818f4:	f9000be2 	str	x2, [sp,#16]
   818f8:	52800002 	mov	w2, #0x0                   	// #0
   818fc:	f9000fe8 	str	x8, [sp,#24]
   81900:	94000254 	bl	82250 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81904:	a9457bf9 	ldp	x25, x30, [sp,#80]
   81908:	a94253f3 	ldp	x19, x20, [sp,#32]
   8190c:	a9435bf5 	ldp	x21, x22, [sp,#48]
   81910:	a94463f7 	ldp	x23, x24, [sp,#64]
   81914:	910183ff 	add	sp, sp, #0x60
   81918:	d65f03c0 	ret
   8191c:	f9401a79 	ldr	x25, [x19,#48]
   81920:	17ffffe2 	b	818a8 <CExceptionHandler::Throw(unsigned long, TAbortFrame*)+0x5c>
   81924:	f9401678 	ldr	x24, [x19,#40]
   81928:	17ffffd6 	b	81880 <CExceptionHandler::Throw(unsigned long, TAbortFrame*)+0x34>
   8192c:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81930:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81934:	52800682 	mov	w2, #0x34                  	// #52
   81938:	9132e021 	add	x1, x1, #0xcb8
   8193c:	91338000 	add	x0, x0, #0xce0
   81940:	94000ad6 	bl	84498 <assertion_failed>
   81944:	17ffffca 	b	8186c <CExceptionHandler::Throw(unsigned long, TAbortFrame*)+0x20>

0000000000081948 <CExceptionHandler::Get()>:
   81948:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
   8194c:	90000033 	adrp	x19, 85000 <FromTimer+0xe8>
   81950:	f9426a60 	ldr	x0, [x19,#1232]
   81954:	b4000060 	cbz	x0, 81960 <CExceptionHandler::Get()+0x18>
   81958:	a8c17bf3 	ldp	x19, x30, [sp],#16
   8195c:	d65f03c0 	ret
   81960:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81964:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81968:	52800a42 	mov	w2, #0x52                  	// #82
   8196c:	9132e021 	add	x1, x1, #0xcb8
   81970:	91350000 	add	x0, x0, #0xd40
   81974:	94000ac9 	bl	84498 <assertion_failed>
   81978:	f9426a60 	ldr	x0, [x19,#1232]
   8197c:	a8c17bf3 	ldp	x19, x30, [sp],#16
   81980:	d65f03c0 	ret

0000000000081984 <ExceptionHandler>:
   81984:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   81988:	aa0103f4 	mov	x20, x1
   8198c:	aa0003f3 	mov	x19, x0
   81990:	f9000bfe 	str	x30, [sp,#16]
   81994:	97ffffed 	bl	81948 <CExceptionHandler::Get()>
   81998:	aa1403e2 	mov	x2, x20
   8199c:	aa1303e1 	mov	x1, x19
   819a0:	f9400bfe 	ldr	x30, [sp,#16]
   819a4:	a8c253f3 	ldp	x19, x20, [sp],#32
   819a8:	17ffffa9 	b	8184c <CExceptionHandler::Throw(unsigned long, TAbortFrame*)>

00000000000819ac <CInterruptSystem::CInterruptSystem()>:
   819ac:	aa0003e1 	mov	x1, x0
   819b0:	91090002 	add	x2, x0, #0x240
   819b4:	f900003f 	str	xzr, [x1]
   819b8:	91002021 	add	x1, x1, #0x8
   819bc:	f9011c3f 	str	xzr, [x1,#568]
   819c0:	eb02003f 	cmp	x1, x2
   819c4:	54ffff81 	b.ne	819b4 <CInterruptSystem::CInterruptSystem()+0x8>
   819c8:	90000021 	adrp	x1, 85000 <FromTimer+0xe8>
   819cc:	f9026c20 	str	x0, [x1,#1240]
   819d0:	d65f03c0 	ret

00000000000819d4 <CInterruptSystem::~CInterruptSystem()>:
   819d4:	90000020 	adrp	x0, 85000 <FromTimer+0xe8>
   819d8:	f9026c1f 	str	xzr, [x0,#1240]
   819dc:	d65f03c0 	ret

00000000000819e0 <CInterruptSystem::Initialize()>:
   819e0:	d2964184 	mov	x4, #0xb20c                	// #45580
   819e4:	f2a7e004 	movk	x4, #0x3f00, lsl #16
   819e8:	d2964383 	mov	x3, #0xb21c                	// #45596
   819ec:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   819f0:	d2964402 	mov	x2, #0xb220                	// #45600
   819f4:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   819f8:	b900009f 	str	wzr, [x4]
   819fc:	d2964481 	mov	x1, #0xb224                	// #45604
   81a00:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   81a04:	12800000 	mov	w0, #0xffffffff            	// #-1
   81a08:	b9000060 	str	w0, [x3]
   81a0c:	b9000040 	str	w0, [x2]
   81a10:	b9000020 	str	w0, [x1]
   81a14:	d50342ff 	msr	daifclr, #0x2
   81a18:	52800020 	mov	w0, #0x1                   	// #1
   81a1c:	d65f03c0 	ret

0000000000081a20 <CInterruptSystem::EnableIRQ(unsigned int)>:
   81a20:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
   81a24:	2a0003f3 	mov	w19, w0
   81a28:	d5033fbf 	dmb	sy
   81a2c:	71011c1f 	cmp	w0, #0x47
   81a30:	54000328 	b.hi	81a94 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
   81a34:	71007c1f 	cmp	w0, #0x1f
   81a38:	54000148 	b.hi	81a60 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
   81a3c:	d2964201 	mov	x1, #0xb210                	// #45584
   81a40:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   81a44:	52800020 	mov	w0, #0x1                   	// #1
   81a48:	12001273 	and	w19, w19, #0x1f
   81a4c:	1ad32013 	lsl	w19, w0, w19
   81a50:	b9000033 	str	w19, [x1]
   81a54:	d5033fbf 	dmb	sy
   81a58:	a8c17bf3 	ldp	x19, x30, [sp],#16
   81a5c:	d65f03c0 	ret
   81a60:	7101027f 	cmp	w19, #0x40
   81a64:	d2964280 	mov	x0, #0xb214                	// #45588
   81a68:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   81a6c:	d2964301 	mov	x1, #0xb218                	// #45592
   81a70:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   81a74:	9a813001 	csel	x1, x0, x1, cc
   81a78:	12001273 	and	w19, w19, #0x1f
   81a7c:	52800020 	mov	w0, #0x1                   	// #1
   81a80:	1ad32013 	lsl	w19, w0, w19
   81a84:	b9000033 	str	w19, [x1]
   81a88:	d5033fbf 	dmb	sy
   81a8c:	a8c17bf3 	ldp	x19, x30, [sp],#16
   81a90:	d65f03c0 	ret
   81a94:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81a98:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81a9c:	52800d42 	mov	w2, #0x6a                  	// #106
   81aa0:	91364021 	add	x1, x1, #0xd90
   81aa4:	91368000 	add	x0, x0, #0xda0
   81aa8:	12001273 	and	w19, w19, #0x1f
   81aac:	94000a7b 	bl	84498 <assertion_failed>
   81ab0:	d2964301 	mov	x1, #0xb218                	// #45592
   81ab4:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   81ab8:	52800020 	mov	w0, #0x1                   	// #1
   81abc:	1ad32013 	lsl	w19, w0, w19
   81ac0:	b9000033 	str	w19, [x1]
   81ac4:	d5033fbf 	dmb	sy
   81ac8:	a8c17bf3 	ldp	x19, x30, [sp],#16
   81acc:	d65f03c0 	ret

0000000000081ad0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   81ad0:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
   81ad4:	71011c3f 	cmp	w1, #0x47
   81ad8:	2a0103f3 	mov	w19, w1
   81adc:	a9015bf5 	stp	x21, x22, [sp,#16]
   81ae0:	a9027bf7 	stp	x23, x30, [sp,#32]
   81ae4:	aa0003f4 	mov	x20, x0
   81ae8:	aa0203f7 	mov	x23, x2
   81aec:	aa0303f6 	mov	x22, x3
   81af0:	54000228 	b.hi	81b34 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   81af4:	f8735a80 	ldr	x0, [x20,w19,uxtw #3]
   81af8:	8b334e95 	add	x21, x20, w19, uxtw #3
   81afc:	b40000e0 	cbz	x0, 81b18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   81b00:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81b04:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81b08:	52800a62 	mov	w2, #0x53                  	// #83
   81b0c:	91364021 	add	x1, x1, #0xd90
   81b10:	9136e000 	add	x0, x0, #0xdb8
   81b14:	94000a61 	bl	84498 <assertion_failed>
   81b18:	f8335a97 	str	x23, [x20,w19,uxtw #3]
   81b1c:	2a1303e0 	mov	w0, w19
   81b20:	f90122b6 	str	x22, [x21,#576]
   81b24:	a9415bf5 	ldp	x21, x22, [sp,#16]
   81b28:	a9427bf7 	ldp	x23, x30, [sp,#32]
   81b2c:	a8c353f3 	ldp	x19, x20, [sp],#48
   81b30:	17ffffbc 	b	81a20 <CInterruptSystem::EnableIRQ(unsigned int)>
   81b34:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81b38:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81b3c:	52800a42 	mov	w2, #0x52                  	// #82
   81b40:	91364021 	add	x1, x1, #0xd90
   81b44:	91368000 	add	x0, x0, #0xda0
   81b48:	94000a54 	bl	84498 <assertion_failed>
   81b4c:	17ffffea 	b	81af4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x24>

0000000000081b50 <CInterruptSystem::DisableIRQ(unsigned int)>:
   81b50:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
   81b54:	2a0003f3 	mov	w19, w0
   81b58:	d5033fbf 	dmb	sy
   81b5c:	71011c1f 	cmp	w0, #0x47
   81b60:	54000328 	b.hi	81bc4 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
   81b64:	71007c1f 	cmp	w0, #0x1f
   81b68:	54000148 	b.hi	81b90 <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
   81b6c:	d2964381 	mov	x1, #0xb21c                	// #45596
   81b70:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   81b74:	52800020 	mov	w0, #0x1                   	// #1
   81b78:	12001273 	and	w19, w19, #0x1f
   81b7c:	1ad32013 	lsl	w19, w0, w19
   81b80:	b9000033 	str	w19, [x1]
   81b84:	d5033fbf 	dmb	sy
   81b88:	a8c17bf3 	ldp	x19, x30, [sp],#16
   81b8c:	d65f03c0 	ret
   81b90:	7101027f 	cmp	w19, #0x40
   81b94:	d2964400 	mov	x0, #0xb220                	// #45600
   81b98:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   81b9c:	d2964481 	mov	x1, #0xb224                	// #45604
   81ba0:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   81ba4:	9a813001 	csel	x1, x0, x1, cc
   81ba8:	12001273 	and	w19, w19, #0x1f
   81bac:	52800020 	mov	w0, #0x1                   	// #1
   81bb0:	1ad32013 	lsl	w19, w0, w19
   81bb4:	b9000033 	str	w19, [x1]
   81bb8:	d5033fbf 	dmb	sy
   81bbc:	a8c17bf3 	ldp	x19, x30, [sp],#16
   81bc0:	d65f03c0 	ret
   81bc4:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81bc8:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81bcc:	52800ea2 	mov	w2, #0x75                  	// #117
   81bd0:	91364021 	add	x1, x1, #0xd90
   81bd4:	91368000 	add	x0, x0, #0xda0
   81bd8:	12001273 	and	w19, w19, #0x1f
   81bdc:	94000a2f 	bl	84498 <assertion_failed>
   81be0:	d2964481 	mov	x1, #0xb224                	// #45604
   81be4:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   81be8:	52800020 	mov	w0, #0x1                   	// #1
   81bec:	1ad32013 	lsl	w19, w0, w19
   81bf0:	b9000033 	str	w19, [x1]
   81bf4:	d5033fbf 	dmb	sy
   81bf8:	a8c17bf3 	ldp	x19, x30, [sp],#16
   81bfc:	d65f03c0 	ret

0000000000081c00 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   81c00:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   81c04:	71011c3f 	cmp	w1, #0x47
   81c08:	2a0103f3 	mov	w19, w1
   81c0c:	a9017bf5 	stp	x21, x30, [sp,#16]
   81c10:	aa0003f4 	mov	x20, x0
   81c14:	54000168 	b.hi	81c40 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x40>
   81c18:	f8735a80 	ldr	x0, [x20,w19,uxtw #3]
   81c1c:	8b334e95 	add	x21, x20, w19, uxtw #3
   81c20:	b4000220 	cbz	x0, 81c64 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   81c24:	2a1303e0 	mov	w0, w19
   81c28:	97ffffca 	bl	81b50 <CInterruptSystem::DisableIRQ(unsigned int)>
   81c2c:	f8335a9f 	str	xzr, [x20,w19,uxtw #3]
   81c30:	f90122bf 	str	xzr, [x21,#576]
   81c34:	a9417bf5 	ldp	x21, x30, [sp,#16]
   81c38:	a8c253f3 	ldp	x19, x20, [sp],#32
   81c3c:	d65f03c0 	ret
   81c40:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81c44:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81c48:	91368000 	add	x0, x0, #0xda0
   81c4c:	52800ba2 	mov	w2, #0x5d                  	// #93
   81c50:	91364021 	add	x1, x1, #0xd90
   81c54:	8b334e95 	add	x21, x20, w19, uxtw #3
   81c58:	94000a10 	bl	84498 <assertion_failed>
   81c5c:	f8735a80 	ldr	x0, [x20,w19,uxtw #3]
   81c60:	b5fffe20 	cbnz	x0, 81c24 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   81c64:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81c68:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81c6c:	52800bc2 	mov	w2, #0x5e                  	// #94
   81c70:	91364021 	add	x1, x1, #0xd90
   81c74:	91376000 	add	x0, x0, #0xdd8
   81c78:	94000a08 	bl	84498 <assertion_failed>
   81c7c:	2a1303e0 	mov	w0, w19
   81c80:	97ffffb4 	bl	81b50 <CInterruptSystem::DisableIRQ(unsigned int)>
   81c84:	f8335a9f 	str	xzr, [x20,w19,uxtw #3]
   81c88:	f90122bf 	str	xzr, [x21,#576]
   81c8c:	a9417bf5 	ldp	x21, x30, [sp,#16]
   81c90:	a8c253f3 	ldp	x19, x20, [sp],#32
   81c94:	d65f03c0 	ret

0000000000081c98 <CInterruptSystem::Get()>:
   81c98:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
   81c9c:	90000033 	adrp	x19, 85000 <FromTimer+0xe8>
   81ca0:	f9426e60 	ldr	x0, [x19,#1240]
   81ca4:	b4000060 	cbz	x0, 81cb0 <CInterruptSystem::Get()+0x18>
   81ca8:	a8c17bf3 	ldp	x19, x30, [sp],#16
   81cac:	d65f03c0 	ret
   81cb0:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81cb4:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81cb8:	52800fc2 	mov	w2, #0x7e                  	// #126
   81cbc:	91364021 	add	x1, x1, #0xd90
   81cc0:	91350000 	add	x0, x0, #0xd40
   81cc4:	940009f5 	bl	84498 <assertion_failed>
   81cc8:	f9426e60 	ldr	x0, [x19,#1240]
   81ccc:	a8c17bf3 	ldp	x19, x30, [sp],#16
   81cd0:	d65f03c0 	ret

0000000000081cd4 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   81cd4:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   81cd8:	71011c3f 	cmp	w1, #0x47
   81cdc:	2a0103f4 	mov	w20, w1
   81ce0:	f9000bfe 	str	x30, [sp,#16]
   81ce4:	aa0003f3 	mov	x19, x0
   81ce8:	54000148 	b.hi	81d10 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   81cec:	f8745a61 	ldr	x1, [x19,w20,uxtw #3]
   81cf0:	8b344e73 	add	x19, x19, w20, uxtw #3
   81cf4:	b4000201 	cbz	x1, 81d34 <CInterruptSystem::CallIRQHandler(unsigned int)+0x60>
   81cf8:	f9412260 	ldr	x0, [x19,#576]
   81cfc:	d63f0020 	blr	x1
   81d00:	52800020 	mov	w0, #0x1                   	// #1
   81d04:	f9400bfe 	ldr	x30, [sp,#16]
   81d08:	a8c253f3 	ldp	x19, x20, [sp],#32
   81d0c:	d65f03c0 	ret
   81d10:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81d14:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81d18:	91364021 	add	x1, x1, #0xd90
   81d1c:	52801082 	mov	w2, #0x84                  	// #132
   81d20:	91368000 	add	x0, x0, #0xda0
   81d24:	940009dd 	bl	84498 <assertion_failed>
   81d28:	f8745a61 	ldr	x1, [x19,w20,uxtw #3]
   81d2c:	8b344e73 	add	x19, x19, w20, uxtw #3
   81d30:	b5fffe41 	cbnz	x1, 81cf8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
   81d34:	2a1403e0 	mov	w0, w20
   81d38:	97ffff86 	bl	81b50 <CInterruptSystem::DisableIRQ(unsigned int)>
   81d3c:	52800000 	mov	w0, #0x0                   	// #0
   81d40:	f9400bfe 	ldr	x30, [sp,#16]
   81d44:	a8c253f3 	ldp	x19, x20, [sp],#32
   81d48:	d65f03c0 	ret

0000000000081d4c <CInterruptSystem::InterruptHandler()>:
   81d4c:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
   81d50:	a9015bf5 	stp	x21, x22, [sp,#16]
   81d54:	90000036 	adrp	x22, 85000 <FromTimer+0xe8>
   81d58:	f9426ec0 	ldr	x0, [x22,#1240]
   81d5c:	a9027bf7 	stp	x23, x30, [sp,#32]
   81d60:	b4000460 	cbz	x0, 81dec <CInterruptSystem::InterruptHandler()+0xa0>
   81d64:	d2964082 	mov	x2, #0xb204                	// #45572
   81d68:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   81d6c:	d2964101 	mov	x1, #0xb208                	// #45576
   81d70:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   81d74:	d2964000 	mov	x0, #0xb200                	// #45568
   81d78:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   81d7c:	b9400053 	ldr	w19, [x2]
   81d80:	9100d3f7 	add	x23, sp, #0x34
   81d84:	b90033f3 	str	w19, [sp,#48]
   81d88:	52800015 	mov	w21, #0x0                   	// #0
   81d8c:	b9400021 	ldr	w1, [x1]
   81d90:	b90037e1 	str	w1, [sp,#52]
   81d94:	b9400000 	ldr	w0, [x0]
   81d98:	12001c00 	and	w0, w0, #0xff
   81d9c:	b9003be0 	str	w0, [sp,#56]
   81da0:	340000d3 	cbz	w19, 81db8 <CInterruptSystem::InterruptHandler()+0x6c>
   81da4:	2a1503f4 	mov	w20, w21
   81da8:	37000133 	tbnz	w19, #0, 81dcc <CInterruptSystem::InterruptHandler()+0x80>
   81dac:	53017e73 	lsr	w19, w19, #1
   81db0:	11000694 	add	w20, w20, #0x1
   81db4:	35ffffb3 	cbnz	w19, 81da8 <CInterruptSystem::InterruptHandler()+0x5c>
   81db8:	110082b5 	add	w21, w21, #0x20
   81dbc:	710182bf 	cmp	w21, #0x60
   81dc0:	540000e0 	b.eq	81ddc <CInterruptSystem::InterruptHandler()+0x90>
   81dc4:	b84046f3 	ldr	w19, [x23],#4
   81dc8:	17fffff6 	b	81da0 <CInterruptSystem::InterruptHandler()+0x54>
   81dcc:	f9426ec0 	ldr	x0, [x22,#1240]
   81dd0:	2a1403e1 	mov	w1, w20
   81dd4:	97ffffc0 	bl	81cd4 <CInterruptSystem::CallIRQHandler(unsigned int)>
   81dd8:	34fffea0 	cbz	w0, 81dac <CInterruptSystem::InterruptHandler()+0x60>
   81ddc:	a9415bf5 	ldp	x21, x22, [sp,#16]
   81de0:	a9427bf7 	ldp	x23, x30, [sp,#32]
   81de4:	a8c453f3 	ldp	x19, x20, [sp],#64
   81de8:	d65f03c0 	ret
   81dec:	f0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   81df0:	f0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   81df4:	528012e2 	mov	w2, #0x97                  	// #151
   81df8:	91364021 	add	x1, x1, #0xd90
   81dfc:	91350000 	add	x0, x0, #0xd40
   81e00:	940009a6 	bl	84498 <assertion_failed>
   81e04:	17ffffd8 	b	81d64 <CInterruptSystem::InterruptHandler()+0x18>

0000000000081e08 <InterruptHandler>:
   81e08:	17ffffd1 	b	81d4c <CInterruptSystem::InterruptHandler()>

0000000000081e0c <CLogger::CLogger(unsigned int, CTimer*)>:
   81e0c:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
   81e10:	aa0003f3 	mov	x19, x0
   81e14:	52800023 	mov	w3, #0x1                   	// #1
   81e18:	d2880000 	mov	x0, #0x4000                	// #16384
   81e1c:	b9000261 	str	w1, [x19]
   81e20:	f9000662 	str	x2, [x19,#8]
   81e24:	b9002a63 	str	w3, [x19,#40]
   81e28:	f9000a7f 	str	xzr, [x19,#16]
   81e2c:	f9000e7f 	str	xzr, [x19,#24]
   81e30:	b900227f 	str	wzr, [x19,#32]
   81e34:	b900267f 	str	wzr, [x19,#36]
   81e38:	94000130 	bl	822f8 <operator new[](unsigned long)>
   81e3c:	f9000e60 	str	x0, [x19,#24]
   81e40:	90000021 	adrp	x1, 85000 <FromTimer+0xe8>
   81e44:	f9027033 	str	x19, [x1,#1248]
   81e48:	a8c17bf3 	ldp	x19, x30, [sp],#16
   81e4c:	d65f03c0 	ret

0000000000081e50 <CLogger::~CLogger()>:
   81e50:	90000021 	adrp	x1, 85000 <FromTimer+0xe8>
   81e54:	f9400c00 	ldr	x0, [x0,#24]
   81e58:	f902703f 	str	xzr, [x1,#1248]
   81e5c:	b4000040 	cbz	x0, 81e64 <CLogger::~CLogger()+0x14>
   81e60:	14000128 	b	82300 <operator delete[](void*)>
   81e64:	d65f03c0 	ret

0000000000081e68 <CLogger::Get()>:
   81e68:	90000020 	adrp	x0, 85000 <FromTimer+0xe8>
   81e6c:	f9427000 	ldr	x0, [x0,#1248]
   81e70:	d65f03c0 	ret

0000000000081e74 <CLogger::Write(char const*)>:
   81e74:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   81e78:	aa0003f3 	mov	x19, x0
   81e7c:	aa0103e0 	mov	x0, x1
   81e80:	a9017bf5 	stp	x21, x30, [sp,#16]
   81e84:	aa0103f4 	mov	x20, x1
   81e88:	940007f4 	bl	83e58 <strlen>
   81e8c:	f9400a63 	ldr	x3, [x19,#16]
   81e90:	2a0003e2 	mov	w2, w0
   81e94:	aa0003f5 	mov	x21, x0
   81e98:	aa1403e1 	mov	x1, x20
   81e9c:	aa0303e0 	mov	x0, x3
   81ea0:	f9400063 	ldr	x3, [x3]
   81ea4:	f9400c63 	ldr	x3, [x3,#24]
   81ea8:	d63f0060 	blr	x3
   81eac:	b9402a60 	ldr	w0, [x19,#40]
   81eb0:	35000320 	cbnz	w0, 81f14 <CLogger::Write(char const*)+0xa0>
   81eb4:	8b150280 	add	x0, x20, x21
   81eb8:	eb00029f 	cmp	x20, x0
   81ebc:	54000220 	b.eq	81f00 <CLogger::Write(char const*)+0x8c>
   81ec0:	38401681 	ldrb	w1, [x20],#1
   81ec4:	7100343f 	cmp	w1, #0xd
   81ec8:	54ffff80 	b.eq	81eb8 <CLogger::Write(char const*)+0x44>
   81ecc:	b9402262 	ldr	w2, [x19,#32]
   81ed0:	f9400e63 	ldr	x3, [x19,#24]
   81ed4:	38226861 	strb	w1, [x3,x2]
   81ed8:	b9402261 	ldr	w1, [x19,#32]
   81edc:	b9402662 	ldr	w2, [x19,#36]
   81ee0:	11000421 	add	w1, w1, #0x1
   81ee4:	12003421 	and	w1, w1, #0x3fff
   81ee8:	b9002261 	str	w1, [x19,#32]
   81eec:	6b02003f 	cmp	w1, w2
   81ef0:	54fffe41 	b.ne	81eb8 <CLogger::Write(char const*)+0x44>
   81ef4:	51000420 	sub	w0, w1, #0x1
   81ef8:	12003400 	and	w0, w0, #0x3fff
   81efc:	b9002260 	str	w0, [x19,#32]
   81f00:	b9402a60 	ldr	w0, [x19,#40]
   81f04:	350000c0 	cbnz	w0, 81f1c <CLogger::Write(char const*)+0xa8>
   81f08:	a9417bf5 	ldp	x21, x30, [sp,#16]
   81f0c:	a8c253f3 	ldp	x19, x20, [sp],#32
   81f10:	d65f03c0 	ret
   81f14:	94000385 	bl	82d28 <EnterCritical>
   81f18:	17ffffe7 	b	81eb4 <CLogger::Write(char const*)+0x40>
   81f1c:	a9417bf5 	ldp	x21, x30, [sp,#16]
   81f20:	a8c253f3 	ldp	x19, x20, [sp],#32
   81f24:	1400038e 	b	82d5c <LeaveCritical>

0000000000081f28 <CLogger::Read(void*, unsigned int)>:
   81f28:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
   81f2c:	aa0003f3 	mov	x19, x0
   81f30:	2a0203f4 	mov	w20, w2
   81f34:	a9017bf5 	stp	x21, x30, [sp,#16]
   81f38:	aa0103f5 	mov	x21, x1
   81f3c:	b9402800 	ldr	w0, [x0,#40]
   81f40:	35000380 	cbnz	w0, 81fb0 <CLogger::Read(void*, unsigned int)+0x88>
   81f44:	b9402262 	ldr	w2, [x19,#32]
   81f48:	b9402660 	ldr	w0, [x19,#36]
   81f4c:	6b00005f 	cmp	w2, w0
   81f50:	54000400 	b.eq	81fd0 <CLogger::Read(void*, unsigned int)+0xa8>
   81f54:	aa1503e1 	mov	x1, x21
   81f58:	2a1403e0 	mov	w0, w20
   81f5c:	52800004 	mov	w4, #0x0                   	// #0
   81f60:	1400000c 	b	81f90 <CLogger::Read(void*, unsigned int)+0x68>
   81f64:	b9402663 	ldr	w3, [x19,#36]
   81f68:	f9400e65 	ldr	x5, [x19,#24]
   81f6c:	386368a3 	ldrb	w3, [x5,x3]
   81f70:	38001423 	strb	w3, [x1],#1
   81f74:	b9402663 	ldr	w3, [x19,#36]
   81f78:	b9402265 	ldr	w5, [x19,#32]
   81f7c:	11000463 	add	w3, w3, #0x1
   81f80:	12003463 	and	w3, w3, #0x3fff
   81f84:	b9002663 	str	w3, [x19,#36]
   81f88:	6b05007f 	cmp	w3, w5
   81f8c:	540002a0 	b.eq	81fe0 <CLogger::Read(void*, unsigned int)+0xb8>
   81f90:	6b14009f 	cmp	w4, w20
   81f94:	11000484 	add	w4, w4, #0x1
   81f98:	54fffe61 	b.ne	81f64 <CLogger::Read(void*, unsigned int)+0x3c>
   81f9c:	b9402a61 	ldr	w1, [x19,#40]
   81fa0:	35000261 	cbnz	w1, 81fec <CLogger::Read(void*, unsigned int)+0xc4>
   81fa4:	a9417bf5 	ldp	x21, x30, [sp,#16]
   81fa8:	a8c353f3 	ldp	x19, x20, [sp],#48
   81fac:	d65f03c0 	ret
   81fb0:	9400035e 	bl	82d28 <EnterCritical>
   81fb4:	b9402262 	ldr	w2, [x19,#32]
   81fb8:	b9402660 	ldr	w0, [x19,#36]
   81fbc:	6b00005f 	cmp	w2, w0
   81fc0:	54fffca1 	b.ne	81f54 <CLogger::Read(void*, unsigned int)+0x2c>
   81fc4:	b9402a60 	ldr	w0, [x19,#40]
   81fc8:	34000040 	cbz	w0, 81fd0 <CLogger::Read(void*, unsigned int)+0xa8>
   81fcc:	94000364 	bl	82d5c <LeaveCritical>
   81fd0:	a9417bf5 	ldp	x21, x30, [sp,#16]
   81fd4:	12800000 	mov	w0, #0xffffffff            	// #-1
   81fd8:	a8c353f3 	ldp	x19, x20, [sp],#48
   81fdc:	d65f03c0 	ret
   81fe0:	b9402a61 	ldr	w1, [x19,#40]
   81fe4:	2a0403e0 	mov	w0, w4
   81fe8:	34fffde1 	cbz	w1, 81fa4 <CLogger::Read(void*, unsigned int)+0x7c>
   81fec:	b9002fe0 	str	w0, [sp,#44]
   81ff0:	9400035b 	bl	82d5c <LeaveCritical>
   81ff4:	b9402fe0 	ldr	w0, [sp,#44]
   81ff8:	a9417bf5 	ldp	x21, x30, [sp,#16]
   81ffc:	a8c353f3 	ldp	x19, x20, [sp],#48
   82000:	d65f03c0 	ret

0000000000082004 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   82004:	a9b653f3 	stp	x19, x20, [sp,#-160]!
   82008:	a9015bf5 	stp	x21, x22, [sp,#16]
   8200c:	a90263f7 	stp	x23, x24, [sp,#32]
   82010:	f9001bfe 	str	x30, [sp,#48]
   82014:	b9400005 	ldr	w5, [x0]
   82018:	6b0200bf 	cmp	w5, w2
   8201c:	540000c2 	b.cs	82034 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x30>
   82020:	a9415bf5 	ldp	x21, x22, [sp,#16]
   82024:	a94263f7 	ldp	x23, x24, [sp,#32]
   82028:	f9401bfe 	ldr	x30, [sp,#48]
   8202c:	a8ca53f3 	ldp	x19, x20, [sp],#160
   82030:	d65f03c0 	ret
   82034:	2a0203f4 	mov	w20, w2
   82038:	aa0003f3 	mov	x19, x0
   8203c:	910183e0 	add	x0, sp, #0x60
   82040:	aa0403f7 	mov	x23, x4
   82044:	aa0303f6 	mov	x22, x3
   82048:	aa0103f5 	mov	x21, x1
   8204c:	940000ed 	bl	82400 <CString::CString()>
   82050:	34000794 	cbz	w20, 82140 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x13c>
   82054:	f9400660 	ldr	x0, [x19,#8]
   82058:	b4000cc0 	cbz	x0, 821f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   8205c:	940004d0 	bl	8339c <CTimer::GetTimeString()>
   82060:	aa0003f8 	mov	x24, x0
   82064:	b40001a0 	cbz	x0, 82098 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x94>
   82068:	94000102 	bl	82470 <CString::operator char const*() const>
   8206c:	aa0003e1 	mov	x1, x0
   82070:	910183e0 	add	x0, sp, #0x60
   82074:	9400011e 	bl	824ec <CString::Append(char const*)>
   82078:	910183e0 	add	x0, sp, #0x60
   8207c:	d0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   82080:	91380021 	add	x1, x1, #0xe00
   82084:	9400011a 	bl	824ec <CString::Append(char const*)>
   82088:	f9400301 	ldr	x1, [x24]
   8208c:	aa1803e0 	mov	x0, x24
   82090:	f9400421 	ldr	x1, [x1,#8]
   82094:	d63f0020 	blr	x1
   82098:	aa1503e1 	mov	x1, x21
   8209c:	910183e0 	add	x0, sp, #0x60
   820a0:	910203f5 	add	x21, sp, #0x80
   820a4:	94000112 	bl	824ec <CString::Append(char const*)>
   820a8:	910183e0 	add	x0, sp, #0x60
   820ac:	d0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   820b0:	91382021 	add	x1, x1, #0xe08
   820b4:	9400010e 	bl	824ec <CString::Append(char const*)>
   820b8:	aa1503e0 	mov	x0, x21
   820bc:	940000d1 	bl	82400 <CString::CString()>
   820c0:	a9401ee6 	ldp	x6, x7, [x23]
   820c4:	a94116e4 	ldp	x4, x5, [x23,#16]
   820c8:	aa1603e1 	mov	x1, x22
   820cc:	910103e2 	add	x2, sp, #0x40
   820d0:	aa1503e0 	mov	x0, x21
   820d4:	a9041fe6 	stp	x6, x7, [sp,#64]
   820d8:	a90517e4 	stp	x4, x5, [sp,#80]
   820dc:	94000198 	bl	8273c <CString::FormatV(char const*, std::__va_list)>
   820e0:	aa1503e0 	mov	x0, x21
   820e4:	940000e3 	bl	82470 <CString::operator char const*() const>
   820e8:	aa0003e1 	mov	x1, x0
   820ec:	910183e0 	add	x0, sp, #0x60
   820f0:	940000ff 	bl	824ec <CString::Append(char const*)>
   820f4:	34000614 	cbz	w20, 821b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1b0>
   820f8:	910183e0 	add	x0, sp, #0x60
   820fc:	d0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   82100:	91386021 	add	x1, x1, #0xe18
   82104:	940000fa 	bl	824ec <CString::Append(char const*)>
   82108:	910183e0 	add	x0, sp, #0x60
   8210c:	940000d9 	bl	82470 <CString::operator char const*() const>
   82110:	aa0003e1 	mov	x1, x0
   82114:	aa1303e0 	mov	x0, x19
   82118:	97ffff57 	bl	81e74 <CLogger::Write(char const*)>
   8211c:	aa1503e0 	mov	x0, x21
   82120:	9400007a 	bl	82308 <CString::~CString()>
   82124:	910183e0 	add	x0, sp, #0x60
   82128:	94000078 	bl	82308 <CString::~CString()>
   8212c:	f9401bfe 	ldr	x30, [sp,#48]
   82130:	a9415bf5 	ldp	x21, x22, [sp,#16]
   82134:	a94263f7 	ldp	x23, x24, [sp,#32]
   82138:	a8ca53f3 	ldp	x19, x20, [sp],#160
   8213c:	d65f03c0 	ret
   82140:	d0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   82144:	9137e021 	add	x1, x1, #0xdf8
   82148:	910183e0 	add	x0, sp, #0x60
   8214c:	940000cf 	bl	82488 <CString::operator=(char const*)>
   82150:	f9400660 	ldr	x0, [x19,#8]
   82154:	b5fff840 	cbnz	x0, 8205c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x58>
   82158:	aa1503e1 	mov	x1, x21
   8215c:	910183e0 	add	x0, sp, #0x60
   82160:	910203f5 	add	x21, sp, #0x80
   82164:	940000e2 	bl	824ec <CString::Append(char const*)>
   82168:	910183e0 	add	x0, sp, #0x60
   8216c:	d0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   82170:	91382021 	add	x1, x1, #0xe08
   82174:	940000de 	bl	824ec <CString::Append(char const*)>
   82178:	aa1503e0 	mov	x0, x21
   8217c:	940000a1 	bl	82400 <CString::CString()>
   82180:	a9401ee6 	ldp	x6, x7, [x23]
   82184:	a94116e4 	ldp	x4, x5, [x23,#16]
   82188:	aa1603e1 	mov	x1, x22
   8218c:	910103e2 	add	x2, sp, #0x40
   82190:	aa1503e0 	mov	x0, x21
   82194:	a9041fe6 	stp	x6, x7, [sp,#64]
   82198:	a90517e4 	stp	x4, x5, [sp,#80]
   8219c:	94000168 	bl	8273c <CString::FormatV(char const*, std::__va_list)>
   821a0:	aa1503e0 	mov	x0, x21
   821a4:	940000b3 	bl	82470 <CString::operator char const*() const>
   821a8:	aa0003e1 	mov	x1, x0
   821ac:	910183e0 	add	x0, sp, #0x60
   821b0:	940000cf 	bl	824ec <CString::Append(char const*)>
   821b4:	910183e0 	add	x0, sp, #0x60
   821b8:	d0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   821bc:	91384021 	add	x1, x1, #0xe10
   821c0:	940000cb 	bl	824ec <CString::Append(char const*)>
   821c4:	910183e0 	add	x0, sp, #0x60
   821c8:	d0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   821cc:	91386021 	add	x1, x1, #0xe18
   821d0:	940000c7 	bl	824ec <CString::Append(char const*)>
   821d4:	910183e0 	add	x0, sp, #0x60
   821d8:	940000a6 	bl	82470 <CString::operator char const*() const>
   821dc:	aa0003e1 	mov	x1, x0
   821e0:	aa1303e0 	mov	x0, x19
   821e4:	97ffff24 	bl	81e74 <CLogger::Write(char const*)>
   821e8:	940003c7 	bl	83104 <halt>
   821ec:	17ffffcc 	b	8211c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x118>
   821f0:	aa1503e1 	mov	x1, x21
   821f4:	910183e0 	add	x0, sp, #0x60
   821f8:	910203f5 	add	x21, sp, #0x80
   821fc:	940000bc 	bl	824ec <CString::Append(char const*)>
   82200:	910183e0 	add	x0, sp, #0x60
   82204:	d0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   82208:	91382021 	add	x1, x1, #0xe08
   8220c:	940000b8 	bl	824ec <CString::Append(char const*)>
   82210:	aa1503e0 	mov	x0, x21
   82214:	9400007b 	bl	82400 <CString::CString()>
   82218:	a9401ee6 	ldp	x6, x7, [x23]
   8221c:	a94116e4 	ldp	x4, x5, [x23,#16]
   82220:	aa1603e1 	mov	x1, x22
   82224:	910103e2 	add	x2, sp, #0x40
   82228:	aa1503e0 	mov	x0, x21
   8222c:	a9041fe6 	stp	x6, x7, [sp,#64]
   82230:	a90517e4 	stp	x4, x5, [sp,#80]
   82234:	94000142 	bl	8273c <CString::FormatV(char const*, std::__va_list)>
   82238:	aa1503e0 	mov	x0, x21
   8223c:	9400008d 	bl	82470 <CString::operator char const*() const>
   82240:	aa0003e1 	mov	x1, x0
   82244:	910183e0 	add	x0, sp, #0x60
   82248:	940000a9 	bl	824ec <CString::Append(char const*)>
   8224c:	17ffffab 	b	820f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000000000082250 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   82250:	f8110ffe 	str	x30, [sp,#-240]!
   82254:	9103c3e8 	add	x8, sp, #0xf0
   82258:	f9001be8 	str	x8, [sp,#48]
   8225c:	f9001fe8 	str	x8, [sp,#56]
   82260:	128003e8 	mov	w8, #0xffffffe0            	// #-32
   82264:	910343e9 	add	x9, sp, #0xd0
   82268:	b9004be8 	str	w8, [sp,#72]
   8226c:	f90023e9 	str	x9, [sp,#64]
   82270:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   82274:	b9004fe8 	str	w8, [sp,#76]
   82278:	a9432fea 	ldp	x10, x11, [sp,#48]
   8227c:	a94427e8 	ldp	x8, x9, [sp,#64]
   82280:	f9006be4 	str	x4, [sp,#208]
   82284:	910043e4 	add	x4, sp, #0x10
   82288:	f9006fe5 	str	x5, [sp,#216]
   8228c:	f90073e6 	str	x6, [sp,#224]
   82290:	3d8017e0 	str	q0, [sp,#80]
   82294:	f90077e7 	str	x7, [sp,#232]
   82298:	3d801be1 	str	q1, [sp,#96]
   8229c:	3d801fe2 	str	q2, [sp,#112]
   822a0:	3d8023e3 	str	q3, [sp,#128]
   822a4:	3d8027e4 	str	q4, [sp,#144]
   822a8:	3d802be5 	str	q5, [sp,#160]
   822ac:	3d802fe6 	str	q6, [sp,#176]
   822b0:	3d8033e7 	str	q7, [sp,#192]
   822b4:	a9012fea 	stp	x10, x11, [sp,#16]
   822b8:	a90227e8 	stp	x8, x9, [sp,#32]
   822bc:	97ffff52 	bl	82004 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   822c0:	f84f07fe 	ldr	x30, [sp],#240
   822c4:	d65f03c0 	ret

00000000000822c8 <CLogger::Initialize(CDevice*)>:
   822c8:	f81f0ffe 	str	x30, [sp,#-16]!
   822cc:	d0000004 	adrp	x4, 84000 <strtok_r+0x5c>
   822d0:	d0000003 	adrp	x3, 84000 <strtok_r+0x5c>
   822d4:	f9000801 	str	x1, [x0,#16]
   822d8:	91388063 	add	x3, x3, #0xe20
   822dc:	52800062 	mov	w2, #0x3                   	// #3
   822e0:	9138c081 	add	x1, x4, #0xe30
   822e4:	97ffffdb 	bl	82250 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   822e8:	52800020 	mov	w0, #0x1                   	// #1
   822ec:	f84107fe 	ldr	x30, [sp],#16
   822f0:	d65f03c0 	ret

00000000000822f4 <operator new(unsigned long)>:
   822f4:	14000772 	b	840bc <malloc>

00000000000822f8 <operator new[](unsigned long)>:
   822f8:	14000771 	b	840bc <malloc>

00000000000822fc <operator delete(void*)>:
   822fc:	140007d3 	b	84248 <free>

0000000000082300 <operator delete[](void*)>:
   82300:	140007d2 	b	84248 <free>
   82304:	00000000 	.inst	0x00000000 ; undefined

0000000000082308 <CString::~CString()>:
   82308:	58000102 	ldr	x2, 82328 <CString::~CString()+0x20>
   8230c:	f9400401 	ldr	x1, [x0,#8]
   82310:	f9000002 	str	x2, [x0]
   82314:	b4000061 	cbz	x1, 82320 <CString::~CString()+0x18>
   82318:	aa0103e0 	mov	x0, x1
   8231c:	17fffff9 	b	82300 <operator delete[](void*)>
   82320:	d65f03c0 	ret
   82324:	d503201f 	nop
   82328:	00084eb0 	.word	0x00084eb0
   8232c:	00000000 	.word	0x00000000

0000000000082330 <CString::~CString()>:
   82330:	a9be7bfd 	stp	x29, x30, [sp,#-32]!
   82334:	910003fd 	mov	x29, sp
   82338:	f9000bf3 	str	x19, [sp,#16]
   8233c:	aa0003f3 	mov	x19, x0
   82340:	58000141 	ldr	x1, 82368 <CString::~CString()+0x38>
   82344:	f9400400 	ldr	x0, [x0,#8]
   82348:	f9000261 	str	x1, [x19]
   8234c:	b4000040 	cbz	x0, 82354 <CString::~CString()+0x24>
   82350:	97ffffec 	bl	82300 <operator delete[](void*)>
   82354:	aa1303e0 	mov	x0, x19
   82358:	f9400bf3 	ldr	x19, [sp,#16]
   8235c:	a8c27bfd 	ldp	x29, x30, [sp],#32
   82360:	17ffffe7 	b	822fc <operator delete(void*)>
   82364:	d503201f 	nop
   82368:	00084eb0 	.word	0x00084eb0
   8236c:	00000000 	.word	0x00000000

0000000000082370 <CString::ReserveSpace(unsigned long) [clone .part.0]>:
   82370:	a9bd7bfd 	stp	x29, x30, [sp,#-48]!
   82374:	910003fd 	mov	x29, sp
   82378:	a90153f3 	stp	x19, x20, [sp,#16]
   8237c:	f9400c02 	ldr	x2, [x0,#24]
   82380:	f9400414 	ldr	x20, [x0,#8]
   82384:	b9401003 	ldr	w3, [x0,#16]
   82388:	cb140054 	sub	x20, x2, x20
   8238c:	8b140021 	add	x1, x1, x20
   82390:	91000422 	add	x2, x1, #0x1
   82394:	a9025bf5 	stp	x21, x22, [sp,#32]
   82398:	eb03005f 	cmp	x2, x3
   8239c:	540000a8 	b.hi	823b0 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x40>
   823a0:	a94153f3 	ldp	x19, x20, [sp,#16]
   823a4:	a9425bf5 	ldp	x21, x22, [sp,#32]
   823a8:	a8c37bfd 	ldp	x29, x30, [sp],#48
   823ac:	d65f03c0 	ret
   823b0:	91010435 	add	x21, x1, #0x41
   823b4:	aa0003f3 	mov	x19, x0
   823b8:	aa1503e0 	mov	x0, x21
   823bc:	97ffffcf 	bl	822f8 <operator new[](unsigned long)>
   823c0:	aa0003f6 	mov	x22, x0
   823c4:	f9400e61 	ldr	x1, [x19,#24]
   823c8:	3900003f 	strb	wzr, [x1]
   823cc:	f9400661 	ldr	x1, [x19,#8]
   823d0:	940006c2 	bl	83ed8 <strcpy>
   823d4:	f9400660 	ldr	x0, [x19,#8]
   823d8:	b4000040 	cbz	x0, 823e0 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x70>
   823dc:	97ffffc9 	bl	82300 <operator delete[](void*)>
   823e0:	f9000676 	str	x22, [x19,#8]
   823e4:	8b1402d4 	add	x20, x22, x20
   823e8:	b9001275 	str	w21, [x19,#16]
   823ec:	f9000e74 	str	x20, [x19,#24]
   823f0:	a9425bf5 	ldp	x21, x22, [sp,#32]
   823f4:	a94153f3 	ldp	x19, x20, [sp,#16]
   823f8:	a8c37bfd 	ldp	x29, x30, [sp],#48
   823fc:	d65f03c0 	ret

0000000000082400 <CString::CString()>:
   82400:	580000c1 	ldr	x1, 82418 <CString::CString()+0x18>
   82404:	f9000001 	str	x1, [x0]
   82408:	f900041f 	str	xzr, [x0,#8]
   8240c:	b900101f 	str	wzr, [x0,#16]
   82410:	d65f03c0 	ret
   82414:	d503201f 	nop
   82418:	00084eb0 	.word	0x00084eb0
   8241c:	00000000 	.word	0x00000000

0000000000082420 <CString::CString(char const*)>:
   82420:	a9be7bfd 	stp	x29, x30, [sp,#-32]!
   82424:	910003fd 	mov	x29, sp
   82428:	a90153f3 	stp	x19, x20, [sp,#16]
   8242c:	aa0003f3 	mov	x19, x0
   82430:	aa0103f4 	mov	x20, x1
   82434:	580001a1 	ldr	x1, 82468 <CString::CString(char const*)+0x48>
   82438:	aa1403e0 	mov	x0, x20
   8243c:	f9000261 	str	x1, [x19]
   82440:	94000686 	bl	83e58 <strlen>
   82444:	11000400 	add	w0, w0, #0x1
   82448:	b9001260 	str	w0, [x19,#16]
   8244c:	97ffffab 	bl	822f8 <operator new[](unsigned long)>
   82450:	f9000660 	str	x0, [x19,#8]
   82454:	aa1403e1 	mov	x1, x20
   82458:	a94153f3 	ldp	x19, x20, [sp,#16]
   8245c:	a8c27bfd 	ldp	x29, x30, [sp],#32
   82460:	1400069e 	b	83ed8 <strcpy>
   82464:	d503201f 	nop
   82468:	00084eb0 	.word	0x00084eb0
   8246c:	00000000 	.word	0x00000000

0000000000082470 <CString::operator char const*() const>:
   82470:	f9400400 	ldr	x0, [x0,#8]
   82474:	b4000040 	cbz	x0, 8247c <CString::operator char const*() const+0xc>
   82478:	d65f03c0 	ret
   8247c:	f0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   82480:	91050000 	add	x0, x0, #0x140
   82484:	d65f03c0 	ret

0000000000082488 <CString::operator=(char const*)>:
   82488:	a9be7bfd 	stp	x29, x30, [sp,#-32]!
   8248c:	910003fd 	mov	x29, sp
   82490:	a90153f3 	stp	x19, x20, [sp,#16]
   82494:	aa0003f3 	mov	x19, x0
   82498:	f9400400 	ldr	x0, [x0,#8]
   8249c:	aa0103f4 	mov	x20, x1
   824a0:	b4000040 	cbz	x0, 824a8 <CString::operator=(char const*)+0x20>
   824a4:	97ffff97 	bl	82300 <operator delete[](void*)>
   824a8:	aa1403e0 	mov	x0, x20
   824ac:	9400066b 	bl	83e58 <strlen>
   824b0:	11000400 	add	w0, w0, #0x1
   824b4:	b9001260 	str	w0, [x19,#16]
   824b8:	97ffff90 	bl	822f8 <operator new[](unsigned long)>
   824bc:	f9000660 	str	x0, [x19,#8]
   824c0:	aa1403e1 	mov	x1, x20
   824c4:	94000685 	bl	83ed8 <strcpy>
   824c8:	f9400660 	ldr	x0, [x19,#8]
   824cc:	a94153f3 	ldp	x19, x20, [sp,#16]
   824d0:	a8c27bfd 	ldp	x29, x30, [sp],#32
   824d4:	d65f03c0 	ret

00000000000824d8 <CString::GetLength() const>:
   824d8:	f9400400 	ldr	x0, [x0,#8]
   824dc:	b4000040 	cbz	x0, 824e4 <CString::GetLength() const+0xc>
   824e0:	1400065e 	b	83e58 <strlen>
   824e4:	d2800000 	mov	x0, #0x0                   	// #0
   824e8:	d65f03c0 	ret

00000000000824ec <CString::Append(char const*)>:
   824ec:	a9bd7bfd 	stp	x29, x30, [sp,#-48]!
   824f0:	52800022 	mov	w2, #0x1                   	// #1
   824f4:	910003fd 	mov	x29, sp
   824f8:	a90153f3 	stp	x19, x20, [sp,#16]
   824fc:	aa0003f3 	mov	x19, x0
   82500:	f90013f5 	str	x21, [sp,#32]
   82504:	f9400400 	ldr	x0, [x0,#8]
   82508:	aa0103f5 	mov	x21, x1
   8250c:	b9001262 	str	w2, [x19,#16]
   82510:	b40000a0 	cbz	x0, 82524 <CString::Append(char const*)+0x38>
   82514:	94000651 	bl	83e58 <strlen>
   82518:	b9401261 	ldr	w1, [x19,#16]
   8251c:	0b000020 	add	w0, w1, w0
   82520:	b9001260 	str	w0, [x19,#16]
   82524:	aa1503e0 	mov	x0, x21
   82528:	9400064c 	bl	83e58 <strlen>
   8252c:	b9401261 	ldr	w1, [x19,#16]
   82530:	0b000020 	add	w0, w1, w0
   82534:	b9001260 	str	w0, [x19,#16]
   82538:	97ffff70 	bl	822f8 <operator new[](unsigned long)>
   8253c:	aa0003f4 	mov	x20, x0
   82540:	f9400661 	ldr	x1, [x19,#8]
   82544:	b40001a1 	cbz	x1, 82578 <CString::Append(char const*)+0x8c>
   82548:	94000664 	bl	83ed8 <strcpy>
   8254c:	f9400660 	ldr	x0, [x19,#8]
   82550:	b4000040 	cbz	x0, 82558 <CString::Append(char const*)+0x6c>
   82554:	97ffff6b 	bl	82300 <operator delete[](void*)>
   82558:	aa1503e1 	mov	x1, x21
   8255c:	aa1403e0 	mov	x0, x20
   82560:	94000678 	bl	83f40 <strcat>
   82564:	f9000674 	str	x20, [x19,#8]
   82568:	f94013f5 	ldr	x21, [sp,#32]
   8256c:	a94153f3 	ldp	x19, x20, [sp,#16]
   82570:	a8c37bfd 	ldp	x29, x30, [sp],#48
   82574:	d65f03c0 	ret
   82578:	aa1503e1 	mov	x1, x21
   8257c:	3900001f 	strb	wzr, [x0]
   82580:	aa1403e0 	mov	x0, x20
   82584:	9400066f 	bl	83f40 <strcat>
   82588:	f9000674 	str	x20, [x19,#8]
   8258c:	f94013f5 	ldr	x21, [sp,#32]
   82590:	a94153f3 	ldp	x19, x20, [sp,#16]
   82594:	a8c37bfd 	ldp	x29, x30, [sp],#48
   82598:	d65f03c0 	ret

000000000008259c <CString::Compare(char const*) const>:
   8259c:	f9400400 	ldr	x0, [x0,#8]
   825a0:	14000638 	b	83e80 <strcmp>

00000000000825a4 <CString::Find(char) const>:
   825a4:	f9400403 	ldr	x3, [x0,#8]
   825a8:	53001c21 	uxtb	w1, w1
   825ac:	39400060 	ldrb	w0, [x3]
   825b0:	34000140 	cbz	w0, 825d8 <CString::Find(char) const+0x34>
   825b4:	6b01001f 	cmp	w0, w1
   825b8:	54000140 	b.eq	825e0 <CString::Find(char) const+0x3c>
   825bc:	52800000 	mov	w0, #0x0                   	// #0
   825c0:	14000002 	b	825c8 <CString::Find(char) const+0x24>
   825c4:	540000c0 	b.eq	825dc <CString::Find(char) const+0x38>
   825c8:	38401c62 	ldrb	w2, [x3,#1]!
   825cc:	11000400 	add	w0, w0, #0x1
   825d0:	6b01005f 	cmp	w2, w1
   825d4:	35ffff82 	cbnz	w2, 825c4 <CString::Find(char) const+0x20>
   825d8:	12800000 	mov	w0, #0xffffffff            	// #-1
   825dc:	d65f03c0 	ret
   825e0:	52800000 	mov	w0, #0x0                   	// #0
   825e4:	d65f03c0 	ret

00000000000825e8 <CString::PutChar(char, unsigned long)>:
   825e8:	a9bd7bfd 	stp	x29, x30, [sp,#-48]!
   825ec:	910003fd 	mov	x29, sp
   825f0:	a90153f3 	stp	x19, x20, [sp,#16]
   825f4:	f90013f5 	str	x21, [sp,#32]
   825f8:	aa0003f4 	mov	x20, x0
   825fc:	53001c35 	uxtb	w21, w1
   82600:	b50000a2 	cbnz	x2, 82614 <CString::PutChar(char, unsigned long)+0x2c>
   82604:	a94153f3 	ldp	x19, x20, [sp,#16]
   82608:	f94013f5 	ldr	x21, [sp,#32]
   8260c:	a8c37bfd 	ldp	x29, x30, [sp],#48
   82610:	d65f03c0 	ret
   82614:	aa0203e1 	mov	x1, x2
   82618:	aa0203f3 	mov	x19, x2
   8261c:	97ffff55 	bl	82370 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   82620:	d1000661 	sub	x1, x19, #0x1
   82624:	f9400e82 	ldr	x2, [x20,#24]
   82628:	d1000421 	sub	x1, x1, #0x1
   8262c:	b100043f 	cmn	x1, #0x1
   82630:	91000440 	add	x0, x2, #0x1
   82634:	f9000e80 	str	x0, [x20,#24]
   82638:	39000055 	strb	w21, [x2]
   8263c:	54ffff41 	b.ne	82624 <CString::PutChar(char, unsigned long)+0x3c>
   82640:	a94153f3 	ldp	x19, x20, [sp,#16]
   82644:	f94013f5 	ldr	x21, [sp,#32]
   82648:	a8c37bfd 	ldp	x29, x30, [sp],#48
   8264c:	d65f03c0 	ret

0000000000082650 <CString::PutString(char const*)>:
   82650:	a9bd7bfd 	stp	x29, x30, [sp,#-48]!
   82654:	910003fd 	mov	x29, sp
   82658:	a90153f3 	stp	x19, x20, [sp,#16]
   8265c:	aa0003f4 	mov	x20, x0
   82660:	aa0103e0 	mov	x0, x1
   82664:	f90013f5 	str	x21, [sp,#32]
   82668:	aa0103f5 	mov	x21, x1
   8266c:	940005fb 	bl	83e58 <strlen>
   82670:	aa0003f3 	mov	x19, x0
   82674:	b4000080 	cbz	x0, 82684 <CString::PutString(char const*)+0x34>
   82678:	aa0003e1 	mov	x1, x0
   8267c:	aa1403e0 	mov	x0, x20
   82680:	97ffff3c 	bl	82370 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   82684:	f9400e80 	ldr	x0, [x20,#24]
   82688:	aa1503e1 	mov	x1, x21
   8268c:	94000613 	bl	83ed8 <strcpy>
   82690:	f94013f5 	ldr	x21, [sp,#32]
   82694:	f9400e80 	ldr	x0, [x20,#24]
   82698:	8b130013 	add	x19, x0, x19
   8269c:	f9000e93 	str	x19, [x20,#24]
   826a0:	a94153f3 	ldp	x19, x20, [sp,#16]
   826a4:	a8c37bfd 	ldp	x29, x30, [sp],#48
   826a8:	d65f03c0 	ret

00000000000826ac <CString::ReserveSpace(unsigned long)>:
   826ac:	b4000041 	cbz	x1, 826b4 <CString::ReserveSpace(unsigned long)+0x8>
   826b0:	17ffff30 	b	82370 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   826b4:	d65f03c0 	ret

00000000000826b8 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
   826b8:	2a0203e2 	mov	w2, w2
   826bc:	d2800024 	mov	x4, #0x1                   	// #1
   826c0:	eb02003f 	cmp	x1, x2
   826c4:	54000363 	b.cc	82730 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x78>
   826c8:	9b027c84 	mul	x4, x4, x2
   826cc:	9ac40826 	udiv	x6, x1, x4
   826d0:	eb0200df 	cmp	x6, x2
   826d4:	aa0603e5 	mov	x5, x6
   826d8:	54ffff82 	b.cs	826c8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x10>
   826dc:	aa0003e8 	mov	x8, x0
   826e0:	52800409 	mov	w9, #0x20                  	// #32
   826e4:	14000004 	b	826f4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x3c>
   826e8:	aa0603e8 	mov	x8, x6
   826ec:	9ac40826 	udiv	x6, x1, x4
   826f0:	aa0603e5 	mov	x5, x6
   826f4:	f10024bf 	cmp	x5, #0x9
   826f8:	1100dca7 	add	w7, w5, #0x37
   826fc:	9b0484c1 	msub	x1, x6, x4, x1
   82700:	1100c0a5 	add	w5, w5, #0x30
   82704:	91000506 	add	x6, x8, #0x1
   82708:	54000089 	b.ls	82718 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x60>
   8270c:	6b1f007f 	cmp	w3, wzr
   82710:	1a8913e5 	csel	w5, wzr, w9, ne
   82714:	0b0700a5 	add	w5, w5, w7
   82718:	9ac20884 	udiv	x4, x4, x2
   8271c:	53001ca5 	uxtb	w5, w5
   82720:	381ff0c5 	sturb	w5, [x6,#-1]
   82724:	b5fffe24 	cbnz	x4, 826e8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x30>
   82728:	3900051f 	strb	wzr, [x8,#1]
   8272c:	d65f03c0 	ret
   82730:	aa0103e5 	mov	x5, x1
   82734:	aa0103e6 	mov	x6, x1
   82738:	17ffffe9 	b	826dc <CString::ntoa(char*, unsigned long, unsigned int, int)+0x24>

000000000008273c <CString::FormatV(char const*, std::__va_list)>:
   8273c:	a9b77bfd 	stp	x29, x30, [sp,#-144]!
   82740:	910003fd 	mov	x29, sp
   82744:	a90153f3 	stp	x19, x20, [sp,#16]
   82748:	aa0003f4 	mov	x20, x0
   8274c:	f9400400 	ldr	x0, [x0,#8]
   82750:	a9025bf5 	stp	x21, x22, [sp,#32]
   82754:	a9046bf9 	stp	x25, x26, [sp,#64]
   82758:	a90363f7 	stp	x23, x24, [sp,#48]
   8275c:	a90573fb 	stp	x27, x28, [sp,#80]
   82760:	aa0103fa 	mov	x26, x1
   82764:	f9400055 	ldr	x21, [x2]
   82768:	f9400459 	ldr	x25, [x2,#8]
   8276c:	b9401856 	ldr	w22, [x2,#24]
   82770:	b4000040 	cbz	x0, 82778 <CString::FormatV(char const*, std::__va_list)+0x3c>
   82774:	97fffee3 	bl	82300 <operator delete[](void*)>
   82778:	52800801 	mov	w1, #0x40                  	// #64
   8277c:	d2800800 	mov	x0, #0x40                  	// #64
   82780:	b9001281 	str	w1, [x20,#16]
   82784:	d0000017 	adrp	x23, 84000 <strtok_r+0x5c>
   82788:	9138e2f7 	add	x23, x23, #0xe38
   8278c:	97fffedb 	bl	822f8 <operator new[](unsigned long)>
   82790:	d0000018 	adrp	x24, 84000 <strtok_r+0x5c>
   82794:	91397318 	add	x24, x24, #0xe5c
   82798:	f9000680 	str	x0, [x20,#8]
   8279c:	f9000e80 	str	x0, [x20,#24]
   827a0:	39400341 	ldrb	w1, [x26]
   827a4:	34000561 	cbz	w1, 82850 <CString::FormatV(char const*, std::__va_list)+0x114>
   827a8:	7100943f 	cmp	w1, #0x25
   827ac:	54000641 	b.ne	82874 <CString::FormatV(char const*, std::__va_list)+0x138>
   827b0:	39400741 	ldrb	w1, [x26,#1]
   827b4:	7100943f 	cmp	w1, #0x25
   827b8:	54000d40 	b.eq	82960 <CString::FormatV(char const*, std::__va_list)+0x224>
   827bc:	7100b43f 	cmp	w1, #0x2d
   827c0:	54000c80 	b.eq	82950 <CString::FormatV(char const*, std::__va_list)+0x214>
   827c4:	9100075a 	add	x26, x26, #0x1
   827c8:	5280001b 	mov	w27, #0x0                   	// #0
   827cc:	7100c03f 	cmp	w1, #0x30
   827d0:	5280001c 	mov	w28, #0x0                   	// #0
   827d4:	54000b60 	b.eq	82940 <CString::FormatV(char const*, std::__va_list)+0x204>
   827d8:	5100c020 	sub	w0, w1, #0x30
   827dc:	d2800013 	mov	x19, #0x0                   	// #0
   827e0:	53001c02 	uxtb	w2, w0
   827e4:	7100245f 	cmp	w2, #0x9
   827e8:	54000128 	b.hi	8280c <CString::FormatV(char const*, std::__va_list)+0xd0>
   827ec:	8b130a73 	add	x19, x19, x19, lsl #2
   827f0:	38401f41 	ldrb	w1, [x26,#1]!
   827f4:	8b130273 	add	x19, x19, x19
   827f8:	8b20c273 	add	x19, x19, w0, sxtw
   827fc:	5100c020 	sub	w0, w1, #0x30
   82800:	53001c02 	uxtb	w2, w0
   82804:	7100245f 	cmp	w2, #0x9
   82808:	54ffff29 	b.ls	827ec <CString::FormatV(char const*, std::__va_list)+0xb0>
   8280c:	7101b03f 	cmp	w1, #0x6c
   82810:	54000860 	b.eq	8291c <CString::FormatV(char const*, std::__va_list)+0x1e0>
   82814:	39400340 	ldrb	w0, [x26]
   82818:	51016001 	sub	w1, w0, #0x58
   8281c:	7100803f 	cmp	w1, #0x20
   82820:	54000349 	b.ls	82888 <CString::FormatV(char const*, std::__va_list)+0x14c>
   82824:	d2800022 	mov	x2, #0x1                   	// #1
   82828:	528004a1 	mov	w1, #0x25                  	// #37
   8282c:	aa1403e0 	mov	x0, x20
   82830:	97ffff6e 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82834:	39400341 	ldrb	w1, [x26]
   82838:	d2800022 	mov	x2, #0x1                   	// #1
   8283c:	aa1403e0 	mov	x0, x20
   82840:	97ffff6a 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82844:	9100075a 	add	x26, x26, #0x1
   82848:	39400341 	ldrb	w1, [x26]
   8284c:	35fffae1 	cbnz	w1, 827a8 <CString::FormatV(char const*, std::__va_list)+0x6c>
   82850:	f9400e80 	ldr	x0, [x20,#24]
   82854:	3900001f 	strb	wzr, [x0]
   82858:	a94153f3 	ldp	x19, x20, [sp,#16]
   8285c:	a9425bf5 	ldp	x21, x22, [sp,#32]
   82860:	a94363f7 	ldp	x23, x24, [sp,#48]
   82864:	a9446bf9 	ldp	x25, x26, [sp,#64]
   82868:	a94573fb 	ldp	x27, x28, [sp,#80]
   8286c:	a8c97bfd 	ldp	x29, x30, [sp],#144
   82870:	d65f03c0 	ret
   82874:	d2800022 	mov	x2, #0x1                   	// #1
   82878:	aa1403e0 	mov	x0, x20
   8287c:	9100075a 	add	x26, x26, #0x1
   82880:	97ffff5a 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82884:	17fffff1 	b	82848 <CString::FormatV(char const*, std::__va_list)+0x10c>
   82888:	38614ae1 	ldrb	w1, [x23,w1,uxtw]
   8288c:	10000062 	adr	x2, 82898 <CString::FormatV(char const*, std::__va_list)+0x15c>
   82890:	8b218841 	add	x1, x2, w1, sxtb #2
   82894:	d61f0020 	br	x1
   82898:	37f818b6 	tbnz	w22, #31, 82bac <CString::FormatV(char const*, std::__va_list)+0x470>
   8289c:	91003ea1 	add	x1, x21, #0xf
   828a0:	aa1503e0 	mov	x0, x21
   828a4:	927df035 	and	x21, x1, #0xfffffffffffffff8
   828a8:	f940001c 	ldr	x28, [x0]
   828ac:	aa1c03e0 	mov	x0, x28
   828b0:	9400056a 	bl	83e58 <strlen>
   828b4:	3500155b 	cbnz	w27, 82b5c <CString::FormatV(char const*, std::__va_list)+0x420>
   828b8:	eb00027f 	cmp	x19, x0
   828bc:	54001a08 	b.hi	82bfc <CString::FormatV(char const*, std::__va_list)+0x4c0>
   828c0:	aa1c03e1 	mov	x1, x28
   828c4:	aa1403e0 	mov	x0, x20
   828c8:	9100075a 	add	x26, x26, #0x1
   828cc:	97ffff61 	bl	82650 <CString::PutString(char const*)>
   828d0:	17ffffde 	b	82848 <CString::FormatV(char const*, std::__va_list)+0x10c>
   828d4:	37f81636 	tbnz	w22, #31, 82b98 <CString::FormatV(char const*, std::__va_list)+0x45c>
   828d8:	91002ea1 	add	x1, x21, #0xb
   828dc:	aa1503e0 	mov	x0, x21
   828e0:	927df035 	and	x21, x1, #0xfffffffffffffff8
   828e4:	3940001c 	ldrb	w28, [x0]
   828e8:	3500141b 	cbnz	w27, 82b68 <CString::FormatV(char const*, std::__va_list)+0x42c>
   828ec:	f100067f 	cmp	x19, #0x1
   828f0:	540000a9 	b.ls	82904 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   828f4:	d1000662 	sub	x2, x19, #0x1
   828f8:	52800401 	mov	w1, #0x20                  	// #32
   828fc:	aa1403e0 	mov	x0, x20
   82900:	97ffff3a 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82904:	d2800022 	mov	x2, #0x1                   	// #1
   82908:	2a1c03e1 	mov	w1, w28
   8290c:	aa1403e0 	mov	x0, x20
   82910:	9100075a 	add	x26, x26, #0x1
   82914:	97ffff35 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82918:	17ffffcc 	b	82848 <CString::FormatV(char const*, std::__va_list)+0x10c>
   8291c:	39400740 	ldrb	w0, [x26,#1]
   82920:	9100075a 	add	x26, x26, #0x1
   82924:	51016001 	sub	w1, w0, #0x58
   82928:	7100803f 	cmp	w1, #0x20
   8292c:	54fff7c8 	b.hi	82824 <CString::FormatV(char const*, std::__va_list)+0xe8>
   82930:	78615b01 	ldrh	w1, [x24,w1,uxtw #1]
   82934:	10000062 	adr	x2, 82940 <CString::FormatV(char const*, std::__va_list)+0x204>
   82938:	8b21a841 	add	x1, x2, w1, sxth #2
   8293c:	d61f0020 	br	x1
   82940:	39400741 	ldrb	w1, [x26,#1]
   82944:	5280003c 	mov	w28, #0x1                   	// #1
   82948:	9100075a 	add	x26, x26, #0x1
   8294c:	17ffffa3 	b	827d8 <CString::FormatV(char const*, std::__va_list)+0x9c>
   82950:	39400b41 	ldrb	w1, [x26,#2]
   82954:	5280003b 	mov	w27, #0x1                   	// #1
   82958:	91000b5a 	add	x26, x26, #0x2
   8295c:	17ffff9c 	b	827cc <CString::FormatV(char const*, std::__va_list)+0x90>
   82960:	d2800022 	mov	x2, #0x1                   	// #1
   82964:	aa1403e0 	mov	x0, x20
   82968:	91000b5a 	add	x26, x26, #0x2
   8296c:	97ffff1f 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82970:	17ffff8c 	b	827a0 <CString::FormatV(char const*, std::__va_list)+0x64>
   82974:	52800001 	mov	w1, #0x0                   	// #0
   82978:	52800ea0 	mov	w0, #0x75                  	// #117
   8297c:	52800142 	mov	w2, #0xa                   	// #10
   82980:	340003a1 	cbz	w1, 829f4 <CString::FormatV(char const*, std::__va_list)+0x2b8>
   82984:	37f80d96 	tbnz	w22, #31, 82b34 <CString::FormatV(char const*, std::__va_list)+0x3f8>
   82988:	91003ea3 	add	x3, x21, #0xf
   8298c:	aa1503e1 	mov	x1, x21
   82990:	927df075 	and	x21, x3, #0xfffffffffffffff8
   82994:	7101601f 	cmp	w0, #0x58
   82998:	f9400021 	ldr	x1, [x1]
   8299c:	1a9f17e3 	cset	w3, eq
   829a0:	9101e3a0 	add	x0, x29, #0x78
   829a4:	97ffff45 	bl	826b8 <CString::ntoa(char*, unsigned long, unsigned int, int)>
   829a8:	9101e3a0 	add	x0, x29, #0x78
   829ac:	9400052b 	bl	83e58 <strlen>
   829b0:	350003bb 	cbnz	w27, 82a24 <CString::FormatV(char const*, std::__va_list)+0x2e8>
   829b4:	eb00027f 	cmp	x19, x0
   829b8:	54000109 	b.ls	829d8 <CString::FormatV(char const*, std::__va_list)+0x29c>
   829bc:	6b1f039f 	cmp	w28, wzr
   829c0:	cb000262 	sub	x2, x19, x0
   829c4:	52800601 	mov	w1, #0x30                  	// #48
   829c8:	52800400 	mov	w0, #0x20                  	// #32
   829cc:	1a801021 	csel	w1, w1, w0, ne
   829d0:	aa1403e0 	mov	x0, x20
   829d4:	97ffff05 	bl	825e8 <CString::PutChar(char, unsigned long)>
   829d8:	9101e3a1 	add	x1, x29, #0x78
   829dc:	aa1403e0 	mov	x0, x20
   829e0:	9100075a 	add	x26, x26, #0x1
   829e4:	97ffff1b 	bl	82650 <CString::PutString(char const*)>
   829e8:	17ffff98 	b	82848 <CString::FormatV(char const*, std::__va_list)+0x10c>
   829ec:	52800de0 	mov	w0, #0x6f                  	// #111
   829f0:	52800102 	mov	w2, #0x8                   	// #8
   829f4:	37f80ab6 	tbnz	w22, #31, 82b48 <CString::FormatV(char const*, std::__va_list)+0x40c>
   829f8:	aa1503e1 	mov	x1, x21
   829fc:	91002ea3 	add	x3, x21, #0xb
   82a00:	927df075 	and	x21, x3, #0xfffffffffffffff8
   82a04:	b9400021 	ldr	w1, [x1]
   82a08:	7101601f 	cmp	w0, #0x58
   82a0c:	9101e3a0 	add	x0, x29, #0x78
   82a10:	1a9f17e3 	cset	w3, eq
   82a14:	97ffff29 	bl	826b8 <CString::ntoa(char*, unsigned long, unsigned int, int)>
   82a18:	9101e3a0 	add	x0, x29, #0x78
   82a1c:	9400050f 	bl	83e58 <strlen>
   82a20:	34fffcbb 	cbz	w27, 829b4 <CString::FormatV(char const*, std::__va_list)+0x278>
   82a24:	f90037a0 	str	x0, [x29,#104]
   82a28:	9101e3a1 	add	x1, x29, #0x78
   82a2c:	aa1403e0 	mov	x0, x20
   82a30:	97ffff08 	bl	82650 <CString::PutString(char const*)>
   82a34:	f94037a2 	ldr	x2, [x29,#104]
   82a38:	eb02027f 	cmp	x19, x2
   82a3c:	54fff049 	b.ls	82844 <CString::FormatV(char const*, std::__va_list)+0x108>
   82a40:	cb020262 	sub	x2, x19, x2
   82a44:	52800401 	mov	w1, #0x20                  	// #32
   82a48:	aa1403e0 	mov	x0, x20
   82a4c:	9100075a 	add	x26, x26, #0x1
   82a50:	97fffee6 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82a54:	17ffff7d 	b	82848 <CString::FormatV(char const*, std::__va_list)+0x10c>
   82a58:	52800001 	mov	w1, #0x0                   	// #0
   82a5c:	52800202 	mov	w2, #0x10                  	// #16
   82a60:	35fff921 	cbnz	w1, 82984 <CString::FormatV(char const*, std::__va_list)+0x248>
   82a64:	17ffffe4 	b	829f4 <CString::FormatV(char const*, std::__va_list)+0x2b8>
   82a68:	37f80e36 	tbnz	w22, #31, 82c2c <CString::FormatV(char const*, std::__va_list)+0x4f0>
   82a6c:	aa1503e0 	mov	x0, x21
   82a70:	91002ea1 	add	x1, x21, #0xb
   82a74:	927df035 	and	x21, x1, #0xfffffffffffffff8
   82a78:	b9800001 	ldrsw	x1, [x0]
   82a7c:	b7f802c1 	tbnz	x1, #63, 82ad4 <CString::FormatV(char const*, std::__va_list)+0x398>
   82a80:	52800003 	mov	w3, #0x0                   	// #0
   82a84:	52800142 	mov	w2, #0xa                   	// #10
   82a88:	9101e3a0 	add	x0, x29, #0x78
   82a8c:	97ffff0b 	bl	826b8 <CString::ntoa(char*, unsigned long, unsigned int, int)>
   82a90:	9101e3a0 	add	x0, x29, #0x78
   82a94:	940004f1 	bl	83e58 <strlen>
   82a98:	aa0003fc 	mov	x28, x0
   82a9c:	3500037b 	cbnz	w27, 82b08 <CString::FormatV(char const*, std::__va_list)+0x3cc>
   82aa0:	eb00027f 	cmp	x19, x0
   82aa4:	54fff9a9 	b.ls	829d8 <CString::FormatV(char const*, std::__va_list)+0x29c>
   82aa8:	cb000262 	sub	x2, x19, x0
   82aac:	52800401 	mov	w1, #0x20                  	// #32
   82ab0:	aa1403e0 	mov	x0, x20
   82ab4:	97fffecd 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82ab8:	17ffffc8 	b	829d8 <CString::FormatV(char const*, std::__va_list)+0x29c>
   82abc:	37f80c36 	tbnz	w22, #31, 82c40 <CString::FormatV(char const*, std::__va_list)+0x504>
   82ac0:	aa1503e0 	mov	x0, x21
   82ac4:	91003ea1 	add	x1, x21, #0xf
   82ac8:	927df035 	and	x21, x1, #0xfffffffffffffff8
   82acc:	f9400001 	ldr	x1, [x0]
   82ad0:	b6fffd81 	tbz	x1, #63, 82a80 <CString::FormatV(char const*, std::__va_list)+0x344>
   82ad4:	cb0103e1 	neg	x1, x1
   82ad8:	52800003 	mov	w3, #0x0                   	// #0
   82adc:	52800142 	mov	w2, #0xa                   	// #10
   82ae0:	9101e3a0 	add	x0, x29, #0x78
   82ae4:	97fffef5 	bl	826b8 <CString::ntoa(char*, unsigned long, unsigned int, int)>
   82ae8:	9101e3a0 	add	x0, x29, #0x78
   82aec:	940004db 	bl	83e58 <strlen>
   82af0:	9100041c 	add	x28, x0, #0x1
   82af4:	340008fb 	cbz	w27, 82c10 <CString::FormatV(char const*, std::__va_list)+0x4d4>
   82af8:	d2800022 	mov	x2, #0x1                   	// #1
   82afc:	528005a1 	mov	w1, #0x2d                  	// #45
   82b00:	aa1403e0 	mov	x0, x20
   82b04:	97fffeb9 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82b08:	9101e3a1 	add	x1, x29, #0x78
   82b0c:	aa1403e0 	mov	x0, x20
   82b10:	97fffed0 	bl	82650 <CString::PutString(char const*)>
   82b14:	eb1c027f 	cmp	x19, x28
   82b18:	54ffe969 	b.ls	82844 <CString::FormatV(char const*, std::__va_list)+0x108>
   82b1c:	cb1c0262 	sub	x2, x19, x28
   82b20:	52800401 	mov	w1, #0x20                  	// #32
   82b24:	aa1403e0 	mov	x0, x20
   82b28:	9100075a 	add	x26, x26, #0x1
   82b2c:	97fffeaf 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82b30:	17ffff46 	b	82848 <CString::FormatV(char const*, std::__va_list)+0x10c>
   82b34:	110022c3 	add	w3, w22, #0x8
   82b38:	6b1f007f 	cmp	w3, wzr
   82b3c:	5400052d 	b.le	82be0 <CString::FormatV(char const*, std::__va_list)+0x4a4>
   82b40:	2a0303f6 	mov	w22, w3
   82b44:	17ffff91 	b	82988 <CString::FormatV(char const*, std::__va_list)+0x24c>
   82b48:	110022c3 	add	w3, w22, #0x8
   82b4c:	6b1f007f 	cmp	w3, wzr
   82b50:	540004ed 	b.le	82bec <CString::FormatV(char const*, std::__va_list)+0x4b0>
   82b54:	2a0303f6 	mov	w22, w3
   82b58:	17ffffa8 	b	829f8 <CString::FormatV(char const*, std::__va_list)+0x2bc>
   82b5c:	f90037a0 	str	x0, [x29,#104]
   82b60:	aa1c03e1 	mov	x1, x28
   82b64:	17ffffb2 	b	82a2c <CString::FormatV(char const*, std::__va_list)+0x2f0>
   82b68:	2a1c03e1 	mov	w1, w28
   82b6c:	d2800022 	mov	x2, #0x1                   	// #1
   82b70:	aa1403e0 	mov	x0, x20
   82b74:	97fffe9d 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82b78:	f100067f 	cmp	x19, #0x1
   82b7c:	54ffe649 	b.ls	82844 <CString::FormatV(char const*, std::__va_list)+0x108>
   82b80:	d1000662 	sub	x2, x19, #0x1
   82b84:	52800401 	mov	w1, #0x20                  	// #32
   82b88:	aa1403e0 	mov	x0, x20
   82b8c:	9100075a 	add	x26, x26, #0x1
   82b90:	97fffe96 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82b94:	17ffff2d 	b	82848 <CString::FormatV(char const*, std::__va_list)+0x10c>
   82b98:	110022c1 	add	w1, w22, #0x8
   82b9c:	6b1f003f 	cmp	w1, wzr
   82ba0:	540005ad 	b.le	82c54 <CString::FormatV(char const*, std::__va_list)+0x518>
   82ba4:	2a0103f6 	mov	w22, w1
   82ba8:	17ffff4c 	b	828d8 <CString::FormatV(char const*, std::__va_list)+0x19c>
   82bac:	110022c1 	add	w1, w22, #0x8
   82bb0:	6b1f003f 	cmp	w1, wzr
   82bb4:	5400056d 	b.le	82c60 <CString::FormatV(char const*, std::__va_list)+0x524>
   82bb8:	2a0103f6 	mov	w22, w1
   82bbc:	17ffff38 	b	8289c <CString::FormatV(char const*, std::__va_list)+0x160>
   82bc0:	52800021 	mov	w1, #0x1                   	// #1
   82bc4:	17ffff6d 	b	82978 <CString::FormatV(char const*, std::__va_list)+0x23c>
   82bc8:	52800021 	mov	w1, #0x1                   	// #1
   82bcc:	52800202 	mov	w2, #0x10                  	// #16
   82bd0:	17ffffa4 	b	82a60 <CString::FormatV(char const*, std::__va_list)+0x324>
   82bd4:	52800de0 	mov	w0, #0x6f                  	// #111
   82bd8:	52800102 	mov	w2, #0x8                   	// #8
   82bdc:	17ffff6a 	b	82984 <CString::FormatV(char const*, std::__va_list)+0x248>
   82be0:	8b36c321 	add	x1, x25, w22, sxtw
   82be4:	2a0303f6 	mov	w22, w3
   82be8:	17ffff6b 	b	82994 <CString::FormatV(char const*, std::__va_list)+0x258>
   82bec:	8b36c321 	add	x1, x25, w22, sxtw
   82bf0:	2a0303f6 	mov	w22, w3
   82bf4:	b9400021 	ldr	w1, [x1]
   82bf8:	17ffff84 	b	82a08 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   82bfc:	cb000262 	sub	x2, x19, x0
   82c00:	52800401 	mov	w1, #0x20                  	// #32
   82c04:	aa1403e0 	mov	x0, x20
   82c08:	97fffe78 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82c0c:	17ffff2d 	b	828c0 <CString::FormatV(char const*, std::__va_list)+0x184>
   82c10:	eb1c027f 	cmp	x19, x28
   82c14:	540002c8 	b.hi	82c6c <CString::FormatV(char const*, std::__va_list)+0x530>
   82c18:	d2800022 	mov	x2, #0x1                   	// #1
   82c1c:	528005a1 	mov	w1, #0x2d                  	// #45
   82c20:	aa1403e0 	mov	x0, x20
   82c24:	97fffe71 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82c28:	17ffff6c 	b	829d8 <CString::FormatV(char const*, std::__va_list)+0x29c>
   82c2c:	110022c1 	add	w1, w22, #0x8
   82c30:	6b1f003f 	cmp	w1, wzr
   82c34:	540002ed 	b.le	82c90 <CString::FormatV(char const*, std::__va_list)+0x554>
   82c38:	2a0103f6 	mov	w22, w1
   82c3c:	17ffff8c 	b	82a6c <CString::FormatV(char const*, std::__va_list)+0x330>
   82c40:	110022c1 	add	w1, w22, #0x8
   82c44:	6b1f003f 	cmp	w1, wzr
   82c48:	540001cd 	b.le	82c80 <CString::FormatV(char const*, std::__va_list)+0x544>
   82c4c:	2a0103f6 	mov	w22, w1
   82c50:	17ffff9c 	b	82ac0 <CString::FormatV(char const*, std::__va_list)+0x384>
   82c54:	8b36c320 	add	x0, x25, w22, sxtw
   82c58:	2a0103f6 	mov	w22, w1
   82c5c:	17ffff22 	b	828e4 <CString::FormatV(char const*, std::__va_list)+0x1a8>
   82c60:	8b36c320 	add	x0, x25, w22, sxtw
   82c64:	2a0103f6 	mov	w22, w1
   82c68:	17ffff10 	b	828a8 <CString::FormatV(char const*, std::__va_list)+0x16c>
   82c6c:	cb1c0262 	sub	x2, x19, x28
   82c70:	52800401 	mov	w1, #0x20                  	// #32
   82c74:	aa1403e0 	mov	x0, x20
   82c78:	97fffe5c 	bl	825e8 <CString::PutChar(char, unsigned long)>
   82c7c:	17ffffe7 	b	82c18 <CString::FormatV(char const*, std::__va_list)+0x4dc>
   82c80:	8b36c320 	add	x0, x25, w22, sxtw
   82c84:	2a0103f6 	mov	w22, w1
   82c88:	f9400001 	ldr	x1, [x0]
   82c8c:	17ffff91 	b	82ad0 <CString::FormatV(char const*, std::__va_list)+0x394>
   82c90:	8b36c320 	add	x0, x25, w22, sxtw
   82c94:	2a0103f6 	mov	w22, w1
   82c98:	b9800001 	ldrsw	x1, [x0]
   82c9c:	17ffff78 	b	82a7c <CString::FormatV(char const*, std::__va_list)+0x340>

0000000000082ca0 <CString::Format(char const*, ...)>:
   82ca0:	a9b07bfd 	stp	x29, x30, [sp,#-256]!
   82ca4:	910003fd 	mov	x29, sp
   82ca8:	910403a8 	add	x8, x29, #0x100
   82cac:	910343a9 	add	x9, x29, #0xd0
   82cb0:	3d8017a0 	str	q0, [x29,#80]
   82cb4:	f9001ba8 	str	x8, [x29,#48]
   82cb8:	f9001fa8 	str	x8, [x29,#56]
   82cbc:	128005e8 	mov	w8, #0xffffffd0            	// #-48
   82cc0:	f90023a9 	str	x9, [x29,#64]
   82cc4:	b9004ba8 	str	w8, [x29,#72]
   82cc8:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   82ccc:	b9004fa8 	str	w8, [x29,#76]
   82cd0:	a9432faa 	ldp	x10, x11, [x29,#48]
   82cd4:	a94427a8 	ldp	x8, x9, [x29,#64]
   82cd8:	f9006ba2 	str	x2, [x29,#208]
   82cdc:	910043a2 	add	x2, x29, #0x10
   82ce0:	f9006fa3 	str	x3, [x29,#216]
   82ce4:	f90073a4 	str	x4, [x29,#224]
   82ce8:	f90077a5 	str	x5, [x29,#232]
   82cec:	f9007ba6 	str	x6, [x29,#240]
   82cf0:	3d801ba1 	str	q1, [x29,#96]
   82cf4:	f9007fa7 	str	x7, [x29,#248]
   82cf8:	3d801fa2 	str	q2, [x29,#112]
   82cfc:	3d8023a3 	str	q3, [x29,#128]
   82d00:	3d8027a4 	str	q4, [x29,#144]
   82d04:	3d802ba5 	str	q5, [x29,#160]
   82d08:	3d802fa6 	str	q6, [x29,#176]
   82d0c:	3d8033a7 	str	q7, [x29,#192]
   82d10:	a9012faa 	stp	x10, x11, [x29,#16]
   82d14:	a90227a8 	stp	x8, x9, [x29,#32]
   82d18:	97fffe89 	bl	8273c <CString::FormatV(char const*, std::__va_list)>
   82d1c:	a8d07bfd 	ldp	x29, x30, [sp],#256
   82d20:	d65f03c0 	ret
   82d24:	d503201f 	nop

0000000000082d28 <EnterCritical>:
   82d28:	d53b4220 	mrs	x0, daif
   82d2c:	d50342df 	msr	daifset, #0x2
   82d30:	f0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   82d34:	9113a024 	add	x4, x1, #0x4e8
   82d38:	b944e822 	ldr	w2, [x1,#1256]
   82d3c:	11000443 	add	w3, w2, #0x1
   82d40:	b904e823 	str	w3, [x1,#1256]
   82d44:	350000a2 	cbnz	w2, 82d58 <EnterCritical+0x30>
   82d48:	d347fc00 	lsr	x0, x0, #7
   82d4c:	d2400000 	eor	x0, x0, #0x1
   82d50:	12000000 	and	w0, w0, #0x1
   82d54:	b9000480 	str	w0, [x4,#4]
   82d58:	d65f03c0 	ret

0000000000082d5c <LeaveCritical>:
   82d5c:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
   82d60:	f0000013 	adrp	x19, 85000 <FromTimer+0xe8>
   82d64:	b944ea60 	ldr	w0, [x19,#1256]
   82d68:	34000160 	cbz	w0, 82d94 <LeaveCritical+0x38>
   82d6c:	b944ea60 	ldr	w0, [x19,#1256]
   82d70:	9113a261 	add	x1, x19, #0x4e8
   82d74:	51000400 	sub	w0, w0, #0x1
   82d78:	b904ea60 	str	w0, [x19,#1256]
   82d7c:	35000080 	cbnz	w0, 82d8c <LeaveCritical+0x30>
   82d80:	b9400420 	ldr	w0, [x1,#4]
   82d84:	34000040 	cbz	w0, 82d8c <LeaveCritical+0x30>
   82d88:	d50342ff 	msr	daifclr, #0x2
   82d8c:	a8c17bf3 	ldp	x19, x30, [sp],#16
   82d90:	d65f03c0 	ret
   82d94:	d0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   82d98:	d0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   82d9c:	52800a42 	mov	w2, #0x52                  	// #82
   82da0:	913b0021 	add	x1, x1, #0xec0
   82da4:	913b4000 	add	x0, x0, #0xed0
   82da8:	940005bc 	bl	84498 <assertion_failed>
   82dac:	17fffff0 	b	82d6c <LeaveCritical+0x10>

0000000000082db0 <InvalidateDataCache>:
   82db0:	52800001 	mov	w1, #0x0                   	// #0
   82db4:	531a6422 	lsl	w2, w1, #6
   82db8:	aa0203e0 	mov	x0, x2
   82dbc:	d5087642 	dc	isw, x2
   82dc0:	32020042 	orr	w2, w2, #0x40000000
   82dc4:	d5087642 	dc	isw, x2
   82dc8:	32010002 	orr	w2, w0, #0x80000000
   82dcc:	d5087642 	dc	isw, x2
   82dd0:	32020400 	orr	w0, w0, #0xc0000000
   82dd4:	d5087640 	dc	isw, x0
   82dd8:	11000421 	add	w1, w1, #0x1
   82ddc:	7102003f 	cmp	w1, #0x80
   82de0:	54fffea1 	b.ne	82db4 <InvalidateDataCache+0x4>
   82de4:	52800051 	mov	w17, #0x2                   	// #2
   82de8:	72a20011 	movk	w17, #0x1000, lsl #16
   82dec:	52800050 	mov	w16, #0x2                   	// #2
   82df0:	72a40010 	movk	w16, #0x2000, lsl #16
   82df4:	5280004f 	mov	w15, #0x2                   	// #2
   82df8:	72a6000f 	movk	w15, #0x3000, lsl #16
   82dfc:	5280004e 	mov	w14, #0x2                   	// #2
   82e00:	72a8000e 	movk	w14, #0x4000, lsl #16
   82e04:	5280004d 	mov	w13, #0x2                   	// #2
   82e08:	72aa000d 	movk	w13, #0x5000, lsl #16
   82e0c:	5280004c 	mov	w12, #0x2                   	// #2
   82e10:	72ac000c 	movk	w12, #0x6000, lsl #16
   82e14:	5280004b 	mov	w11, #0x2                   	// #2
   82e18:	72ae000b 	movk	w11, #0x7000, lsl #16
   82e1c:	5280004a 	mov	w10, #0x2                   	// #2
   82e20:	72b0000a 	movk	w10, #0x8000, lsl #16
   82e24:	52800049 	mov	w9, #0x2                   	// #2
   82e28:	72b20009 	movk	w9, #0x9000, lsl #16
   82e2c:	52800048 	mov	w8, #0x2                   	// #2
   82e30:	72b40008 	movk	w8, #0xa000, lsl #16
   82e34:	52800047 	mov	w7, #0x2                   	// #2
   82e38:	72b60007 	movk	w7, #0xb000, lsl #16
   82e3c:	52800046 	mov	w6, #0x2                   	// #2
   82e40:	72b80006 	movk	w6, #0xc000, lsl #16
   82e44:	52800045 	mov	w5, #0x2                   	// #2
   82e48:	72ba0005 	movk	w5, #0xd000, lsl #16
   82e4c:	52800044 	mov	w4, #0x2                   	// #2
   82e50:	72bc0004 	movk	w4, #0xe000, lsl #16
   82e54:	52800043 	mov	w3, #0x2                   	// #2
   82e58:	72be0003 	movk	w3, #0xf000, lsl #16
   82e5c:	52800001 	mov	w1, #0x0                   	// #0
   82e60:	531a6420 	lsl	w0, w1, #6
   82e64:	321f0002 	orr	w2, w0, #0x2
   82e68:	d5087642 	dc	isw, x2
   82e6c:	2a110002 	orr	w2, w0, w17
   82e70:	d5087642 	dc	isw, x2
   82e74:	2a100002 	orr	w2, w0, w16
   82e78:	d5087642 	dc	isw, x2
   82e7c:	2a0f0002 	orr	w2, w0, w15
   82e80:	d5087642 	dc	isw, x2
   82e84:	2a0e0002 	orr	w2, w0, w14
   82e88:	d5087642 	dc	isw, x2
   82e8c:	2a0d0002 	orr	w2, w0, w13
   82e90:	d5087642 	dc	isw, x2
   82e94:	2a0c0002 	orr	w2, w0, w12
   82e98:	d5087642 	dc	isw, x2
   82e9c:	2a0b0002 	orr	w2, w0, w11
   82ea0:	d5087642 	dc	isw, x2
   82ea4:	2a0a0002 	orr	w2, w0, w10
   82ea8:	d5087642 	dc	isw, x2
   82eac:	2a090002 	orr	w2, w0, w9
   82eb0:	d5087642 	dc	isw, x2
   82eb4:	2a080002 	orr	w2, w0, w8
   82eb8:	d5087642 	dc	isw, x2
   82ebc:	2a070002 	orr	w2, w0, w7
   82ec0:	d5087642 	dc	isw, x2
   82ec4:	2a060002 	orr	w2, w0, w6
   82ec8:	d5087642 	dc	isw, x2
   82ecc:	2a050002 	orr	w2, w0, w5
   82ed0:	d5087642 	dc	isw, x2
   82ed4:	2a040002 	orr	w2, w0, w4
   82ed8:	d5087642 	dc	isw, x2
   82edc:	2a030000 	orr	w0, w0, w3
   82ee0:	d5087640 	dc	isw, x0
   82ee4:	11000421 	add	w1, w1, #0x1
   82ee8:	7108003f 	cmp	w1, #0x200
   82eec:	54fffba1 	b.ne	82e60 <InvalidateDataCache+0xb0>
   82ef0:	d65f03c0 	ret

0000000000082ef4 <InvalidateDataCacheL1Only>:
   82ef4:	52800001 	mov	w1, #0x0                   	// #0
   82ef8:	531a6422 	lsl	w2, w1, #6
   82efc:	aa0203e0 	mov	x0, x2
   82f00:	d5087642 	dc	isw, x2
   82f04:	32020042 	orr	w2, w2, #0x40000000
   82f08:	d5087642 	dc	isw, x2
   82f0c:	32010002 	orr	w2, w0, #0x80000000
   82f10:	d5087642 	dc	isw, x2
   82f14:	32020400 	orr	w0, w0, #0xc0000000
   82f18:	d5087640 	dc	isw, x0
   82f1c:	11000421 	add	w1, w1, #0x1
   82f20:	7102003f 	cmp	w1, #0x80
   82f24:	54fffea1 	b.ne	82ef8 <InvalidateDataCacheL1Only+0x4>
   82f28:	d65f03c0 	ret

0000000000082f2c <CleanDataCache>:
   82f2c:	52800001 	mov	w1, #0x0                   	// #0
   82f30:	531a6422 	lsl	w2, w1, #6
   82f34:	aa0203e0 	mov	x0, x2
   82f38:	d5087a42 	dc	csw, x2
   82f3c:	32020042 	orr	w2, w2, #0x40000000
   82f40:	d5087a42 	dc	csw, x2
   82f44:	32010002 	orr	w2, w0, #0x80000000
   82f48:	d5087a42 	dc	csw, x2
   82f4c:	32020400 	orr	w0, w0, #0xc0000000
   82f50:	d5087a40 	dc	csw, x0
   82f54:	11000421 	add	w1, w1, #0x1
   82f58:	7102003f 	cmp	w1, #0x80
   82f5c:	54fffea1 	b.ne	82f30 <CleanDataCache+0x4>
   82f60:	52800051 	mov	w17, #0x2                   	// #2
   82f64:	72a20011 	movk	w17, #0x1000, lsl #16
   82f68:	52800050 	mov	w16, #0x2                   	// #2
   82f6c:	72a40010 	movk	w16, #0x2000, lsl #16
   82f70:	5280004f 	mov	w15, #0x2                   	// #2
   82f74:	72a6000f 	movk	w15, #0x3000, lsl #16
   82f78:	5280004e 	mov	w14, #0x2                   	// #2
   82f7c:	72a8000e 	movk	w14, #0x4000, lsl #16
   82f80:	5280004d 	mov	w13, #0x2                   	// #2
   82f84:	72aa000d 	movk	w13, #0x5000, lsl #16
   82f88:	5280004c 	mov	w12, #0x2                   	// #2
   82f8c:	72ac000c 	movk	w12, #0x6000, lsl #16
   82f90:	5280004b 	mov	w11, #0x2                   	// #2
   82f94:	72ae000b 	movk	w11, #0x7000, lsl #16
   82f98:	5280004a 	mov	w10, #0x2                   	// #2
   82f9c:	72b0000a 	movk	w10, #0x8000, lsl #16
   82fa0:	52800049 	mov	w9, #0x2                   	// #2
   82fa4:	72b20009 	movk	w9, #0x9000, lsl #16
   82fa8:	52800048 	mov	w8, #0x2                   	// #2
   82fac:	72b40008 	movk	w8, #0xa000, lsl #16
   82fb0:	52800047 	mov	w7, #0x2                   	// #2
   82fb4:	72b60007 	movk	w7, #0xb000, lsl #16
   82fb8:	52800046 	mov	w6, #0x2                   	// #2
   82fbc:	72b80006 	movk	w6, #0xc000, lsl #16
   82fc0:	52800045 	mov	w5, #0x2                   	// #2
   82fc4:	72ba0005 	movk	w5, #0xd000, lsl #16
   82fc8:	52800044 	mov	w4, #0x2                   	// #2
   82fcc:	72bc0004 	movk	w4, #0xe000, lsl #16
   82fd0:	52800043 	mov	w3, #0x2                   	// #2
   82fd4:	72be0003 	movk	w3, #0xf000, lsl #16
   82fd8:	52800001 	mov	w1, #0x0                   	// #0
   82fdc:	531a6420 	lsl	w0, w1, #6
   82fe0:	321f0002 	orr	w2, w0, #0x2
   82fe4:	d5087a42 	dc	csw, x2
   82fe8:	2a110002 	orr	w2, w0, w17
   82fec:	d5087a42 	dc	csw, x2
   82ff0:	2a100002 	orr	w2, w0, w16
   82ff4:	d5087a42 	dc	csw, x2
   82ff8:	2a0f0002 	orr	w2, w0, w15
   82ffc:	d5087a42 	dc	csw, x2
   83000:	2a0e0002 	orr	w2, w0, w14
   83004:	d5087a42 	dc	csw, x2
   83008:	2a0d0002 	orr	w2, w0, w13
   8300c:	d5087a42 	dc	csw, x2
   83010:	2a0c0002 	orr	w2, w0, w12
   83014:	d5087a42 	dc	csw, x2
   83018:	2a0b0002 	orr	w2, w0, w11
   8301c:	d5087a42 	dc	csw, x2
   83020:	2a0a0002 	orr	w2, w0, w10
   83024:	d5087a42 	dc	csw, x2
   83028:	2a090002 	orr	w2, w0, w9
   8302c:	d5087a42 	dc	csw, x2
   83030:	2a080002 	orr	w2, w0, w8
   83034:	d5087a42 	dc	csw, x2
   83038:	2a070002 	orr	w2, w0, w7
   8303c:	d5087a42 	dc	csw, x2
   83040:	2a060002 	orr	w2, w0, w6
   83044:	d5087a42 	dc	csw, x2
   83048:	2a050002 	orr	w2, w0, w5
   8304c:	d5087a42 	dc	csw, x2
   83050:	2a040002 	orr	w2, w0, w4
   83054:	d5087a42 	dc	csw, x2
   83058:	2a030000 	orr	w0, w0, w3
   8305c:	d5087a40 	dc	csw, x0
   83060:	11000421 	add	w1, w1, #0x1
   83064:	7108003f 	cmp	w1, #0x200
   83068:	54fffba1 	b.ne	82fdc <CleanDataCache+0xb0>
   8306c:	d65f03c0 	ret

0000000000083070 <InvalidateDataCacheRange>:
   83070:	d5087620 	dc	ivac, x0
   83074:	91010022 	add	x2, x1, #0x40
   83078:	f100fc5f 	cmp	x2, #0x3f
   8307c:	54000109 	b.ls	8309c <InvalidateDataCacheRange+0x2c>
   83080:	91010000 	add	x0, x0, #0x40
   83084:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   83088:	8b010001 	add	x1, x0, x1
   8308c:	d5087620 	dc	ivac, x0
   83090:	eb01001f 	cmp	x0, x1
   83094:	91010000 	add	x0, x0, #0x40
   83098:	54ffffa1 	b.ne	8308c <InvalidateDataCacheRange+0x1c>
   8309c:	d65f03c0 	ret

00000000000830a0 <CleanDataCacheRange>:
   830a0:	d50b7a20 	dc	cvac, x0
   830a4:	91010022 	add	x2, x1, #0x40
   830a8:	f100fc5f 	cmp	x2, #0x3f
   830ac:	54000109 	b.ls	830cc <CleanDataCacheRange+0x2c>
   830b0:	91010000 	add	x0, x0, #0x40
   830b4:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   830b8:	8b010001 	add	x1, x0, x1
   830bc:	d50b7a20 	dc	cvac, x0
   830c0:	eb01001f 	cmp	x0, x1
   830c4:	91010000 	add	x0, x0, #0x40
   830c8:	54ffffa1 	b.ne	830bc <CleanDataCacheRange+0x1c>
   830cc:	d65f03c0 	ret

00000000000830d0 <CleanAndInvalidateDataCacheRange>:
   830d0:	d50b7e20 	dc	civac, x0
   830d4:	91010022 	add	x2, x1, #0x40
   830d8:	f100fc5f 	cmp	x2, #0x3f
   830dc:	54000109 	b.ls	830fc <CleanAndInvalidateDataCacheRange+0x2c>
   830e0:	91010000 	add	x0, x0, #0x40
   830e4:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   830e8:	8b010001 	add	x1, x0, x1
   830ec:	d50b7e20 	dc	civac, x0
   830f0:	eb01001f 	cmp	x0, x1
   830f4:	91010000 	add	x0, x0, #0x40
   830f8:	54ffffa1 	b.ne	830ec <CleanAndInvalidateDataCacheRange+0x1c>
   830fc:	d65f03c0 	ret

0000000000083100 <__cxa_atexit>:
   83100:	d65f03c0 	ret

0000000000083104 <halt>:
   83104:	d50342df 	msr	daifset, #0x2
   83108:	d5033f9f 	dsb	sy
   8310c:	d503207f 	wfi
   83110:	d503207f 	wfi
   83114:	17fffffe 	b	8310c <halt+0x8>

0000000000083118 <reboot>:
   83118:	d2800482 	mov	x2, #0x24                  	// #36
   8311c:	f2a7e202 	movk	x2, #0x3f10, lsl #16
   83120:	d2800380 	mov	x0, #0x1c                  	// #28
   83124:	f2a7e200 	movk	x0, #0x3f10, lsl #16
   83128:	52800023 	mov	w3, #0x1                   	// #1
   8312c:	72ab4003 	movk	w3, #0x5a00, lsl #16
   83130:	b9000043 	str	w3, [x2]
   83134:	52800401 	mov	w1, #0x20                  	// #32
   83138:	72ab4001 	movk	w1, #0x5a00, lsl #16
   8313c:	b9000001 	str	w1, [x0]
   83140:	14000000 	b	83140 <reboot+0x28>

0000000000083144 <sysinit>:
   83144:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   83148:	d0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   8314c:	d0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   83150:	9114e021 	add	x1, x1, #0x538
   83154:	91130000 	add	x0, x0, #0x4c0
   83158:	a9017bf5 	stp	x21, x30, [sp,#16]
   8315c:	eb01001f 	cmp	x0, x1
   83160:	54000082 	b.cs	83170 <sysinit+0x2c>
   83164:	3800141f 	strb	wzr, [x0],#1
   83168:	eb01001f 	cmp	x0, x1
   8316c:	54ffffc1 	b.ne	83164 <sysinit+0x20>
   83170:	d0000015 	adrp	x21, 85000 <FromTimer+0xe8>
   83174:	910f22b5 	add	x21, x21, #0x3c8
   83178:	d0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   8317c:	910f4000 	add	x0, x0, #0x3d0
   83180:	eb0002bf 	cmp	x21, x0
   83184:	540001a2 	b.cs	831b8 <sysinit+0x74>
   83188:	91001c00 	add	x0, x0, #0x7
   8318c:	d0000014 	adrp	x20, 85000 <FromTimer+0xe8>
   83190:	910f4294 	add	x20, x20, #0x3d0
   83194:	cb140014 	sub	x20, x0, x20
   83198:	d2800013 	mov	x19, #0x0                   	// #0
   8319c:	d343fe94 	lsr	x20, x20, #3
   831a0:	91000694 	add	x20, x20, #0x1
   831a4:	f8737aa0 	ldr	x0, [x21,x19,lsl #3]
   831a8:	91000673 	add	x19, x19, #0x1
   831ac:	d63f0000 	blr	x0
   831b0:	eb14027f 	cmp	x19, x20
   831b4:	54ffff81 	b.ne	831a4 <sysinit+0x60>
   831b8:	97fff4c6 	bl	804d0 <main>
   831bc:	7100041f 	cmp	w0, #0x1
   831c0:	54000040 	b.eq	831c8 <sysinit+0x84>
   831c4:	97ffffd0 	bl	83104 <halt>
   831c8:	97ffffd4 	bl	83118 <reboot>

00000000000831cc <CTimer::CTimer(CInterruptSystem*)>:
   831cc:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   831d0:	aa0003f3 	mov	x19, x0
   831d4:	91006000 	add	x0, x0, #0x18
   831d8:	a9017bf5 	stp	x21, x30, [sp,#16]
   831dc:	52800035 	mov	w21, #0x1                   	// #1
   831e0:	b9000a7f 	str	wzr, [x19,#8]
   831e4:	b9000e7f 	str	wzr, [x19,#12]
   831e8:	f9000261 	str	x1, [x19]
   831ec:	b9001675 	str	w21, [x19,#20]
   831f0:	b900127f 	str	wzr, [x19,#16]
   831f4:	94000553 	bl	84740 <CPtrList::CPtrList()>
   831f8:	b9002275 	str	w21, [x19,#32]
   831fc:	d0000014 	adrp	x20, 85000 <FromTimer+0xe8>
   83200:	f9427e80 	ldr	x0, [x20,#1272]
   83204:	528ae602 	mov	w2, #0x5730                	// #22320
   83208:	72a000a2 	movk	w2, #0x5, lsl #16
   8320c:	52802bc1 	mov	w1, #0x15e                 	// #350
   83210:	b9002662 	str	w2, [x19,#36]
   83214:	b9002a61 	str	w1, [x19,#40]
   83218:	b40000e0 	cbz	x0, 83234 <CTimer::CTimer(CInterruptSystem*)+0x68>
   8321c:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83220:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   83224:	52800782 	mov	w2, #0x3c                  	// #60
   83228:	913c8021 	add	x1, x1, #0xf20
   8322c:	91334000 	add	x0, x0, #0xcd0
   83230:	9400049a 	bl	84498 <assertion_failed>
   83234:	f9027e93 	str	x19, [x20,#1272]
   83238:	a9417bf5 	ldp	x21, x30, [sp,#16]
   8323c:	a8c253f3 	ldp	x19, x20, [sp],#32
   83240:	d65f03c0 	ret

0000000000083244 <CTimer::~CTimer()>:
   83244:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
   83248:	a9015bf5 	stp	x21, x22, [sp,#16]
   8324c:	a90263f7 	stp	x23, x24, [sp,#32]
   83250:	f9001bfe 	str	x30, [sp,#48]
   83254:	aa0003f5 	mov	x21, x0
   83258:	f9400000 	ldr	x0, [x0]
   8325c:	b40005a0 	cbz	x0, 83310 <CTimer::~CTimer()+0xcc>
   83260:	52800061 	mov	w1, #0x3                   	// #3
   83264:	5289a877 	mov	w23, #0x4d43                	// #19779
   83268:	72a96a97 	movk	w23, #0x4b54, lsl #16
   8326c:	97fffa65 	bl	81c00 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   83270:	b0000016 	adrp	x22, 84000 <strtok_r+0x5c>
   83274:	913c82d6 	add	x22, x22, #0xf20
   83278:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   8327c:	913d2018 	add	x24, x0, #0xf48
   83280:	910062b5 	add	x21, x21, #0x18
   83284:	14000011 	b	832c8 <CTimer::~CTimer()+0x84>
   83288:	94000556 	bl	847e0 <CPtrList::GetPtr(TPtrListElement*)>
   8328c:	aa0003f4 	mov	x20, x0
   83290:	b4000360 	cbz	x0, 832fc <CTimer::~CTimer()+0xb8>
   83294:	b9400283 	ldr	w3, [x20]
   83298:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   8329c:	52800942 	mov	w2, #0x4a                  	// #74
   832a0:	aa1603e1 	mov	x1, x22
   832a4:	6b17007f 	cmp	w3, w23
   832a8:	913d6000 	add	x0, x0, #0xf58
   832ac:	54000040 	b.eq	832b4 <CTimer::~CTimer()+0x70>
   832b0:	9400047a 	bl	84498 <assertion_failed>
   832b4:	aa1503e0 	mov	x0, x21
   832b8:	aa1303e1 	mov	x1, x19
   832bc:	940005f8 	bl	84a9c <CPtrList::Remove(TPtrListElement*)>
   832c0:	aa1403e0 	mov	x0, x20
   832c4:	97fffc0e 	bl	822fc <operator delete(void*)>
   832c8:	aa1503e0 	mov	x0, x21
   832cc:	94000528 	bl	8476c <CPtrList::GetFirst()>
   832d0:	aa0003f3 	mov	x19, x0
   832d4:	aa0003e1 	mov	x1, x0
   832d8:	aa1503e0 	mov	x0, x21
   832dc:	b5fffd73 	cbnz	x19, 83288 <CTimer::~CTimer()+0x44>
   832e0:	d0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   832e4:	f9401bfe 	ldr	x30, [sp,#48]
   832e8:	a9415bf5 	ldp	x21, x22, [sp,#16]
   832ec:	a94263f7 	ldp	x23, x24, [sp,#32]
   832f0:	a8c453f3 	ldp	x19, x20, [sp],#64
   832f4:	f9027c3f 	str	xzr, [x1,#1272]
   832f8:	14000514 	b	84748 <CPtrList::~CPtrList()>
   832fc:	52800922 	mov	w2, #0x49                  	// #73
   83300:	aa1603e1 	mov	x1, x22
   83304:	aa1803e0 	mov	x0, x24
   83308:	94000464 	bl	84498 <assertion_failed>
   8330c:	17ffffe2 	b	83294 <CTimer::~CTimer()+0x50>
   83310:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83314:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   83318:	913cc000 	add	x0, x0, #0xf30
   8331c:	52800842 	mov	w2, #0x42                  	// #66
   83320:	913c8021 	add	x1, x1, #0xf20
   83324:	9400045d 	bl	84498 <assertion_failed>
   83328:	f94002a0 	ldr	x0, [x21]
   8332c:	17ffffcd 	b	83260 <CTimer::~CTimer()+0x1c>

0000000000083330 <CTimer::SetTime(unsigned int)>:
   83330:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   83334:	f9000bfe 	str	x30, [sp,#16]
   83338:	b9401402 	ldr	w2, [x0,#20]
   8333c:	350000a2 	cbnz	w2, 83350 <CTimer::SetTime(unsigned int)+0x20>
   83340:	b9001001 	str	w1, [x0,#16]
   83344:	f9400bfe 	ldr	x30, [sp,#16]
   83348:	a8c253f3 	ldp	x19, x20, [sp],#32
   8334c:	d65f03c0 	ret
   83350:	aa0003f3 	mov	x19, x0
   83354:	2a0103f4 	mov	w20, w1
   83358:	97fffe74 	bl	82d28 <EnterCritical>
   8335c:	b9401660 	ldr	w0, [x19,#20]
   83360:	b9001274 	str	w20, [x19,#16]
   83364:	34ffff00 	cbz	w0, 83344 <CTimer::SetTime(unsigned int)+0x14>
   83368:	f9400bfe 	ldr	x30, [sp,#16]
   8336c:	a8c253f3 	ldp	x19, x20, [sp],#32
   83370:	17fffe7b 	b	82d5c <LeaveCritical>

0000000000083374 <CTimer::GetClockTicks() const>:
   83374:	d2860080 	mov	x0, #0x3004                	// #12292
   83378:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   8337c:	b9400000 	ldr	w0, [x0]
   83380:	d65f03c0 	ret

0000000000083384 <CTimer::GetTicks() const>:
   83384:	b9400800 	ldr	w0, [x0,#8]
   83388:	d65f03c0 	ret

000000000008338c <CTimer::GetUptime() const>:
   8338c:	b9400c00 	ldr	w0, [x0,#12]
   83390:	d65f03c0 	ret

0000000000083394 <CTimer::GetTime() const>:
   83394:	b9401000 	ldr	w0, [x0,#16]
   83398:	d65f03c0 	ret

000000000008339c <CTimer::GetTimeString()>:
   8339c:	a9bb53f3 	stp	x19, x20, [sp,#-80]!
   833a0:	aa0003f3 	mov	x19, x0
   833a4:	a9015bf5 	stp	x21, x22, [sp,#16]
   833a8:	a90263f7 	stp	x23, x24, [sp,#32]
   833ac:	a9036bf9 	stp	x25, x26, [sp,#48]
   833b0:	f90023fe 	str	x30, [sp,#64]
   833b4:	b9401400 	ldr	w0, [x0,#20]
   833b8:	35000f80 	cbnz	w0, 835a8 <CTimer::GetTimeString()+0x20c>
   833bc:	b9401275 	ldr	w21, [x19,#16]
   833c0:	b9400a7a 	ldr	w26, [x19,#8]
   833c4:	2a150340 	orr	w0, w26, w21
   833c8:	34001000 	cbz	w0, 835c8 <CTimer::GetTimeString()+0x22c>
   833cc:	52911136 	mov	w22, #0x8889                	// #34953
   833d0:	72b11116 	movk	w22, #0x8888, lsl #16
   833d4:	52800780 	mov	w0, #0x3c                  	// #60
   833d8:	52955573 	mov	w19, #0xaaab                	// #43691
   833dc:	72b55553 	movk	w19, #0xaaaa, lsl #16
   833e0:	9bb67eb9 	umull	x25, w21, w22
   833e4:	5290a3ea 	mov	w10, #0x851f                	// #34079
   833e8:	72aa3d6a 	movk	w10, #0x51eb, lsl #16
   833ec:	d360ff39 	lsr	x25, x25, #32
   833f0:	5280f654 	mov	w20, #0x7b2                 	// #1970
   833f4:	53057f21 	lsr	w1, w25, #5
   833f8:	52800c89 	mov	w9, #0x64                  	// #100
   833fc:	52803208 	mov	w8, #0x190                 	// #400
   83400:	52802dc7 	mov	w7, #0x16e                 	// #366
   83404:	9bb67c36 	umull	x22, w1, w22
   83408:	1b00d439 	msub	w25, w1, w0, w21
   8340c:	d360fed6 	lsr	x22, x22, #32
   83410:	52802da5 	mov	w5, #0x16d                 	// #365
   83414:	53057ed5 	lsr	w21, w22, #5
   83418:	9bb37eb3 	umull	x19, w21, w19
   8341c:	1b0086b6 	msub	w22, w21, w0, w1
   83420:	d360fe73 	lsr	x19, x19, #32
   83424:	53047e73 	lsr	w19, w19, #4
   83428:	14000003 	b	83434 <CTimer::GetTimeString()+0x98>
   8342c:	4b000273 	sub	w19, w19, w0
   83430:	11000694 	add	w20, w20, #0x1
   83434:	9baa7e80 	umull	x0, w20, w10
   83438:	12000681 	and	w1, w20, #0x3
   8343c:	d360fc00 	lsr	x0, x0, #32
   83440:	6b1f003f 	cmp	w1, wzr
   83444:	53057c01 	lsr	w1, w0, #5
   83448:	53077c00 	lsr	w0, w0, #7
   8344c:	1a9f17e2 	cset	w2, eq
   83450:	1b09d021 	msub	w1, w1, w9, w20
   83454:	1b08d000 	msub	w0, w0, w8, w20
   83458:	35000061 	cbnz	w1, 83464 <CTimer::GetTimeString()+0xc8>
   8345c:	6b1f001f 	cmp	w0, wzr
   83460:	1a9f17e2 	cset	w2, eq
   83464:	6b1f005f 	cmp	w2, wzr
   83468:	1a8510e0 	csel	w0, w7, w5, ne
   8346c:	6b00027f 	cmp	w19, w0
   83470:	54fffde2 	b.cs	8342c <CTimer::GetTimeString()+0x90>
   83474:	5290a3e0 	mov	w0, #0x851f                	// #34079
   83478:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   8347c:	52803203 	mov	w3, #0x190                 	// #400
   83480:	12000682 	and	w2, w20, #0x3
   83484:	9ba07e80 	umull	x0, w20, w0
   83488:	b0000005 	adrp	x5, 84000 <strtok_r+0x5c>
   8348c:	d367fc00 	lsr	x0, x0, #39
   83490:	1b00d060 	msub	w0, w3, w0, w20
   83494:	6b1f001f 	cmp	w0, wzr
   83498:	1a9f17e3 	cset	w3, eq
   8349c:	6b1f005f 	cmp	w2, wzr
   834a0:	1a9f17e0 	cset	w0, eq
   834a4:	6b1f003f 	cmp	w1, wzr
   834a8:	1a800063 	csel	w3, w3, w0, eq
   834ac:	d2800000 	mov	x0, #0x0                   	// #0
   834b0:	7100041f 	cmp	w0, #0x1
   834b4:	913ba0a2 	add	x2, x5, #0xee8
   834b8:	2a0003f7 	mov	w23, w0
   834bc:	54000940 	b.eq	835e4 <CTimer::GetTimeString()+0x248>
   834c0:	b8607841 	ldr	w1, [x2,x0,lsl #2]
   834c4:	6b01027f 	cmp	w19, w1
   834c8:	91000400 	add	x0, x0, #0x1
   834cc:	54000063 	b.cc	834d8 <CTimer::GetTimeString()+0x13c>
   834d0:	4b010273 	sub	w19, w19, w1
   834d4:	17fffff7 	b	834b0 <CTimer::GetTimeString()+0x114>
   834d8:	5290a3f8 	mov	w24, #0x851f                	// #34079
   834dc:	72aa3d78 	movk	w24, #0x51eb, lsl #16
   834e0:	52800c81 	mov	w1, #0x64                  	// #100
   834e4:	d2800400 	mov	x0, #0x20                  	// #32
   834e8:	9bb87f58 	umull	x24, w26, w24
   834ec:	d360ff18 	lsr	x24, x24, #32
   834f0:	53057f18 	lsr	w24, w24, #5
   834f4:	1b01eb18 	msub	w24, w24, w1, w26
   834f8:	97fffb7f 	bl	822f4 <operator new(unsigned long)>
   834fc:	aa0003fa 	mov	x26, x0
   83500:	97fffbc0 	bl	82400 <CString::CString()>
   83504:	711ede9f 	cmp	w20, #0x7b7
   83508:	54000208 	b.hi	83548 <CTimer::GetTimeString()+0x1ac>
   8350c:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83510:	2a1803e5 	mov	w5, w24
   83514:	2a1903e4 	mov	w4, w25
   83518:	2a1603e3 	mov	w3, w22
   8351c:	2a1503e2 	mov	w2, w21
   83520:	aa1a03e0 	mov	x0, x26
   83524:	913e8021 	add	x1, x1, #0xfa0
   83528:	97fffdde 	bl	82ca0 <CString::Format(char const*, ...)>
   8352c:	aa1a03e0 	mov	x0, x26
   83530:	f94023fe 	ldr	x30, [sp,#64]
   83534:	a9415bf5 	ldp	x21, x22, [sp,#16]
   83538:	a94263f7 	ldp	x23, x24, [sp,#32]
   8353c:	a9436bf9 	ldp	x25, x26, [sp,#48]
   83540:	a8c553f3 	ldp	x19, x20, [sp],#80
   83544:	d65f03c0 	ret
   83548:	52955564 	mov	w4, #0xaaab                	// #43691
   8354c:	72b55544 	movk	w4, #0xaaaa, lsl #16
   83550:	d0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   83554:	910fc000 	add	x0, x0, #0x3f0
   83558:	9ba47ea4 	umull	x4, w21, w4
   8355c:	52800308 	mov	w8, #0x18                  	// #24
   83560:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83564:	d364fc84 	lsr	x4, x4, #36
   83568:	f8775802 	ldr	x2, [x0,w23,uxtw #3]
   8356c:	2a1803e7 	mov	w7, w24
   83570:	2a1903e6 	mov	w6, w25
   83574:	1b04d504 	msub	w4, w8, w4, w21
   83578:	2a1603e5 	mov	w5, w22
   8357c:	11000663 	add	w3, w19, #0x1
   83580:	aa1a03e0 	mov	x0, x26
   83584:	913e0021 	add	x1, x1, #0xf80
   83588:	97fffdc6 	bl	82ca0 <CString::Format(char const*, ...)>
   8358c:	aa1a03e0 	mov	x0, x26
   83590:	f94023fe 	ldr	x30, [sp,#64]
   83594:	a9415bf5 	ldp	x21, x22, [sp,#16]
   83598:	a94263f7 	ldp	x23, x24, [sp,#32]
   8359c:	a9436bf9 	ldp	x25, x26, [sp,#48]
   835a0:	a8c553f3 	ldp	x19, x20, [sp],#80
   835a4:	d65f03c0 	ret
   835a8:	97fffde0 	bl	82d28 <EnterCritical>
   835ac:	b9401275 	ldr	w21, [x19,#16]
   835b0:	b9401660 	ldr	w0, [x19,#20]
   835b4:	b9400a7a 	ldr	w26, [x19,#8]
   835b8:	34fff060 	cbz	w0, 833c4 <CTimer::GetTimeString()+0x28>
   835bc:	97fffde8 	bl	82d5c <LeaveCritical>
   835c0:	2a150340 	orr	w0, w26, w21
   835c4:	35fff040 	cbnz	w0, 833cc <CTimer::GetTimeString()+0x30>
   835c8:	d2800000 	mov	x0, #0x0                   	// #0
   835cc:	f94023fe 	ldr	x30, [sp,#64]
   835d0:	a9415bf5 	ldp	x21, x22, [sp,#16]
   835d4:	a94263f7 	ldp	x23, x24, [sp,#32]
   835d8:	a9436bf9 	ldp	x25, x26, [sp,#48]
   835dc:	a8c553f3 	ldp	x19, x20, [sp],#80
   835e0:	d65f03c0 	ret
   835e4:	528003a1 	mov	w1, #0x1d                  	// #29
   835e8:	34fff6c3 	cbz	w3, 834c0 <CTimer::GetTimeString()+0x124>
   835ec:	17ffffb6 	b	834c4 <CTimer::GetTimeString()+0x128>

00000000000835f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>:
   835f0:	a9bb53f3 	stp	x19, x20, [sp,#-80]!
   835f4:	aa0203f3 	mov	x19, x2
   835f8:	aa0403f4 	mov	x20, x4
   835fc:	a9036bf9 	stp	x25, x26, [sp,#48]
   83600:	aa0003f9 	mov	x25, x0
   83604:	d2800500 	mov	x0, #0x28                  	// #40
   83608:	a9015bf5 	stp	x21, x22, [sp,#16]
   8360c:	a90263f7 	stp	x23, x24, [sp,#32]
   83610:	2a0103f5 	mov	w21, w1
   83614:	aa0303f6 	mov	x22, x3
   83618:	a9047bfb 	stp	x27, x30, [sp,#64]
   8361c:	97fffb36 	bl	822f4 <operator new(unsigned long)>
   83620:	aa0003f8 	mov	x24, x0
   83624:	b9400b20 	ldr	w0, [x25,#8]
   83628:	0b0002b5 	add	w21, w21, w0
   8362c:	b40008d3 	cbz	x19, 83744 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x154>
   83630:	b9402320 	ldr	w0, [x25,#32]
   83634:	5289a861 	mov	w1, #0x4d43                	// #19779
   83638:	72a96a81 	movk	w1, #0x4b54, lsl #16
   8363c:	b9000301 	str	w1, [x24]
   83640:	f9000713 	str	x19, [x24,#8]
   83644:	b9001315 	str	w21, [x24,#16]
   83648:	f9000f16 	str	x22, [x24,#24]
   8364c:	f9001314 	str	x20, [x24,#32]
   83650:	35000760 	cbnz	w0, 8373c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x14c>
   83654:	91006334 	add	x20, x25, #0x18
   83658:	aa1403e0 	mov	x0, x20
   8365c:	94000444 	bl	8476c <CPtrList::GetFirst()>
   83660:	aa0003f3 	mov	x19, x0
   83664:	b4000460 	cbz	x0, 836f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x100>
   83668:	b0000016 	adrp	x22, 84000 <strtok_r+0x5c>
   8366c:	913c82d6 	add	x22, x22, #0xf20
   83670:	b000001a 	adrp	x26, 84000 <strtok_r+0x5c>
   83674:	913f235a 	add	x26, x26, #0xfc8
   83678:	5289a877 	mov	w23, #0x4d43                	// #19779
   8367c:	72a96a97 	movk	w23, #0x4b54, lsl #16
   83680:	14000012 	b	836c8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xd8>
   83684:	b9400363 	ldr	w3, [x27]
   83688:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   8368c:	52801c62 	mov	w2, #0xe3                  	// #227
   83690:	aa1603e1 	mov	x1, x22
   83694:	6b17007f 	cmp	w3, w23
   83698:	913f6000 	add	x0, x0, #0xfd8
   8369c:	54000040 	b.eq	836a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xb4>
   836a0:	9400037e 	bl	84498 <assertion_failed>
   836a4:	b9401362 	ldr	w2, [x27,#16]
   836a8:	aa1303e1 	mov	x1, x19
   836ac:	aa1403e0 	mov	x0, x20
   836b0:	4b150042 	sub	w2, w2, w21
   836b4:	6b1f005f 	cmp	w2, wzr
   836b8:	5400038c 	b.gt	83728 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x138>
   836bc:	9400042e 	bl	84774 <CPtrList::GetNext(TPtrListElement*)>
   836c0:	b4000180 	cbz	x0, 836f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x100>
   836c4:	aa0003f3 	mov	x19, x0
   836c8:	aa1303e1 	mov	x1, x19
   836cc:	aa1403e0 	mov	x0, x20
   836d0:	94000444 	bl	847e0 <CPtrList::GetPtr(TPtrListElement*)>
   836d4:	aa0003fb 	mov	x27, x0
   836d8:	b5fffd60 	cbnz	x0, 83684 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x94>
   836dc:	52801c42 	mov	w2, #0xe2                  	// #226
   836e0:	aa1603e1 	mov	x1, x22
   836e4:	aa1a03e0 	mov	x0, x26
   836e8:	9400036c 	bl	84498 <assertion_failed>
   836ec:	17ffffe6 	b	83684 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x94>
   836f0:	aa1803e2 	mov	x2, x24
   836f4:	aa1303e1 	mov	x1, x19
   836f8:	aa1403e0 	mov	x0, x20
   836fc:	940004a0 	bl	8497c <CPtrList::InsertAfter(TPtrListElement*, void*)>
   83700:	b9402320 	ldr	w0, [x25,#32]
   83704:	34000040 	cbz	w0, 8370c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x11c>
   83708:	97fffd95 	bl	82d5c <LeaveCritical>
   8370c:	aa1803e0 	mov	x0, x24
   83710:	a9415bf5 	ldp	x21, x22, [sp,#16]
   83714:	a94263f7 	ldp	x23, x24, [sp,#32]
   83718:	a9436bf9 	ldp	x25, x26, [sp,#48]
   8371c:	a9447bfb 	ldp	x27, x30, [sp,#64]
   83720:	a8c553f3 	ldp	x19, x20, [sp],#80
   83724:	d65f03c0 	ret
   83728:	aa1803e2 	mov	x2, x24
   8372c:	aa1303e1 	mov	x1, x19
   83730:	aa1403e0 	mov	x0, x20
   83734:	94000446 	bl	8484c <CPtrList::InsertBefore(TPtrListElement*, void*)>
   83738:	17fffff2 	b	83700 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x110>
   8373c:	97fffd7b 	bl	82d28 <EnterCritical>
   83740:	17ffffc5 	b	83654 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x64>
   83744:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83748:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   8374c:	52801a42 	mov	w2, #0xd2                  	// #210
   83750:	913c8021 	add	x1, x1, #0xf20
   83754:	913ee000 	add	x0, x0, #0xfb8
   83758:	94000350 	bl	84498 <assertion_failed>
   8375c:	17ffffb5 	b	83630 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x40>

0000000000083760 <CTimer::CancelKernelTimer(unsigned long)>:
   83760:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
   83764:	aa0103f3 	mov	x19, x1
   83768:	aa0003f4 	mov	x20, x0
   8376c:	a9015bf5 	stp	x21, x22, [sp,#16]
   83770:	f90013fe 	str	x30, [sp,#32]
   83774:	b40004c1 	cbz	x1, 8380c <CTimer::CancelKernelTimer(unsigned long)+0xac>
   83778:	b9402280 	ldr	w0, [x20,#32]
   8377c:	35000440 	cbnz	w0, 83804 <CTimer::CancelKernelTimer(unsigned long)+0xa4>
   83780:	91006296 	add	x22, x20, #0x18
   83784:	aa1303e1 	mov	x1, x19
   83788:	aa1603e0 	mov	x0, x22
   8378c:	94000521 	bl	84c10 <CPtrList::Find(void*)>
   83790:	aa0003f5 	mov	x21, x0
   83794:	b4000240 	cbz	x0, 837dc <CTimer::CancelKernelTimer(unsigned long)+0x7c>
   83798:	b9400261 	ldr	w1, [x19]
   8379c:	5289a860 	mov	w0, #0x4d43                	// #19779
   837a0:	72a96a80 	movk	w0, #0x4b54, lsl #16
   837a4:	6b00003f 	cmp	w1, w0
   837a8:	540000e0 	b.eq	837c4 <CTimer::CancelKernelTimer(unsigned long)+0x64>
   837ac:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   837b0:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   837b4:	528020c2 	mov	w2, #0x106                 	// #262
   837b8:	913c8021 	add	x1, x1, #0xf20
   837bc:	913d6000 	add	x0, x0, #0xf58
   837c0:	94000336 	bl	84498 <assertion_failed>
   837c4:	aa1603e0 	mov	x0, x22
   837c8:	aa1503e1 	mov	x1, x21
   837cc:	940004b4 	bl	84a9c <CPtrList::Remove(TPtrListElement*)>
   837d0:	b900027f 	str	wzr, [x19]
   837d4:	aa1303e0 	mov	x0, x19
   837d8:	97fffac9 	bl	822fc <operator delete(void*)>
   837dc:	b9402280 	ldr	w0, [x20,#32]
   837e0:	350000a0 	cbnz	w0, 837f4 <CTimer::CancelKernelTimer(unsigned long)+0x94>
   837e4:	a9415bf5 	ldp	x21, x22, [sp,#16]
   837e8:	f94013fe 	ldr	x30, [sp,#32]
   837ec:	a8c353f3 	ldp	x19, x20, [sp],#48
   837f0:	d65f03c0 	ret
   837f4:	a9415bf5 	ldp	x21, x22, [sp,#16]
   837f8:	f94013fe 	ldr	x30, [sp,#32]
   837fc:	a8c353f3 	ldp	x19, x20, [sp],#48
   83800:	17fffd57 	b	82d5c <LeaveCritical>
   83804:	97fffd49 	bl	82d28 <EnterCritical>
   83808:	17ffffde 	b	83780 <CTimer::CancelKernelTimer(unsigned long)+0x20>
   8380c:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83810:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   83814:	52801fe2 	mov	w2, #0xff                  	// #255
   83818:	913c8021 	add	x1, x1, #0xf20
   8381c:	913d2000 	add	x0, x0, #0xf48
   83820:	9400031e 	bl	84498 <assertion_failed>
   83824:	17ffffd5 	b	83778 <CTimer::CancelKernelTimer(unsigned long)+0x18>

0000000000083828 <CTimer::PollKernelTimers()>:
   83828:	a9bb53f3 	stp	x19, x20, [sp,#-80]!
   8382c:	a9015bf5 	stp	x21, x22, [sp,#16]
   83830:	a90263f7 	stp	x23, x24, [sp,#32]
   83834:	a9036bf9 	stp	x25, x26, [sp,#48]
   83838:	f90023fe 	str	x30, [sp,#64]
   8383c:	aa0003f5 	mov	x21, x0
   83840:	b9402000 	ldr	w0, [x0,#32]
   83844:	35000ae0 	cbnz	w0, 839a0 <CTimer::PollKernelTimers()+0x178>
   83848:	910062b6 	add	x22, x21, #0x18
   8384c:	aa1603e0 	mov	x0, x22
   83850:	940003c7 	bl	8476c <CPtrList::GetFirst()>
   83854:	aa0003f4 	mov	x20, x0
   83858:	b4000760 	cbz	x0, 83944 <CTimer::PollKernelTimers()+0x11c>
   8385c:	aa1403e1 	mov	x1, x20
   83860:	aa1603e0 	mov	x0, x22
   83864:	b0000018 	adrp	x24, 84000 <strtok_r+0x5c>
   83868:	913c8318 	add	x24, x24, #0xf20
   8386c:	b0000019 	adrp	x25, 84000 <strtok_r+0x5c>
   83870:	913d2339 	add	x25, x25, #0xf48
   83874:	5289a877 	mov	w23, #0x4d43                	// #19779
   83878:	72a96a97 	movk	w23, #0x4b54, lsl #16
   8387c:	940003d9 	bl	847e0 <CPtrList::GetPtr(TPtrListElement*)>
   83880:	aa0003f3 	mov	x19, x0
   83884:	b4000520 	cbz	x0, 83928 <CTimer::PollKernelTimers()+0x100>
   83888:	b9400260 	ldr	w0, [x19]
   8388c:	6b17001f 	cmp	w0, w23
   83890:	540000c0 	b.eq	838a8 <CTimer::PollKernelTimers()+0x80>
   83894:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   83898:	52802382 	mov	w2, #0x11c                 	// #284
   8389c:	aa1803e1 	mov	x1, x24
   838a0:	913d6000 	add	x0, x0, #0xf58
   838a4:	940002fd 	bl	84498 <assertion_failed>
   838a8:	b9400aa1 	ldr	w1, [x21,#8]
   838ac:	b9401260 	ldr	w0, [x19,#16]
   838b0:	4b010000 	sub	w0, w0, w1
   838b4:	6b1f001f 	cmp	w0, wzr
   838b8:	5400046c 	b.gt	83944 <CTimer::PollKernelTimers()+0x11c>
   838bc:	aa1403e1 	mov	x1, x20
   838c0:	aa1603e0 	mov	x0, x22
   838c4:	940003ac 	bl	84774 <CPtrList::GetNext(TPtrListElement*)>
   838c8:	aa0003fa 	mov	x26, x0
   838cc:	aa1403e1 	mov	x1, x20
   838d0:	aa1603e0 	mov	x0, x22
   838d4:	94000472 	bl	84a9c <CPtrList::Remove(TPtrListElement*)>
   838d8:	b94022a0 	ldr	w0, [x21,#32]
   838dc:	35000440 	cbnz	w0, 83964 <CTimer::PollKernelTimers()+0x13c>
   838e0:	f9400674 	ldr	x20, [x19,#8]
   838e4:	b4000474 	cbz	x20, 83970 <CTimer::PollKernelTimers()+0x148>
   838e8:	f9401262 	ldr	x2, [x19,#32]
   838ec:	aa1303e0 	mov	x0, x19
   838f0:	f9400e61 	ldr	x1, [x19,#24]
   838f4:	d63f0280 	blr	x20
   838f8:	b900027f 	str	wzr, [x19]
   838fc:	aa1303e0 	mov	x0, x19
   83900:	97fffa7f 	bl	822fc <operator delete(void*)>
   83904:	b94022a0 	ldr	w0, [x21,#32]
   83908:	350001a0 	cbnz	w0, 8393c <CTimer::PollKernelTimers()+0x114>
   8390c:	b40001da 	cbz	x26, 83944 <CTimer::PollKernelTimers()+0x11c>
   83910:	aa1a03f4 	mov	x20, x26
   83914:	aa1603e0 	mov	x0, x22
   83918:	aa1403e1 	mov	x1, x20
   8391c:	940003b1 	bl	847e0 <CPtrList::GetPtr(TPtrListElement*)>
   83920:	aa0003f3 	mov	x19, x0
   83924:	b5fffb20 	cbnz	x0, 83888 <CTimer::PollKernelTimers()+0x60>
   83928:	52802362 	mov	w2, #0x11b                 	// #283
   8392c:	aa1803e1 	mov	x1, x24
   83930:	aa1903e0 	mov	x0, x25
   83934:	940002d9 	bl	84498 <assertion_failed>
   83938:	17ffffd4 	b	83888 <CTimer::PollKernelTimers()+0x60>
   8393c:	97fffcfb 	bl	82d28 <EnterCritical>
   83940:	b5fffe9a 	cbnz	x26, 83910 <CTimer::PollKernelTimers()+0xe8>
   83944:	b94022a0 	ldr	w0, [x21,#32]
   83948:	35000200 	cbnz	w0, 83988 <CTimer::PollKernelTimers()+0x160>
   8394c:	a9415bf5 	ldp	x21, x22, [sp,#16]
   83950:	a94263f7 	ldp	x23, x24, [sp,#32]
   83954:	a9436bf9 	ldp	x25, x26, [sp,#48]
   83958:	f94023fe 	ldr	x30, [sp,#64]
   8395c:	a8c553f3 	ldp	x19, x20, [sp],#80
   83960:	d65f03c0 	ret
   83964:	97fffcfe 	bl	82d5c <LeaveCritical>
   83968:	f9400674 	ldr	x20, [x19,#8]
   8396c:	b5fffbf4 	cbnz	x20, 838e8 <CTimer::PollKernelTimers()+0xc0>
   83970:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   83974:	52802542 	mov	w2, #0x12a                 	// #298
   83978:	913ee000 	add	x0, x0, #0xfb8
   8397c:	aa1803e1 	mov	x1, x24
   83980:	940002c6 	bl	84498 <assertion_failed>
   83984:	17ffffd9 	b	838e8 <CTimer::PollKernelTimers()+0xc0>
   83988:	a9415bf5 	ldp	x21, x22, [sp,#16]
   8398c:	a94263f7 	ldp	x23, x24, [sp,#32]
   83990:	a9436bf9 	ldp	x25, x26, [sp,#48]
   83994:	f94023fe 	ldr	x30, [sp,#64]
   83998:	a8c553f3 	ldp	x19, x20, [sp],#80
   8399c:	17fffcf0 	b	82d5c <LeaveCritical>
   839a0:	97fffce2 	bl	82d28 <EnterCritical>
   839a4:	17ffffa9 	b	83848 <CTimer::PollKernelTimers()+0x20>

00000000000839a8 <CTimer::InterruptHandler()>:
   839a8:	d2860001 	mov	x1, #0x3000                	// #12288
   839ac:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   839b0:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
   839b4:	aa0003f3 	mov	x19, x0
   839b8:	b9400020 	ldr	w0, [x1]
   839bc:	36180820 	tbz	w0, #3, 83ac0 <CTimer::InterruptHandler()+0x118>
   839c0:	d2860301 	mov	x1, #0x3018                	// #12312
   839c4:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   839c8:	d2860082 	mov	x2, #0x3004                	// #12292
   839cc:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   839d0:	b9400020 	ldr	w0, [x1]
   839d4:	11400800 	add	w0, w0, #0x2, lsl #12
   839d8:	111c4000 	add	w0, w0, #0x710
   839dc:	b9000020 	str	w0, [x1]
   839e0:	b9400043 	ldr	w3, [x2]
   839e4:	6b03001f 	cmp	w0, w3
   839e8:	540000a2 	b.cs	839fc <CTimer::InterruptHandler()+0x54>
   839ec:	b9400040 	ldr	w0, [x2]
   839f0:	11400800 	add	w0, w0, #0x2, lsl #12
   839f4:	111c4000 	add	w0, w0, #0x710
   839f8:	b9000020 	str	w0, [x1]
   839fc:	d2860000 	mov	x0, #0x3000                	// #12288
   83a00:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   83a04:	52800101 	mov	w1, #0x8                   	// #8
   83a08:	b9000001 	str	w1, [x0]
   83a0c:	b9401662 	ldr	w2, [x19,#20]
   83a10:	35000322 	cbnz	w2, 83a74 <CTimer::InterruptHandler()+0xcc>
   83a14:	b9400a61 	ldr	w1, [x19,#8]
   83a18:	5290a3e0 	mov	w0, #0x851f                	// #34079
   83a1c:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   83a20:	11000421 	add	w1, w1, #0x1
   83a24:	52800c83 	mov	w3, #0x64                  	// #100
   83a28:	b9000a61 	str	w1, [x19,#8]
   83a2c:	9ba07c20 	umull	x0, w1, w0
   83a30:	d365fc00 	lsr	x0, x0, #37
   83a34:	1b008460 	msub	w0, w3, w0, w1
   83a38:	35000100 	cbnz	w0, 83a58 <CTimer::InterruptHandler()+0xb0>
   83a3c:	b9400e60 	ldr	w0, [x19,#12]
   83a40:	11000400 	add	w0, w0, #0x1
   83a44:	b9000e60 	str	w0, [x19,#12]
   83a48:	b9401260 	ldr	w0, [x19,#16]
   83a4c:	11000400 	add	w0, w0, #0x1
   83a50:	b9001260 	str	w0, [x19,#16]
   83a54:	35000082 	cbnz	w2, 83a64 <CTimer::InterruptHandler()+0xbc>
   83a58:	aa1303e0 	mov	x0, x19
   83a5c:	a8c17bf3 	ldp	x19, x30, [sp],#16
   83a60:	17ffff72 	b	83828 <CTimer::PollKernelTimers()>
   83a64:	97fffcbe 	bl	82d5c <LeaveCritical>
   83a68:	aa1303e0 	mov	x0, x19
   83a6c:	a8c17bf3 	ldp	x19, x30, [sp],#16
   83a70:	17ffff6e 	b	83828 <CTimer::PollKernelTimers()>
   83a74:	97fffcad 	bl	82d28 <EnterCritical>
   83a78:	b9400a61 	ldr	w1, [x19,#8]
   83a7c:	5290a3e0 	mov	w0, #0x851f                	// #34079
   83a80:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   83a84:	11000421 	add	w1, w1, #0x1
   83a88:	52800c83 	mov	w3, #0x64                  	// #100
   83a8c:	b9000a61 	str	w1, [x19,#8]
   83a90:	9ba07c20 	umull	x0, w1, w0
   83a94:	b9401662 	ldr	w2, [x19,#20]
   83a98:	d365fc00 	lsr	x0, x0, #37
   83a9c:	1b008460 	msub	w0, w3, w0, w1
   83aa0:	35fffda0 	cbnz	w0, 83a54 <CTimer::InterruptHandler()+0xac>
   83aa4:	b9400e60 	ldr	w0, [x19,#12]
   83aa8:	11000400 	add	w0, w0, #0x1
   83aac:	b9000e60 	str	w0, [x19,#12]
   83ab0:	b9401260 	ldr	w0, [x19,#16]
   83ab4:	11000400 	add	w0, w0, #0x1
   83ab8:	b9001260 	str	w0, [x19,#16]
   83abc:	17ffffe6 	b	83a54 <CTimer::InterruptHandler()+0xac>
   83ac0:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83ac4:	d0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   83ac8:	52802742 	mov	w2, #0x13a                 	// #314
   83acc:	913c8021 	add	x1, x1, #0xf20
   83ad0:	91000000 	add	x0, x0, #0x0
   83ad4:	94000271 	bl	84498 <assertion_failed>
   83ad8:	17ffffba 	b	839c0 <CTimer::InterruptHandler()+0x18>

0000000000083adc <CTimer::InterruptHandler(void*)>:
   83adc:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
   83ae0:	aa0003f3 	mov	x19, x0
   83ae4:	b4000080 	cbz	x0, 83af4 <CTimer::InterruptHandler(void*)+0x18>
   83ae8:	aa1303e0 	mov	x0, x19
   83aec:	a8c17bf3 	ldp	x19, x30, [sp],#16
   83af0:	17ffffae 	b	839a8 <CTimer::InterruptHandler()>
   83af4:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83af8:	d0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   83afc:	52802b42 	mov	w2, #0x15a                 	// #346
   83b00:	913c8021 	add	x1, x1, #0xf20
   83b04:	9100a000 	add	x0, x0, #0x28
   83b08:	94000264 	bl	84498 <assertion_failed>
   83b0c:	aa1303e0 	mov	x0, x19
   83b10:	a8c17bf3 	ldp	x19, x30, [sp],#16
   83b14:	17ffffa5 	b	839a8 <CTimer::InterruptHandler()>

0000000000083b18 <CTimer::MsDelay(unsigned int)>:
   83b18:	35000041 	cbnz	w1, 83b20 <CTimer::MsDelay(unsigned int)+0x8>
   83b1c:	d65f03c0 	ret
   83b20:	b9402400 	ldr	w0, [x0,#36]
   83b24:	1b007c20 	mul	w0, w1, w0
   83b28:	140002f6 	b	84700 <DelayLoop>

0000000000083b2c <CTimer::usDelay(unsigned int)>:
   83b2c:	35000041 	cbnz	w1, 83b34 <CTimer::usDelay(unsigned int)+0x8>
   83b30:	d65f03c0 	ret
   83b34:	b9402800 	ldr	w0, [x0,#40]
   83b38:	1b007c20 	mul	w0, w1, w0
   83b3c:	140002f1 	b	84700 <DelayLoop>

0000000000083b40 <CTimer::TuneMsDelay()>:
   83b40:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   83b44:	aa0003f4 	mov	x20, x0
   83b48:	52807d00 	mov	w0, #0x3e8                 	// #1000
   83b4c:	a9017bf5 	stp	x21, x30, [sp,#16]
   83b50:	5290a3f3 	mov	w19, #0x851f                	// #34079
   83b54:	72aa3d73 	movk	w19, #0x51eb, lsl #16
   83b58:	b9402681 	ldr	w1, [x20,#36]
   83b5c:	b9400a95 	ldr	w21, [x20,#8]
   83b60:	1b007c20 	mul	w0, w1, w0
   83b64:	940002e7 	bl	84700 <DelayLoop>
   83b68:	b9400a82 	ldr	w2, [x20,#8]
   83b6c:	5284e201 	mov	w1, #0x2710                	// #10000
   83b70:	b9402680 	ldr	w0, [x20,#36]
   83b74:	4b150055 	sub	w21, w2, w21
   83b78:	5289ba62 	mov	w2, #0x4dd3                	// #19923
   83b7c:	72a20c42 	movk	w2, #0x1062, lsl #16
   83b80:	1ad50835 	udiv	w21, w1, w21
   83b84:	1b007ea0 	mul	w0, w21, w0
   83b88:	9bb37c00 	umull	x0, w0, w19
   83b8c:	d360fc00 	lsr	x0, x0, #32
   83b90:	53057c00 	lsr	w0, w0, #5
   83b94:	b9002680 	str	w0, [x20,#36]
   83b98:	1107d001 	add	w1, w0, #0x1f4
   83b9c:	9ba27c20 	umull	x0, w1, w2
   83ba0:	d366fc00 	lsr	x0, x0, #38
   83ba4:	b9002a80 	str	w0, [x20,#40]
   83ba8:	97fff8b0 	bl	81e68 <CLogger::Get()>
   83bac:	9bb37ea4 	umull	x4, w21, w19
   83bb0:	52800c85 	mov	w5, #0x64                  	// #100
   83bb4:	d0000003 	adrp	x3, 85000 <FromTimer+0xe8>
   83bb8:	d360fc84 	lsr	x4, x4, #32
   83bbc:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83bc0:	913ba021 	add	x1, x1, #0xee8
   83bc4:	53057c84 	lsr	w4, w4, #5
   83bc8:	9100e063 	add	x3, x3, #0x38
   83bcc:	52800062 	mov	w2, #0x3                   	// #3
   83bd0:	9100c021 	add	x1, x1, #0x30
   83bd4:	1b05d485 	msub	w5, w4, w5, w21
   83bd8:	a9417bf5 	ldp	x21, x30, [sp,#16]
   83bdc:	a8c253f3 	ldp	x19, x20, [sp],#32
   83be0:	17fff99c 	b	82250 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>

0000000000083be4 <CTimer::Initialize()>:
   83be4:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
   83be8:	aa0003f3 	mov	x19, x0
   83bec:	f9400000 	ldr	x0, [x0]
   83bf0:	b40002c0 	cbz	x0, 83c48 <CTimer::Initialize()+0x64>
   83bf4:	90000002 	adrp	x2, 83000 <CleanDataCache+0xd4>
   83bf8:	aa1303e3 	mov	x3, x19
   83bfc:	912b7042 	add	x2, x2, #0xadc
   83c00:	52800061 	mov	w1, #0x3                   	// #3
   83c04:	97fff7b3 	bl	81ad0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   83c08:	d2860081 	mov	x1, #0x3004                	// #12292
   83c0c:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   83c10:	52879003 	mov	w3, #0x3c80                	// #15488
   83c14:	72bfc6c3 	movk	w3, #0xfe36, lsl #16
   83c18:	d2860302 	mov	x2, #0x3018                	// #12312
   83c1c:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   83c20:	b9000023 	str	w3, [x1]
   83c24:	aa1303e0 	mov	x0, x19
   83c28:	b9400021 	ldr	w1, [x1]
   83c2c:	11400821 	add	w1, w1, #0x2, lsl #12
   83c30:	111c4021 	add	w1, w1, #0x710
   83c34:	b9000041 	str	w1, [x2]
   83c38:	97ffffc2 	bl	83b40 <CTimer::TuneMsDelay()>
   83c3c:	52800020 	mov	w0, #0x1                   	// #1
   83c40:	a8c17bf3 	ldp	x19, x30, [sp],#16
   83c44:	d65f03c0 	ret
   83c48:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83c4c:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   83c50:	913cc000 	add	x0, x0, #0xf30
   83c54:	52800ac2 	mov	w2, #0x56                  	// #86
   83c58:	913c8021 	add	x1, x1, #0xf20
   83c5c:	9400020f 	bl	84498 <assertion_failed>
   83c60:	f9400260 	ldr	x0, [x19]
   83c64:	17ffffe4 	b	83bf4 <CTimer::Initialize()+0x10>

0000000000083c68 <CTimer::SimpleMsDelay(unsigned int)>:
   83c68:	34000080 	cbz	w0, 83c78 <CTimer::SimpleMsDelay(unsigned int)+0x10>
   83c6c:	52807d01 	mov	w1, #0x3e8                 	// #1000
   83c70:	1b017c00 	mul	w0, w0, w1
   83c74:	35000040 	cbnz	w0, 83c7c <CTimer::SimpleMsDelay(unsigned int)+0x14>
   83c78:	d65f03c0 	ret
   83c7c:	d2860081 	mov	x1, #0x3004                	// #12292
   83c80:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   83c84:	aa0103e3 	mov	x3, x1
   83c88:	b9400022 	ldr	w2, [x1]
   83c8c:	b9400061 	ldr	w1, [x3]
   83c90:	4b020021 	sub	w1, w1, w2
   83c94:	6b01001f 	cmp	w0, w1
   83c98:	54ffffa8 	b.hi	83c8c <CTimer::SimpleMsDelay(unsigned int)+0x24>
   83c9c:	d65f03c0 	ret

0000000000083ca0 <CTimer::SimpleusDelay(unsigned int)>:
   83ca0:	34000120 	cbz	w0, 83cc4 <CTimer::SimpleusDelay(unsigned int)+0x24>
   83ca4:	d2860081 	mov	x1, #0x3004                	// #12292
   83ca8:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   83cac:	aa0103e3 	mov	x3, x1
   83cb0:	b9400022 	ldr	w2, [x1]
   83cb4:	b9400061 	ldr	w1, [x3]
   83cb8:	4b020021 	sub	w1, w1, w2
   83cbc:	6b01001f 	cmp	w0, w1
   83cc0:	54ffffa8 	b.hi	83cb4 <CTimer::SimpleusDelay(unsigned int)+0x14>
   83cc4:	d65f03c0 	ret

0000000000083cc8 <CTimer::IsLeapYear(unsigned int)>:
   83cc8:	5290a3e1 	mov	w1, #0x851f                	// #34079
   83ccc:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   83cd0:	52800c83 	mov	w3, #0x64                  	// #100
   83cd4:	9ba17c01 	umull	x1, w0, w1
   83cd8:	d360fc21 	lsr	x1, x1, #32
   83cdc:	53057c22 	lsr	w2, w1, #5
   83ce0:	1b038042 	msub	w2, w2, w3, w0
   83ce4:	340000a2 	cbz	w2, 83cf8 <CTimer::IsLeapYear(unsigned int)+0x30>
   83ce8:	12000400 	and	w0, w0, #0x3
   83cec:	6b1f001f 	cmp	w0, wzr
   83cf0:	1a9f17e0 	cset	w0, eq
   83cf4:	d65f03c0 	ret
   83cf8:	53077c21 	lsr	w1, w1, #7
   83cfc:	52803202 	mov	w2, #0x190                 	// #400
   83d00:	1b028020 	msub	w0, w1, w2, w0
   83d04:	6b1f001f 	cmp	w0, wzr
   83d08:	1a9f17e0 	cset	w0, eq
   83d0c:	d65f03c0 	ret

0000000000083d10 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   83d10:	7100041f 	cmp	w0, #0x1
   83d14:	540000a0 	b.eq	83d28 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
   83d18:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83d1c:	913ba021 	add	x1, x1, #0xee8
   83d20:	b8605820 	ldr	w0, [x1,w0,uxtw #2]
   83d24:	d65f03c0 	ret
   83d28:	5290a3e2 	mov	w2, #0x851f                	// #34079
   83d2c:	72aa3d62 	movk	w2, #0x51eb, lsl #16
   83d30:	52800c84 	mov	w4, #0x64                  	// #100
   83d34:	9ba27c22 	umull	x2, w1, w2
   83d38:	d360fc42 	lsr	x2, x2, #32
   83d3c:	53057c43 	lsr	w3, w2, #5
   83d40:	1b048463 	msub	w3, w3, w4, w1
   83d44:	35000123 	cbnz	w3, 83d68 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x58>
   83d48:	53077c42 	lsr	w2, w2, #7
   83d4c:	52803203 	mov	w3, #0x190                 	// #400
   83d50:	1b038441 	msub	w1, w2, w3, w1
   83d54:	6b1f003f 	cmp	w1, wzr
   83d58:	1a9f17e1 	cset	w1, eq
   83d5c:	34fffde1 	cbz	w1, 83d18 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   83d60:	528003a0 	mov	w0, #0x1d                  	// #29
   83d64:	d65f03c0 	ret
   83d68:	12000421 	and	w1, w1, #0x3
   83d6c:	6b1f003f 	cmp	w1, wzr
   83d70:	1a9f17e1 	cset	w1, eq
   83d74:	17fffffa 	b	83d5c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>

0000000000083d78 <CTimer::Get()>:
   83d78:	a9bf7bf3 	stp	x19, x30, [sp,#-16]!
   83d7c:	d0000013 	adrp	x19, 85000 <FromTimer+0xe8>
   83d80:	f9427e60 	ldr	x0, [x19,#1272]
   83d84:	b4000060 	cbz	x0, 83d90 <CTimer::Get()+0x18>
   83d88:	a8c17bf3 	ldp	x19, x30, [sp],#16
   83d8c:	d65f03c0 	ret
   83d90:	b0000001 	adrp	x1, 84000 <strtok_r+0x5c>
   83d94:	b0000000 	adrp	x0, 84000 <strtok_r+0x5c>
   83d98:	52803622 	mov	w2, #0x1b1                 	// #433
   83d9c:	913c8021 	add	x1, x1, #0xf20
   83da0:	91350000 	add	x0, x0, #0xd40
   83da4:	940001bd 	bl	84498 <assertion_failed>
   83da8:	f9427e60 	ldr	x0, [x19,#1272]
   83dac:	a8c17bf3 	ldp	x19, x30, [sp],#16
   83db0:	d65f03c0 	ret

0000000000083db4 <memset>:
   83db4:	b40000e2 	cbz	x2, 83dd0 <memset+0x1c>
   83db8:	53001c21 	uxtb	w1, w1
   83dbc:	8b020002 	add	x2, x0, x2
   83dc0:	aa0003e3 	mov	x3, x0
   83dc4:	38001461 	strb	w1, [x3],#1
   83dc8:	eb02007f 	cmp	x3, x2
   83dcc:	54ffffc1 	b.ne	83dc4 <memset+0x10>
   83dd0:	d65f03c0 	ret

0000000000083dd4 <memcpy>:
   83dd4:	d2800003 	mov	x3, #0x0                   	// #0
   83dd8:	b40000c2 	cbz	x2, 83df0 <memcpy+0x1c>
   83ddc:	38636824 	ldrb	w4, [x1,x3]
   83de0:	38236804 	strb	w4, [x0,x3]
   83de4:	91000463 	add	x3, x3, #0x1
   83de8:	eb02007f 	cmp	x3, x2
   83dec:	54ffff81 	b.ne	83ddc <memcpy+0x8>
   83df0:	d65f03c0 	ret

0000000000083df4 <memcmp>:
   83df4:	d1000445 	sub	x5, x2, #0x1
   83df8:	b4000242 	cbz	x2, 83e40 <memcmp+0x4c>
   83dfc:	39400003 	ldrb	w3, [x0]
   83e00:	39400022 	ldrb	w2, [x1]
   83e04:	6b02007f 	cmp	w3, w2
   83e08:	54000208 	b.hi	83e48 <memcmp+0x54>
   83e0c:	54000223 	b.cc	83e50 <memcmp+0x5c>
   83e10:	d2800002 	mov	x2, #0x0                   	// #0
   83e14:	14000006 	b	83e2c <memcmp+0x38>
   83e18:	39400484 	ldrb	w4, [x4,#1]
   83e1c:	39400463 	ldrb	w3, [x3,#1]
   83e20:	6b03009f 	cmp	w4, w3
   83e24:	54000128 	b.hi	83e48 <memcmp+0x54>
   83e28:	54000143 	b.cc	83e50 <memcmp+0x5c>
   83e2c:	eb05005f 	cmp	x2, x5
   83e30:	8b020004 	add	x4, x0, x2
   83e34:	8b020023 	add	x3, x1, x2
   83e38:	91000442 	add	x2, x2, #0x1
   83e3c:	54fffee1 	b.ne	83e18 <memcmp+0x24>
   83e40:	52800000 	mov	w0, #0x0                   	// #0
   83e44:	d65f03c0 	ret
   83e48:	52800020 	mov	w0, #0x1                   	// #1
   83e4c:	d65f03c0 	ret
   83e50:	12800000 	mov	w0, #0xffffffff            	// #-1
   83e54:	d65f03c0 	ret

0000000000083e58 <strlen>:
   83e58:	aa0003e2 	mov	x2, x0
   83e5c:	39400000 	ldrb	w0, [x0]
   83e60:	340000c0 	cbz	w0, 83e78 <strlen+0x20>
   83e64:	d2800000 	mov	x0, #0x0                   	// #0
   83e68:	91000400 	add	x0, x0, #0x1
   83e6c:	38606841 	ldrb	w1, [x2,x0]
   83e70:	35ffffc1 	cbnz	w1, 83e68 <strlen+0x10>
   83e74:	d65f03c0 	ret
   83e78:	d2800000 	mov	x0, #0x0                   	// #0
   83e7c:	d65f03c0 	ret

0000000000083e80 <strcmp>:
   83e80:	39400002 	ldrb	w2, [x0]
   83e84:	340001e2 	cbz	w2, 83ec0 <strcmp+0x40>
   83e88:	39400023 	ldrb	w3, [x1]
   83e8c:	34000163 	cbz	w3, 83eb8 <strcmp+0x38>
   83e90:	6b03005f 	cmp	w2, w3
   83e94:	54000128 	b.hi	83eb8 <strcmp+0x38>
   83e98:	540001c3 	b.cc	83ed0 <strcmp+0x50>
   83e9c:	38401c02 	ldrb	w2, [x0,#1]!
   83ea0:	91000421 	add	x1, x1, #0x1
   83ea4:	340000e2 	cbz	w2, 83ec0 <strcmp+0x40>
   83ea8:	39400023 	ldrb	w3, [x1]
   83eac:	6b03005f 	cmp	w2, w3
   83eb0:	34000043 	cbz	w3, 83eb8 <strcmp+0x38>
   83eb4:	54ffff29 	b.ls	83e98 <strcmp+0x18>
   83eb8:	52800020 	mov	w0, #0x1                   	// #1
   83ebc:	d65f03c0 	ret
   83ec0:	39400020 	ldrb	w0, [x1]
   83ec4:	6b1f001f 	cmp	w0, wzr
   83ec8:	5a9f03e0 	csetm	w0, ne
   83ecc:	d65f03c0 	ret
   83ed0:	12800000 	mov	w0, #0xffffffff            	// #-1
   83ed4:	d65f03c0 	ret

0000000000083ed8 <strcpy>:
   83ed8:	39400022 	ldrb	w2, [x1]
   83edc:	aa0003e3 	mov	x3, x0
   83ee0:	34000082 	cbz	w2, 83ef0 <strcpy+0x18>
   83ee4:	38001462 	strb	w2, [x3],#1
   83ee8:	38401c22 	ldrb	w2, [x1,#1]!
   83eec:	35ffffc2 	cbnz	w2, 83ee4 <strcpy+0xc>
   83ef0:	3900007f 	strb	wzr, [x3]
   83ef4:	d65f03c0 	ret

0000000000083ef8 <strncpy>:
   83ef8:	b40001c2 	cbz	x2, 83f30 <strncpy+0x38>
   83efc:	39400024 	ldrb	w4, [x1]
   83f00:	340001a4 	cbz	w4, 83f34 <strncpy+0x3c>
   83f04:	91000403 	add	x3, x0, #0x1
   83f08:	8b020002 	add	x2, x0, x2
   83f0c:	14000004 	b	83f1c <strncpy+0x24>
   83f10:	39400024 	ldrb	w4, [x1]
   83f14:	91000463 	add	x3, x3, #0x1
   83f18:	34000104 	cbz	w4, 83f38 <strncpy+0x40>
   83f1c:	381ff064 	sturb	w4, [x3,#-1]
   83f20:	eb02007f 	cmp	x3, x2
   83f24:	aa0303e5 	mov	x5, x3
   83f28:	91000421 	add	x1, x1, #0x1
   83f2c:	54ffff21 	b.ne	83f10 <strncpy+0x18>
   83f30:	d65f03c0 	ret
   83f34:	aa0003e5 	mov	x5, x0
   83f38:	390000bf 	strb	wzr, [x5]
   83f3c:	d65f03c0 	ret

0000000000083f40 <strcat>:
   83f40:	39400002 	ldrb	w2, [x0]
   83f44:	34000162 	cbz	w2, 83f70 <strcat+0x30>
   83f48:	aa0003e2 	mov	x2, x0
   83f4c:	38401c43 	ldrb	w3, [x2,#1]!
   83f50:	35ffffe3 	cbnz	w3, 83f4c <strcat+0xc>
   83f54:	39400023 	ldrb	w3, [x1]
   83f58:	34000083 	cbz	w3, 83f68 <strcat+0x28>
   83f5c:	38001443 	strb	w3, [x2],#1
   83f60:	38401c23 	ldrb	w3, [x1,#1]!
   83f64:	35ffffc3 	cbnz	w3, 83f5c <strcat+0x1c>
   83f68:	3900005f 	strb	wzr, [x2]
   83f6c:	d65f03c0 	ret
   83f70:	aa0003e2 	mov	x2, x0
   83f74:	17fffff8 	b	83f54 <strcat+0x14>

0000000000083f78 <strchr>:
   83f78:	39400002 	ldrb	w2, [x0]
   83f7c:	34000102 	cbz	w2, 83f9c <strchr+0x24>
   83f80:	6b01005f 	cmp	w2, w1
   83f84:	54000061 	b.ne	83f90 <strchr+0x18>
   83f88:	14000006 	b	83fa0 <strchr+0x28>
   83f8c:	540000a0 	b.eq	83fa0 <strchr+0x28>
   83f90:	38401c02 	ldrb	w2, [x0,#1]!
   83f94:	6b01005f 	cmp	w2, w1
   83f98:	35ffffa2 	cbnz	w2, 83f8c <strchr+0x14>
   83f9c:	d2800000 	mov	x0, #0x0                   	// #0
   83fa0:	d65f03c0 	ret

0000000000083fa4 <strtok_r>:
   83fa4:	b40004e0 	cbz	x0, 84040 <strtok_r+0x9c>
   83fa8:	39400005 	ldrb	w5, [x0]
   83fac:	340003c5 	cbz	w5, 84024 <strtok_r+0x80>
   83fb0:	39400026 	ldrb	w6, [x1]
   83fb4:	34000346 	cbz	w6, 8401c <strtok_r+0x78>
   83fb8:	6b0500df 	cmp	w6, w5
   83fbc:	540002c0 	b.eq	84014 <strtok_r+0x70>
   83fc0:	aa0103e4 	mov	x4, x1
   83fc4:	14000002 	b	83fcc <strtok_r+0x28>
   83fc8:	54000260 	b.eq	84014 <strtok_r+0x70>
   83fcc:	38401c83 	ldrb	w3, [x4,#1]!
   83fd0:	6b05007f 	cmp	w3, w5
   83fd4:	35ffffa3 	cbnz	w3, 83fc8 <strtok_r+0x24>
   83fd8:	34000265 	cbz	w5, 84024 <strtok_r+0x80>
   83fdc:	aa0003e7 	mov	x7, x0
   83fe0:	34000126 	cbz	w6, 84004 <strtok_r+0x60>
   83fe4:	6b0600bf 	cmp	w5, w6
   83fe8:	54000240 	b.eq	84030 <strtok_r+0x8c>
   83fec:	aa0103e4 	mov	x4, x1
   83ff0:	14000002 	b	83ff8 <strtok_r+0x54>
   83ff4:	540001e0 	b.eq	84030 <strtok_r+0x8c>
   83ff8:	38401c83 	ldrb	w3, [x4,#1]!
   83ffc:	6b0300bf 	cmp	w5, w3
   84000:	35ffffa3 	cbnz	w3, 83ff4 <strtok_r+0x50>
   84004:	38401ce5 	ldrb	w5, [x7,#1]!
   84008:	35fffec5 	cbnz	w5, 83fe0 <strtok_r+0x3c>
   8400c:	f9000047 	str	x7, [x2]
   84010:	d65f03c0 	ret
   84014:	38401c05 	ldrb	w5, [x0,#1]!
   84018:	35fffd06 	cbnz	w6, 83fb8 <strtok_r+0x14>
   8401c:	52800006 	mov	w6, #0x0                   	// #0
   84020:	35fffde5 	cbnz	w5, 83fdc <strtok_r+0x38>
   84024:	f900005f 	str	xzr, [x2]
   84028:	d2800000 	mov	x0, #0x0                   	// #0
   8402c:	d65f03c0 	ret
   84030:	390000ff 	strb	wzr, [x7]
   84034:	910004e7 	add	x7, x7, #0x1
   84038:	f9000047 	str	x7, [x2]
   8403c:	17fffff5 	b	84010 <strtok_r+0x6c>
   84040:	f9400040 	ldr	x0, [x2]
   84044:	b5fffb20 	cbnz	x0, 83fa8 <strtok_r+0x4>
   84048:	d2800000 	mov	x0, #0x0                   	// #0
   8404c:	d65f03c0 	ret

0000000000084050 <mem_init>:
   84050:	b0000005 	adrp	x5, 85000 <FromTimer+0xe8>
   84054:	911400a2 	add	x2, x5, #0x500
   84058:	8b010001 	add	x1, x0, x1
   8405c:	d29fffe3 	mov	x3, #0xffff                	// #65535
   84060:	f2a009e3 	movk	x3, #0x4f, lsl #16
   84064:	eb03001f 	cmp	x0, x3
   84068:	d2a00a06 	mov	x6, #0x500000              	// #5242880
   8406c:	d17fc023 	sub	x3, x1, #0xff0, lsl #12
   84070:	b2689fe4 	mov	x4, #0xffffffffff000000    	// #-16777216
   84074:	9a868000 	csel	x0, x0, x6, hi
   84078:	8b040024 	add	x4, x1, x4
   8407c:	9270bc63 	and	x3, x3, #0xffffffffffff0000
   84080:	f90280a0 	str	x0, [x5,#1280]
   84084:	f9000444 	str	x4, [x2,#8]
   84088:	f9000843 	str	x3, [x2,#16]
   8408c:	f9000c41 	str	x1, [x2,#24]
   84090:	d65f03c0 	ret

0000000000084094 <mem_get_size>:
   84094:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84098:	91140001 	add	x1, x0, #0x500
   8409c:	f9428000 	ldr	x0, [x0,#1280]
   840a0:	f9400c22 	ldr	x2, [x1,#24]
   840a4:	f9400823 	ldr	x3, [x1,#16]
   840a8:	f9400421 	ldr	x1, [x1,#8]
   840ac:	cb030042 	sub	x2, x2, x3
   840b0:	cb000020 	sub	x0, x1, x0
   840b4:	8b000040 	add	x0, x2, x0
   840b8:	d65f03c0 	ret

00000000000840bc <malloc>:
   840bc:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
   840c0:	aa0003f4 	mov	x20, x0
   840c4:	a9015bf5 	stp	x21, x22, [sp,#16]
   840c8:	b0000015 	adrp	x21, 85000 <FromTimer+0xe8>
   840cc:	f94282a1 	ldr	x1, [x21,#1280]
   840d0:	f90013fe 	str	x30, [sp,#32]
   840d4:	b4000ac1 	cbz	x1, 8422c <malloc+0x170>
   840d8:	911402a0 	add	x0, x21, #0x500
   840dc:	b9402000 	ldr	w0, [x0,#32]
   840e0:	35000a20 	cbnz	w0, 84224 <malloc+0x168>
   840e4:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   840e8:	91114013 	add	x19, x0, #0x450
   840ec:	b9445001 	ldr	w1, [x0,#1104]
   840f0:	34000141 	cbz	w1, 84118 <malloc+0x5c>
   840f4:	2a0103e1 	mov	w1, w1
   840f8:	eb01029f 	cmp	x20, x1
   840fc:	54000088 	b.hi	8410c <malloc+0x50>
   84100:	14000025 	b	84194 <malloc+0xd8>
   84104:	eb01029f 	cmp	x20, x1
   84108:	54000469 	b.ls	84194 <malloc+0xd8>
   8410c:	b8410e60 	ldr	w0, [x19,#16]!
   84110:	2a0003e1 	mov	w1, w0
   84114:	35ffff80 	cbnz	w0, 84104 <malloc+0x48>
   84118:	911402a1 	add	x1, x21, #0x500
   8411c:	f94282b6 	ldr	x22, [x21,#1280]
   84120:	91007e80 	add	x0, x20, #0x1f
   84124:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   84128:	f9400422 	ldr	x2, [x1,#8]
   8412c:	8b0002c0 	add	x0, x22, x0
   84130:	f90282a0 	str	x0, [x21,#1280]
   84134:	eb02001f 	cmp	x0, x2
   84138:	54000248 	b.hi	84180 <malloc+0xc4>
   8413c:	911402b5 	add	x21, x21, #0x500
   84140:	5289a860 	mov	w0, #0x4d43                	// #19779
   84144:	72a84980 	movk	w0, #0x424c, lsl #16
   84148:	b90002c0 	str	w0, [x22]
   8414c:	b90006d4 	str	w20, [x22,#4]
   84150:	b94022a0 	ldr	w0, [x21,#32]
   84154:	35000460 	cbnz	w0, 841e0 <malloc+0x124>
   84158:	910042c0 	add	x0, x22, #0x10
   8415c:	f90006df 	str	xzr, [x22,#8]
   84160:	92400c01 	and	x1, x0, #0xf
   84164:	aa0003f3 	mov	x19, x0
   84168:	b5000481 	cbnz	x1, 841f8 <malloc+0x13c>
   8416c:	aa1303e0 	mov	x0, x19
   84170:	f94013fe 	ldr	x30, [sp,#32]
   84174:	a9415bf5 	ldp	x21, x22, [sp,#16]
   84178:	a8c353f3 	ldp	x19, x20, [sp],#48
   8417c:	d65f03c0 	ret
   84180:	b9402020 	ldr	w0, [x1,#32]
   84184:	d2800013 	mov	x19, #0x0                   	// #0
   84188:	34ffff20 	cbz	w0, 8416c <malloc+0xb0>
   8418c:	97fffaf4 	bl	82d5c <LeaveCritical>
   84190:	17fffff7 	b	8416c <malloc+0xb0>
   84194:	f9400676 	ldr	x22, [x19,#8]
   84198:	aa0103f4 	mov	x20, x1
   8419c:	b4fffbf6 	cbz	x22, 84118 <malloc+0x5c>
   841a0:	b94002c1 	ldr	w1, [x22]
   841a4:	5289a860 	mov	w0, #0x4d43                	// #19779
   841a8:	72a84980 	movk	w0, #0x424c, lsl #16
   841ac:	6b00003f 	cmp	w1, w0
   841b0:	540000e0 	b.eq	841cc <malloc+0x110>
   841b4:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   841b8:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   841bc:	52801122 	mov	w2, #0x89                  	// #137
   841c0:	9102c021 	add	x1, x1, #0xb0
   841c4:	91036000 	add	x0, x0, #0xd8
   841c8:	940000b4 	bl	84498 <assertion_failed>
   841cc:	911402b5 	add	x21, x21, #0x500
   841d0:	f94006c0 	ldr	x0, [x22,#8]
   841d4:	f9000660 	str	x0, [x19,#8]
   841d8:	b94022a0 	ldr	w0, [x21,#32]
   841dc:	34fffbe0 	cbz	w0, 84158 <malloc+0x9c>
   841e0:	97fffadf 	bl	82d5c <LeaveCritical>
   841e4:	f90006df 	str	xzr, [x22,#8]
   841e8:	910042c0 	add	x0, x22, #0x10
   841ec:	92400c01 	and	x1, x0, #0xf
   841f0:	aa0003f3 	mov	x19, x0
   841f4:	b4fffbc1 	cbz	x1, 8416c <malloc+0xb0>
   841f8:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   841fc:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84200:	52801422 	mov	w2, #0xa1                  	// #161
   84204:	9102c021 	add	x1, x1, #0xb0
   84208:	91040000 	add	x0, x0, #0x100
   8420c:	940000a3 	bl	84498 <assertion_failed>
   84210:	aa1303e0 	mov	x0, x19
   84214:	f94013fe 	ldr	x30, [sp,#32]
   84218:	a9415bf5 	ldp	x21, x22, [sp,#16]
   8421c:	a8c353f3 	ldp	x19, x20, [sp],#48
   84220:	d65f03c0 	ret
   84224:	97fffac1 	bl	82d28 <EnterCritical>
   84228:	17ffffaf 	b	840e4 <malloc+0x28>
   8422c:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84230:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84234:	52800de2 	mov	w2, #0x6f                  	// #111
   84238:	9102c021 	add	x1, x1, #0xb0
   8423c:	91030000 	add	x0, x0, #0xc0
   84240:	94000096 	bl	84498 <assertion_failed>
   84244:	17ffffa5 	b	840d8 <malloc+0x1c>

0000000000084248 <free>:
   84248:	a9bd53f3 	stp	x19, x20, [sp,#-48]!
   8424c:	a9015bf5 	stp	x21, x22, [sp,#16]
   84250:	f90013fe 	str	x30, [sp,#32]
   84254:	b4000340 	cbz	x0, 842bc <free+0x74>
   84258:	b85f0001 	ldur	w1, [x0,#-16]
   8425c:	aa0003f4 	mov	x20, x0
   84260:	5289a860 	mov	w0, #0x4d43                	// #19779
   84264:	72a84980 	movk	w0, #0x424c, lsl #16
   84268:	6b00003f 	cmp	w1, w0
   8426c:	d1004296 	sub	x22, x20, #0x10
   84270:	540000e0 	b.eq	8428c <free+0x44>
   84274:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84278:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   8427c:	528015c2 	mov	w2, #0xae                  	// #174
   84280:	9102c021 	add	x1, x1, #0xb0
   84284:	91036000 	add	x0, x0, #0xd8
   84288:	94000084 	bl	84498 <assertion_failed>
   8428c:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84290:	91114013 	add	x19, x0, #0x450
   84294:	b9445000 	ldr	w0, [x0,#1104]
   84298:	34000120 	cbz	w0, 842bc <free+0x74>
   8429c:	b85f4282 	ldur	w2, [x20,#-12]
   842a0:	6b02001f 	cmp	w0, w2
   842a4:	54000061 	b.ne	842b0 <free+0x68>
   842a8:	14000009 	b	842cc <free+0x84>
   842ac:	54000100 	b.eq	842cc <free+0x84>
   842b0:	b8410e61 	ldr	w1, [x19,#16]!
   842b4:	6b02003f 	cmp	w1, w2
   842b8:	35ffffa1 	cbnz	w1, 842ac <free+0x64>
   842bc:	a9415bf5 	ldp	x21, x22, [sp,#16]
   842c0:	f94013fe 	ldr	x30, [sp,#32]
   842c4:	a8c353f3 	ldp	x19, x20, [sp],#48
   842c8:	d65f03c0 	ret
   842cc:	b0000015 	adrp	x21, 85000 <FromTimer+0xe8>
   842d0:	911402b5 	add	x21, x21, #0x500
   842d4:	b94022a0 	ldr	w0, [x21,#32]
   842d8:	35000100 	cbnz	w0, 842f8 <free+0xb0>
   842dc:	f9400660 	ldr	x0, [x19,#8]
   842e0:	f81f8280 	stur	x0, [x20,#-8]
   842e4:	f9000676 	str	x22, [x19,#8]
   842e8:	f94013fe 	ldr	x30, [sp,#32]
   842ec:	a9415bf5 	ldp	x21, x22, [sp,#16]
   842f0:	a8c353f3 	ldp	x19, x20, [sp],#48
   842f4:	d65f03c0 	ret
   842f8:	97fffa8c 	bl	82d28 <EnterCritical>
   842fc:	f9400660 	ldr	x0, [x19,#8]
   84300:	f81f8280 	stur	x0, [x20,#-8]
   84304:	b94022a0 	ldr	w0, [x21,#32]
   84308:	f9000676 	str	x22, [x19,#8]
   8430c:	34fffd80 	cbz	w0, 842bc <free+0x74>
   84310:	a9415bf5 	ldp	x21, x22, [sp,#16]
   84314:	f94013fe 	ldr	x30, [sp,#32]
   84318:	a8c353f3 	ldp	x19, x20, [sp],#48
   8431c:	17fffa90 	b	82d5c <LeaveCritical>

0000000000084320 <palloc>:
   84320:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   84324:	b0000014 	adrp	x20, 85000 <FromTimer+0xe8>
   84328:	91140280 	add	x0, x20, #0x500
   8432c:	f9000bfe 	str	x30, [sp,#16]
   84330:	f9400800 	ldr	x0, [x0,#16]
   84334:	b40005e0 	cbz	x0, 843f0 <palloc+0xd0>
   84338:	91140280 	add	x0, x20, #0x500
   8433c:	b9402800 	ldr	w0, [x0,#40]
   84340:	35000340 	cbnz	w0, 843a8 <palloc+0x88>
   84344:	91140280 	add	x0, x20, #0x500
   84348:	f9401813 	ldr	x19, [x0,#48]
   8434c:	b4000373 	cbz	x19, 843b8 <palloc+0x98>
   84350:	b9400261 	ldr	w1, [x19]
   84354:	5289a860 	mov	w0, #0x4d43                	// #19779
   84358:	72aa08e0 	movk	w0, #0x5047, lsl #16
   8435c:	6b00003f 	cmp	w1, w0
   84360:	540000e0 	b.eq	8437c <palloc+0x5c>
   84364:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84368:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   8436c:	52801a82 	mov	w2, #0xd4                  	// #212
   84370:	9102c021 	add	x1, x1, #0xb0
   84374:	91052000 	add	x0, x0, #0x148
   84378:	94000048 	bl	84498 <assertion_failed>
   8437c:	91140280 	add	x0, x20, #0x500
   84380:	f9400661 	ldr	x1, [x19,#8]
   84384:	b900027f 	str	wzr, [x19]
   84388:	f9001801 	str	x1, [x0,#48]
   8438c:	91140294 	add	x20, x20, #0x500
   84390:	b9402a80 	ldr	w0, [x20,#40]
   84394:	35000240 	cbnz	w0, 843dc <palloc+0xbc>
   84398:	aa1303e0 	mov	x0, x19
   8439c:	f9400bfe 	ldr	x30, [sp,#16]
   843a0:	a8c253f3 	ldp	x19, x20, [sp],#32
   843a4:	d65f03c0 	ret
   843a8:	97fffa60 	bl	82d28 <EnterCritical>
   843ac:	91140280 	add	x0, x20, #0x500
   843b0:	f9401813 	ldr	x19, [x0,#48]
   843b4:	b5fffcf3 	cbnz	x19, 84350 <palloc+0x30>
   843b8:	f9400813 	ldr	x19, [x0,#16]
   843bc:	f9400c02 	ldr	x2, [x0,#24]
   843c0:	91404261 	add	x1, x19, #0x10, lsl #12
   843c4:	f9000801 	str	x1, [x0,#16]
   843c8:	eb02003f 	cmp	x1, x2
   843cc:	54fffe09 	b.ls	8438c <palloc+0x6c>
   843d0:	b9402800 	ldr	w0, [x0,#40]
   843d4:	d2800013 	mov	x19, #0x0                   	// #0
   843d8:	34fffe00 	cbz	w0, 84398 <palloc+0x78>
   843dc:	97fffa60 	bl	82d5c <LeaveCritical>
   843e0:	aa1303e0 	mov	x0, x19
   843e4:	f9400bfe 	ldr	x30, [sp,#16]
   843e8:	a8c253f3 	ldp	x19, x20, [sp],#32
   843ec:	d65f03c0 	ret
   843f0:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   843f4:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   843f8:	528018c2 	mov	w2, #0xc6                  	// #198
   843fc:	9102c021 	add	x1, x1, #0xb0
   84400:	9104c000 	add	x0, x0, #0x130
   84404:	94000025 	bl	84498 <assertion_failed>
   84408:	17ffffcc 	b	84338 <palloc+0x18>

000000000008440c <pfree>:
   8440c:	a9be53f3 	stp	x19, x20, [sp,#-32]!
   84410:	f9000bfe 	str	x30, [sp,#16]
   84414:	b4000160 	cbz	x0, 84440 <pfree+0x34>
   84418:	b0000013 	adrp	x19, 85000 <FromTimer+0xe8>
   8441c:	91140273 	add	x19, x19, #0x500
   84420:	b9402a61 	ldr	w1, [x19,#40]
   84424:	35000141 	cbnz	w1, 8444c <pfree+0x40>
   84428:	f9401a62 	ldr	x2, [x19,#48]
   8442c:	5289a861 	mov	w1, #0x4d43                	// #19779
   84430:	72aa08e1 	movk	w1, #0x5047, lsl #16
   84434:	b9000001 	str	w1, [x0]
   84438:	f9000402 	str	x2, [x0,#8]
   8443c:	f9001a60 	str	x0, [x19,#48]
   84440:	f9400bfe 	ldr	x30, [sp,#16]
   84444:	a8c253f3 	ldp	x19, x20, [sp],#32
   84448:	d65f03c0 	ret
   8444c:	aa0003f4 	mov	x20, x0
   84450:	97fffa36 	bl	82d28 <EnterCritical>
   84454:	f9401a62 	ldr	x2, [x19,#48]
   84458:	5289a861 	mov	w1, #0x4d43                	// #19779
   8445c:	72aa08e1 	movk	w1, #0x5047, lsl #16
   84460:	b9402a60 	ldr	w0, [x19,#40]
   84464:	f9000682 	str	x2, [x20,#8]
   84468:	b9000281 	str	w1, [x20]
   8446c:	f9001a74 	str	x20, [x19,#48]
   84470:	34fffe80 	cbz	w0, 84440 <pfree+0x34>
   84474:	f9400bfe 	ldr	x30, [sp,#16]
   84478:	a8c253f3 	ldp	x19, x20, [sp],#32
   8447c:	17fffa38 	b	82d5c <LeaveCritical>

0000000000084480 <_GLOBAL__sub_I_mem_init>:
   84480:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84484:	91140000 	add	x0, x0, #0x500
   84488:	52800021 	mov	w1, #0x1                   	// #1
   8448c:	b9002001 	str	w1, [x0,#32]
   84490:	b9002801 	str	w1, [x0,#40]
   84494:	d65f03c0 	ret

0000000000084498 <assertion_failed>:
   84498:	a9bb53f3 	stp	x19, x20, [sp,#-80]!
   8449c:	aa0003f4 	mov	x20, x0
   844a0:	a9015bf5 	stp	x21, x22, [sp,#16]
   844a4:	f90013fe 	str	x30, [sp,#32]
   844a8:	aa0103f5 	mov	x21, x1
   844ac:	2a0203f6 	mov	w22, w2
   844b0:	910003f3 	mov	x19, sp
   844b4:	9100c3e0 	add	x0, sp, #0x30
   844b8:	97fff7d2 	bl	82400 <CString::CString()>
   844bc:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   844c0:	2a1603e3 	mov	w3, w22
   844c4:	aa1503e2 	mov	x2, x21
   844c8:	9105c021 	add	x1, x1, #0x170
   844cc:	9100c3e0 	add	x0, sp, #0x30
   844d0:	97fff9f4 	bl	82ca0 <CString::Format(char const*, ...)>
   844d4:	9100c3e0 	add	x0, sp, #0x30
   844d8:	97fff7e6 	bl	82470 <CString::operator char const*() const>
   844dc:	aa0003e1 	mov	x1, x0
   844e0:	aa1303e0 	mov	x0, x19
   844e4:	94000056 	bl	8463c <debug_stacktrace>
   844e8:	97fff660 	bl	81e68 <CLogger::Get()>
   844ec:	aa0003f3 	mov	x19, x0
   844f0:	9100c3e0 	add	x0, sp, #0x30
   844f4:	97fff7df 	bl	82470 <CString::operator char const*() const>
   844f8:	aa0003e1 	mov	x1, x0
   844fc:	b0000003 	adrp	x3, 85000 <FromTimer+0xe8>
   84500:	aa1403e4 	mov	x4, x20
   84504:	9105e063 	add	x3, x3, #0x178
   84508:	52800002 	mov	w2, #0x0                   	// #0
   8450c:	aa1303e0 	mov	x0, x19
   84510:	97fff750 	bl	82250 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84514:	9100c3e0 	add	x0, sp, #0x30
   84518:	97fff77c 	bl	82308 <CString::~CString()>
   8451c:	f94013fe 	ldr	x30, [sp,#32]
   84520:	a9415bf5 	ldp	x21, x22, [sp,#16]
   84524:	a8c553f3 	ldp	x19, x20, [sp],#80
   84528:	d65f03c0 	ret

000000000008452c <debug_hexdump>:
   8452c:	d10283ff 	sub	sp, sp, #0xa0
   84530:	a90753f3 	stp	x19, x20, [sp,#112]
   84534:	a9085bf5 	stp	x21, x22, [sp,#128]
   84538:	f9004bfe 	str	x30, [sp,#144]
   8453c:	aa0203f5 	mov	x21, x2
   84540:	aa0003f3 	mov	x19, x0
   84544:	2a0103f4 	mov	w20, w1
   84548:	b4000742 	cbz	x2, 84630 <debug_hexdump+0x104>
   8454c:	97fff647 	bl	81e68 <CLogger::Get()>
   84550:	b0000016 	adrp	x22, 85000 <FromTimer+0xe8>
   84554:	910702d6 	add	x22, x22, #0x1c0
   84558:	b0000003 	adrp	x3, 85000 <FromTimer+0xe8>
   8455c:	aa1303e5 	mov	x5, x19
   84560:	2a1403e4 	mov	w4, w20
   84564:	91066063 	add	x3, x3, #0x198
   84568:	52800082 	mov	w2, #0x4                   	// #4
   8456c:	aa1503e1 	mov	x1, x21
   84570:	97fff738 	bl	82250 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84574:	340004f4 	cbz	w20, 84610 <debug_hexdump+0xe4>
   84578:	97fff63c 	bl	81e68 <CLogger::Get()>
   8457c:	39401663 	ldrb	w3, [x19,#5]
   84580:	53003e64 	uxth	w4, w19
   84584:	39401262 	ldrb	w2, [x19,#4]
   84588:	91004273 	add	x19, x19, #0x10
   8458c:	385f3261 	ldurb	w1, [x19,#-13]
   84590:	385f2267 	ldurb	w7, [x19,#-14]
   84594:	385f1266 	ldurb	w6, [x19,#-15]
   84598:	385f0265 	ldurb	w5, [x19,#-16]
   8459c:	b90013e3 	str	w3, [sp,#16]
   845a0:	aa1603e3 	mov	x3, x22
   845a4:	b9000be2 	str	w2, [sp,#8]
   845a8:	52800082 	mov	w2, #0x4                   	// #4
   845ac:	b90003e1 	str	w1, [sp]
   845b0:	aa1503e1 	mov	x1, x21
   845b4:	385ff271 	ldurb	w17, [x19,#-1]
   845b8:	385fe270 	ldurb	w16, [x19,#-2]
   845bc:	385fd26f 	ldurb	w15, [x19,#-3]
   845c0:	385fc26e 	ldurb	w14, [x19,#-4]
   845c4:	385fb26d 	ldurb	w13, [x19,#-5]
   845c8:	385fa26c 	ldurb	w12, [x19,#-6]
   845cc:	385f926b 	ldurb	w11, [x19,#-7]
   845d0:	385f826a 	ldurb	w10, [x19,#-8]
   845d4:	385f7269 	ldurb	w9, [x19,#-9]
   845d8:	385f6268 	ldurb	w8, [x19,#-10]
   845dc:	b9001be8 	str	w8, [sp,#24]
   845e0:	b90063f1 	str	w17, [sp,#96]
   845e4:	b9005bf0 	str	w16, [sp,#88]
   845e8:	b90053ef 	str	w15, [sp,#80]
   845ec:	b9004bee 	str	w14, [sp,#72]
   845f0:	b90043ed 	str	w13, [sp,#64]
   845f4:	b9003bec 	str	w12, [sp,#56]
   845f8:	b90033eb 	str	w11, [sp,#48]
   845fc:	b9002bea 	str	w10, [sp,#40]
   84600:	b90023e9 	str	w9, [sp,#32]
   84604:	97fff713 	bl	82250 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84608:	71003e9f 	cmp	w20, #0xf
   8460c:	540000c8 	b.hi	84624 <debug_hexdump+0xf8>
   84610:	a94753f3 	ldp	x19, x20, [sp,#112]
   84614:	a9485bf5 	ldp	x21, x22, [sp,#128]
   84618:	f9404bfe 	ldr	x30, [sp,#144]
   8461c:	910283ff 	add	sp, sp, #0xa0
   84620:	d65f03c0 	ret
   84624:	71004294 	subs	w20, w20, #0x10
   84628:	54fffa81 	b.ne	84578 <debug_hexdump+0x4c>
   8462c:	17fffff9 	b	84610 <debug_hexdump+0xe4>
   84630:	b0000015 	adrp	x21, 85000 <FromTimer+0xe8>
   84634:	910642b5 	add	x21, x21, #0x190
   84638:	17ffffc5 	b	8454c <debug_hexdump+0x20>

000000000008463c <debug_stacktrace>:
   8463c:	a9bc53f3 	stp	x19, x20, [sp,#-64]!
   84640:	aa0003f4 	mov	x20, x0
   84644:	a90263f7 	stp	x23, x24, [sp,#32]
   84648:	a9015bf5 	stp	x21, x22, [sp,#16]
   8464c:	f9001bfe 	str	x30, [sp,#48]
   84650:	aa0103f8 	mov	x24, x1
   84654:	b40003e1 	cbz	x1, 846d0 <debug_stacktrace+0x94>
   84658:	90000016 	adrp	x22, 84000 <strtok_r+0x5c>
   8465c:	9132b2d6 	add	x22, x22, #0xcac
   84660:	b0000017 	adrp	x23, 85000 <FromTimer+0xe8>
   84664:	910862f7 	add	x23, x23, #0x218
   84668:	d2800013 	mov	x19, #0x0                   	// #0
   8466c:	b2404bf5 	mov	x21, #0x7ffff               	// #524287
   84670:	14000004 	b	84680 <debug_stacktrace+0x44>
   84674:	91000673 	add	x19, x19, #0x1
   84678:	f101027f 	cmp	x19, #0x40
   8467c:	54000200 	b.eq	846bc <debug_stacktrace+0x80>
   84680:	f8737a80 	ldr	x0, [x20,x19,lsl #3]
   84684:	eb15001f 	cmp	x0, x21
   84688:	54ffff69 	b.ls	84674 <debug_stacktrace+0x38>
   8468c:	eb16001f 	cmp	x0, x22
   84690:	54ffff22 	b.cs	84674 <debug_stacktrace+0x38>
   84694:	97fff5f5 	bl	81e68 <CLogger::Get()>
   84698:	f8737a85 	ldr	x5, [x20,x19,lsl #3]
   8469c:	2a1303e4 	mov	w4, w19
   846a0:	aa1703e3 	mov	x3, x23
   846a4:	52800082 	mov	w2, #0x4                   	// #4
   846a8:	aa1803e1 	mov	x1, x24
   846ac:	91000673 	add	x19, x19, #0x1
   846b0:	97fff6e8 	bl	82250 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   846b4:	f101027f 	cmp	x19, #0x40
   846b8:	54fffe41 	b.ne	84680 <debug_stacktrace+0x44>
   846bc:	a9415bf5 	ldp	x21, x22, [sp,#16]
   846c0:	a94263f7 	ldp	x23, x24, [sp,#32]
   846c4:	f9401bfe 	ldr	x30, [sp,#48]
   846c8:	a8c453f3 	ldp	x19, x20, [sp],#64
   846cc:	d65f03c0 	ret
   846d0:	b0000018 	adrp	x24, 85000 <FromTimer+0xe8>
   846d4:	91064318 	add	x24, x24, #0x190
   846d8:	17ffffe0 	b	84658 <debug_stacktrace+0x1c>
	...

0000000000084700 <DelayLoop>:
   84700:	71000400 	subs	w0, w0, #0x1
   84704:	54ffffe1 	b.ne	84700 <DelayLoop>
   84708:	d65f03c0 	ret
   8470c:	d503201f 	nop
   84710:	d503201f 	nop
   84714:	d503201f 	nop
   84718:	d503201f 	nop
   8471c:	d503201f 	nop
	...

0000000000084740 <CPtrList::CPtrList()>:
   84740:	f900001f 	str	xzr, [x0]
   84744:	d65f03c0 	ret

0000000000084748 <CPtrList::~CPtrList()>:
   84748:	f9400000 	ldr	x0, [x0]
   8474c:	b40000e0 	cbz	x0, 84768 <CPtrList::~CPtrList()+0x20>
   84750:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84754:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84758:	52800542 	mov	w2, #0x2a                  	// #42
   8475c:	9108c021 	add	x1, x1, #0x230
   84760:	91090000 	add	x0, x0, #0x240
   84764:	17ffff4d 	b	84498 <assertion_failed>
   84768:	d65f03c0 	ret

000000000008476c <CPtrList::GetFirst()>:
   8476c:	f9400000 	ldr	x0, [x0]
   84770:	d65f03c0 	ret

0000000000084774 <CPtrList::GetNext(TPtrListElement*)>:
   84774:	a9be7bfd 	stp	x29, x30, [sp,#-32]!
   84778:	910003fd 	mov	x29, sp
   8477c:	f9000bf3 	str	x19, [sp,#16]
   84780:	aa0103f3 	mov	x19, x1
   84784:	b4000201 	cbz	x1, 847c4 <CPtrList::GetNext(TPtrListElement*)+0x50>
   84788:	b9400261 	ldr	w1, [x19]
   8478c:	5289a860 	mov	w0, #0x4d43                	// #19779
   84790:	72aa0980 	movk	w0, #0x504c, lsl #16
   84794:	6b00003f 	cmp	w1, w0
   84798:	540000e0 	b.eq	847b4 <CPtrList::GetNext(TPtrListElement*)+0x40>
   8479c:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   847a0:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   847a4:	528006a2 	mov	w2, #0x35                  	// #53
   847a8:	9108c021 	add	x1, x1, #0x230
   847ac:	91098000 	add	x0, x0, #0x260
   847b0:	97ffff3a 	bl	84498 <assertion_failed>
   847b4:	f9400a60 	ldr	x0, [x19,#16]
   847b8:	f9400bf3 	ldr	x19, [sp,#16]
   847bc:	a8c27bfd 	ldp	x29, x30, [sp],#32
   847c0:	d65f03c0 	ret
   847c4:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   847c8:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   847cc:	52800682 	mov	w2, #0x34                  	// #52
   847d0:	9108c021 	add	x1, x1, #0x230
   847d4:	91094000 	add	x0, x0, #0x250
   847d8:	97ffff30 	bl	84498 <assertion_failed>
   847dc:	17ffffeb 	b	84788 <CPtrList::GetNext(TPtrListElement*)+0x14>

00000000000847e0 <CPtrList::GetPtr(TPtrListElement*)>:
   847e0:	a9be7bfd 	stp	x29, x30, [sp,#-32]!
   847e4:	910003fd 	mov	x29, sp
   847e8:	f9000bf3 	str	x19, [sp,#16]
   847ec:	aa0103f3 	mov	x19, x1
   847f0:	b4000201 	cbz	x1, 84830 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   847f4:	b9400261 	ldr	w1, [x19]
   847f8:	5289a860 	mov	w0, #0x4d43                	// #19779
   847fc:	72aa0980 	movk	w0, #0x504c, lsl #16
   84800:	6b00003f 	cmp	w1, w0
   84804:	540000e0 	b.eq	84820 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   84808:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   8480c:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84810:	528007a2 	mov	w2, #0x3d                  	// #61
   84814:	9108c021 	add	x1, x1, #0x230
   84818:	91098000 	add	x0, x0, #0x260
   8481c:	97ffff1f 	bl	84498 <assertion_failed>
   84820:	f9400e60 	ldr	x0, [x19,#24]
   84824:	f9400bf3 	ldr	x19, [sp,#16]
   84828:	a8c27bfd 	ldp	x29, x30, [sp],#32
   8482c:	d65f03c0 	ret
   84830:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84834:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84838:	52800782 	mov	w2, #0x3c                  	// #60
   8483c:	9108c021 	add	x1, x1, #0x230
   84840:	91094000 	add	x0, x0, #0x250
   84844:	97ffff15 	bl	84498 <assertion_failed>
   84848:	17ffffeb 	b	847f4 <CPtrList::GetPtr(TPtrListElement*)+0x14>

000000000008484c <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   8484c:	a9bd7bfd 	stp	x29, x30, [sp,#-48]!
   84850:	910003fd 	mov	x29, sp
   84854:	a9025bf5 	stp	x21, x22, [sp,#32]
   84858:	aa0003f5 	mov	x21, x0
   8485c:	d2800400 	mov	x0, #0x20                  	// #32
   84860:	a90153f3 	stp	x19, x20, [sp,#16]
   84864:	aa0203f6 	mov	x22, x2
   84868:	aa0103f3 	mov	x19, x1
   8486c:	97fff6a2 	bl	822f4 <operator new(unsigned long)>
   84870:	aa0003f4 	mov	x20, x0
   84874:	f94002a0 	ldr	x0, [x21]
   84878:	5289a861 	mov	w1, #0x4d43                	// #19779
   8487c:	72aa0981 	movk	w1, #0x504c, lsl #16
   84880:	f9000e96 	str	x22, [x20,#24]
   84884:	b9000281 	str	w1, [x20]
   84888:	b40004e0 	cbz	x0, 84924 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   8488c:	b40006b3 	cbz	x19, 84960 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x114>
   84890:	b9400261 	ldr	w1, [x19]
   84894:	5289a860 	mov	w0, #0x4d43                	// #19779
   84898:	72aa0980 	movk	w0, #0x504c, lsl #16
   8489c:	6b00003f 	cmp	w1, w0
   848a0:	540000e0 	b.eq	848bc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   848a4:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   848a8:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   848ac:	528009c2 	mov	w2, #0x4e                  	// #78
   848b0:	9108c021 	add	x1, x1, #0x230
   848b4:	910aa000 	add	x0, x0, #0x2a8
   848b8:	97fffef8 	bl	84498 <assertion_failed>
   848bc:	f94002a0 	ldr	x0, [x21]
   848c0:	eb13001f 	cmp	x0, x19
   848c4:	540003e0 	b.eq	84940 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   848c8:	f9400660 	ldr	x0, [x19,#8]
   848cc:	f9000680 	str	x0, [x20,#8]
   848d0:	f9000a93 	str	x19, [x20,#16]
   848d4:	f9400660 	ldr	x0, [x19,#8]
   848d8:	b40001c0 	cbz	x0, 84910 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc4>
   848dc:	b9400002 	ldr	w2, [x0]
   848e0:	5289a861 	mov	w1, #0x4d43                	// #19779
   848e4:	72aa0981 	movk	w1, #0x504c, lsl #16
   848e8:	6b01005f 	cmp	w2, w1
   848ec:	54000100 	b.eq	8490c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   848f0:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   848f4:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   848f8:	910b4000 	add	x0, x0, #0x2d0
   848fc:	52800c02 	mov	w2, #0x60                  	// #96
   84900:	9108c021 	add	x1, x1, #0x230
   84904:	97fffee5 	bl	84498 <assertion_failed>
   84908:	f9400660 	ldr	x0, [x19,#8]
   8490c:	f9000814 	str	x20, [x0,#16]
   84910:	f9000674 	str	x20, [x19,#8]
   84914:	a9425bf5 	ldp	x21, x22, [sp,#32]
   84918:	a94153f3 	ldp	x19, x20, [sp,#16]
   8491c:	a8c37bfd 	ldp	x29, x30, [sp],#48
   84920:	d65f03c0 	ret
   84924:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84928:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   8492c:	52800982 	mov	w2, #0x4c                  	// #76
   84930:	9108c021 	add	x1, x1, #0x230
   84934:	910a2000 	add	x0, x0, #0x288
   84938:	97fffed8 	bl	84498 <assertion_failed>
   8493c:	17ffffd4 	b	8488c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>
   84940:	f900069f 	str	xzr, [x20,#8]
   84944:	f9000a93 	str	x19, [x20,#16]
   84948:	f9000674 	str	x20, [x19,#8]
   8494c:	f90002b4 	str	x20, [x21]
   84950:	a94153f3 	ldp	x19, x20, [sp,#16]
   84954:	a9425bf5 	ldp	x21, x22, [sp,#32]
   84958:	a8c37bfd 	ldp	x29, x30, [sp],#48
   8495c:	d65f03c0 	ret
   84960:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84964:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84968:	528009a2 	mov	w2, #0x4d                  	// #77
   8496c:	9108c021 	add	x1, x1, #0x230
   84970:	910a6000 	add	x0, x0, #0x298
   84974:	97fffec9 	bl	84498 <assertion_failed>
   84978:	17ffffc6 	b	84890 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x44>

000000000008497c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   8497c:	a9bd7bfd 	stp	x29, x30, [sp,#-48]!
   84980:	910003fd 	mov	x29, sp
   84984:	a9025bf5 	stp	x21, x22, [sp,#32]
   84988:	aa0003f5 	mov	x21, x0
   8498c:	d2800400 	mov	x0, #0x20                  	// #32
   84990:	a90153f3 	stp	x19, x20, [sp,#16]
   84994:	aa0203f6 	mov	x22, x2
   84998:	aa0103f4 	mov	x20, x1
   8499c:	97fff656 	bl	822f4 <operator new(unsigned long)>
   849a0:	aa0003f3 	mov	x19, x0
   849a4:	5289a860 	mov	w0, #0x4d43                	// #19779
   849a8:	72aa0980 	movk	w0, #0x504c, lsl #16
   849ac:	f9000e76 	str	x22, [x19,#24]
   849b0:	b9000260 	str	w0, [x19]
   849b4:	f94002a0 	ldr	x0, [x21]
   849b8:	b4000494 	cbz	x20, 84a48 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   849bc:	b4000620 	cbz	x0, 84a80 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x104>
   849c0:	b9400281 	ldr	w1, [x20]
   849c4:	5289a860 	mov	w0, #0x4d43                	// #19779
   849c8:	72aa0980 	movk	w0, #0x504c, lsl #16
   849cc:	6b00003f 	cmp	w1, w0
   849d0:	540000e0 	b.eq	849ec <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   849d4:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   849d8:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   849dc:	52800fc2 	mov	w2, #0x7e                  	// #126
   849e0:	9108c021 	add	x1, x1, #0x230
   849e4:	910be000 	add	x0, x0, #0x2f8
   849e8:	97fffeac 	bl	84498 <assertion_failed>
   849ec:	f9400a80 	ldr	x0, [x20,#16]
   849f0:	f9000a60 	str	x0, [x19,#16]
   849f4:	f9000674 	str	x20, [x19,#8]
   849f8:	f9400a80 	ldr	x0, [x20,#16]
   849fc:	b40001c0 	cbz	x0, 84a34 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
   84a00:	b9400002 	ldr	w2, [x0]
   84a04:	5289a861 	mov	w1, #0x4d43                	// #19779
   84a08:	72aa0981 	movk	w1, #0x504c, lsl #16
   84a0c:	6b01005f 	cmp	w2, w1
   84a10:	54000100 	b.eq	84a30 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
   84a14:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84a18:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84a1c:	910c8000 	add	x0, x0, #0x320
   84a20:	528010a2 	mov	w2, #0x85                  	// #133
   84a24:	9108c021 	add	x1, x1, #0x230
   84a28:	97fffe9c 	bl	84498 <assertion_failed>
   84a2c:	f9400a80 	ldr	x0, [x20,#16]
   84a30:	f9000413 	str	x19, [x0,#8]
   84a34:	f9000a93 	str	x19, [x20,#16]
   84a38:	a9425bf5 	ldp	x21, x22, [sp,#32]
   84a3c:	a94153f3 	ldp	x19, x20, [sp,#16]
   84a40:	a8c37bfd 	ldp	x29, x30, [sp],#48
   84a44:	d65f03c0 	ret
   84a48:	b40000e0 	cbz	x0, 84a64 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   84a4c:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84a50:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84a54:	52800e82 	mov	w2, #0x74                  	// #116
   84a58:	9108c021 	add	x1, x1, #0x230
   84a5c:	91090000 	add	x0, x0, #0x240
   84a60:	97fffe8e 	bl	84498 <assertion_failed>
   84a64:	f900067f 	str	xzr, [x19,#8]
   84a68:	f9000a7f 	str	xzr, [x19,#16]
   84a6c:	f90002b3 	str	x19, [x21]
   84a70:	a94153f3 	ldp	x19, x20, [sp,#16]
   84a74:	a9425bf5 	ldp	x21, x22, [sp,#32]
   84a78:	a8c37bfd 	ldp	x29, x30, [sp],#48
   84a7c:	d65f03c0 	ret
   84a80:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84a84:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84a88:	52800fa2 	mov	w2, #0x7d                  	// #125
   84a8c:	9108c021 	add	x1, x1, #0x230
   84a90:	910a2000 	add	x0, x0, #0x288
   84a94:	97fffe81 	bl	84498 <assertion_failed>
   84a98:	17ffffca 	b	849c0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x44>

0000000000084a9c <CPtrList::Remove(TPtrListElement*)>:
   84a9c:	a9be7bfd 	stp	x29, x30, [sp,#-32]!
   84aa0:	910003fd 	mov	x29, sp
   84aa4:	a90153f3 	stp	x19, x20, [sp,#16]
   84aa8:	aa0103f3 	mov	x19, x1
   84aac:	aa0003f4 	mov	x20, x0
   84ab0:	b4000921 	cbz	x1, 84bd4 <CPtrList::Remove(TPtrListElement*)+0x138>
   84ab4:	b9400261 	ldr	w1, [x19]
   84ab8:	5289a860 	mov	w0, #0x4d43                	// #19779
   84abc:	72aa0980 	movk	w0, #0x504c, lsl #16
   84ac0:	6b00003f 	cmp	w1, w0
   84ac4:	540000e0 	b.eq	84ae0 <CPtrList::Remove(TPtrListElement*)+0x44>
   84ac8:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84acc:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84ad0:	52801202 	mov	w2, #0x90                  	// #144
   84ad4:	9108c021 	add	x1, x1, #0x230
   84ad8:	91098000 	add	x0, x0, #0x260
   84adc:	97fffe6f 	bl	84498 <assertion_failed>
   84ae0:	f9400280 	ldr	x0, [x20]
   84ae4:	eb13001f 	cmp	x0, x19
   84ae8:	540004c0 	b.eq	84b80 <CPtrList::Remove(TPtrListElement*)+0xe4>
   84aec:	f9400660 	ldr	x0, [x19,#8]
   84af0:	b4000800 	cbz	x0, 84bf0 <CPtrList::Remove(TPtrListElement*)+0x154>
   84af4:	b9400002 	ldr	w2, [x0]
   84af8:	5289a861 	mov	w1, #0x4d43                	// #19779
   84afc:	72aa0981 	movk	w1, #0x504c, lsl #16
   84b00:	6b01005f 	cmp	w2, w1
   84b04:	54000100 	b.eq	84b24 <CPtrList::Remove(TPtrListElement*)+0x88>
   84b08:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84b0c:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84b10:	910e6000 	add	x0, x0, #0x398
   84b14:	528013e2 	mov	w2, #0x9f                  	// #159
   84b18:	9108c021 	add	x1, x1, #0x230
   84b1c:	97fffe5f 	bl	84498 <assertion_failed>
   84b20:	f9400660 	ldr	x0, [x19,#8]
   84b24:	f9400a61 	ldr	x1, [x19,#16]
   84b28:	f9000801 	str	x1, [x0,#16]
   84b2c:	f9400a61 	ldr	x1, [x19,#16]
   84b30:	b40001e1 	cbz	x1, 84b6c <CPtrList::Remove(TPtrListElement*)+0xd0>
   84b34:	b9400023 	ldr	w3, [x1]
   84b38:	5289a862 	mov	w2, #0x4d43                	// #19779
   84b3c:	72aa0982 	movk	w2, #0x504c, lsl #16
   84b40:	6b02007f 	cmp	w3, w2
   84b44:	54000120 	b.eq	84b68 <CPtrList::Remove(TPtrListElement*)+0xcc>
   84b48:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84b4c:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84b50:	9108c021 	add	x1, x1, #0x230
   84b54:	910d4000 	add	x0, x0, #0x350
   84b58:	52801482 	mov	w2, #0xa4                  	// #164
   84b5c:	97fffe4f 	bl	84498 <assertion_failed>
   84b60:	f9400a61 	ldr	x1, [x19,#16]
   84b64:	f9400660 	ldr	x0, [x19,#8]
   84b68:	f9000420 	str	x0, [x1,#8]
   84b6c:	b900027f 	str	wzr, [x19]
   84b70:	aa1303e0 	mov	x0, x19
   84b74:	a94153f3 	ldp	x19, x20, [sp,#16]
   84b78:	a8c27bfd 	ldp	x29, x30, [sp],#32
   84b7c:	17fff5e0 	b	822fc <operator delete(void*)>
   84b80:	f9400a60 	ldr	x0, [x19,#16]
   84b84:	f9000280 	str	x0, [x20]
   84b88:	b4ffff20 	cbz	x0, 84b6c <CPtrList::Remove(TPtrListElement*)+0xd0>
   84b8c:	b9400002 	ldr	w2, [x0]
   84b90:	5289a861 	mov	w1, #0x4d43                	// #19779
   84b94:	72aa0981 	movk	w1, #0x504c, lsl #16
   84b98:	6b01005f 	cmp	w2, w1
   84b9c:	54000100 	b.eq	84bbc <CPtrList::Remove(TPtrListElement*)+0x120>
   84ba0:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84ba4:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84ba8:	910d4000 	add	x0, x0, #0x350
   84bac:	52801302 	mov	w2, #0x98                  	// #152
   84bb0:	9108c021 	add	x1, x1, #0x230
   84bb4:	97fffe39 	bl	84498 <assertion_failed>
   84bb8:	f9400a60 	ldr	x0, [x19,#16]
   84bbc:	f900041f 	str	xzr, [x0,#8]
   84bc0:	aa1303e0 	mov	x0, x19
   84bc4:	b900027f 	str	wzr, [x19]
   84bc8:	a94153f3 	ldp	x19, x20, [sp,#16]
   84bcc:	a8c27bfd 	ldp	x29, x30, [sp],#32
   84bd0:	17fff5cb 	b	822fc <operator delete(void*)>
   84bd4:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84bd8:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84bdc:	528011e2 	mov	w2, #0x8f                  	// #143
   84be0:	9108c021 	add	x1, x1, #0x230
   84be4:	91094000 	add	x0, x0, #0x250
   84be8:	97fffe2c 	bl	84498 <assertion_failed>
   84bec:	17ffffb2 	b	84ab4 <CPtrList::Remove(TPtrListElement*)+0x18>
   84bf0:	b0000001 	adrp	x1, 85000 <FromTimer+0xe8>
   84bf4:	b0000000 	adrp	x0, 85000 <FromTimer+0xe8>
   84bf8:	910e0000 	add	x0, x0, #0x380
   84bfc:	528013c2 	mov	w2, #0x9e                  	// #158
   84c00:	9108c021 	add	x1, x1, #0x230
   84c04:	97fffe25 	bl	84498 <assertion_failed>
   84c08:	f9400660 	ldr	x0, [x19,#8]
   84c0c:	17ffffba 	b	84af4 <CPtrList::Remove(TPtrListElement*)+0x58>

0000000000084c10 <CPtrList::Find(void*)>:
   84c10:	a9bc7bfd 	stp	x29, x30, [sp,#-64]!
   84c14:	910003fd 	mov	x29, sp
   84c18:	a90153f3 	stp	x19, x20, [sp,#16]
   84c1c:	f9400013 	ldr	x19, [x0]
   84c20:	a9025bf5 	stp	x21, x22, [sp,#32]
   84c24:	f9001bf7 	str	x23, [sp,#48]
   84c28:	b4000373 	cbz	x19, 84c94 <CPtrList::Find(void*)+0x84>
   84c2c:	b0000016 	adrp	x22, 85000 <FromTimer+0xe8>
   84c30:	9108c2d6 	add	x22, x22, #0x230
   84c34:	b0000015 	adrp	x21, 85000 <FromTimer+0xe8>
   84c38:	910982b5 	add	x21, x21, #0x260
   84c3c:	5289a877 	mov	w23, #0x4d43                	// #19779
   84c40:	72aa0997 	movk	w23, #0x504c, lsl #16
   84c44:	aa0103f4 	mov	x20, x1
   84c48:	14000003 	b	84c54 <CPtrList::Find(void*)+0x44>
   84c4c:	f9400a73 	ldr	x19, [x19,#16]
   84c50:	b4000233 	cbz	x19, 84c94 <CPtrList::Find(void*)+0x84>
   84c54:	b9400263 	ldr	w3, [x19]
   84c58:	52801662 	mov	w2, #0xb3                  	// #179
   84c5c:	aa1603e1 	mov	x1, x22
   84c60:	aa1503e0 	mov	x0, x21
   84c64:	6b17007f 	cmp	w3, w23
   84c68:	54000040 	b.eq	84c70 <CPtrList::Find(void*)+0x60>
   84c6c:	97fffe0b 	bl	84498 <assertion_failed>
   84c70:	f9400e60 	ldr	x0, [x19,#24]
   84c74:	eb14001f 	cmp	x0, x20
   84c78:	54fffea1 	b.ne	84c4c <CPtrList::Find(void*)+0x3c>
   84c7c:	aa1303e0 	mov	x0, x19
   84c80:	f9401bf7 	ldr	x23, [sp,#48]
   84c84:	a94153f3 	ldp	x19, x20, [sp,#16]
   84c88:	a9425bf5 	ldp	x21, x22, [sp,#32]
   84c8c:	a8c47bfd 	ldp	x29, x30, [sp],#64
   84c90:	d65f03c0 	ret
   84c94:	d2800000 	mov	x0, #0x0                   	// #0
   84c98:	f9401bf7 	ldr	x23, [sp,#48]
   84c9c:	a94153f3 	ldp	x19, x20, [sp,#16]
   84ca0:	a9425bf5 	ldp	x21, x22, [sp,#32]
   84ca4:	a8c47bfd 	ldp	x29, x30, [sp],#64
   84ca8:	d65f03c0 	ret
